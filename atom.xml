<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>元渊`Blog</title>
  
  <subtitle>生活明朗,万物可爱</subtitle>
  <link href="https://www.yuanyuan.blog/atom.xml" rel="self"/>
  
  <link href="https://www.yuanyuan.blog/"/>
  <updated>2025-02-22T12:17:28.190Z</updated>
  <id>https://www.yuanyuan.blog/</id>
  
  <author>
    <name>元渊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java响应式编程-4.Spring Security Reactive</title>
    <link href="https://www.yuanyuan.blog/posts/58318f71.html"/>
    <id>https://www.yuanyuan.blog/posts/58318f71.html</id>
    <published>2025-02-08T18:30:08.000Z</published>
    <updated>2025-02-22T12:17:28.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-security-reactive"><a class="markdownIt-Anchor" href="#spring-security-reactive"></a> Spring Security Reactive</h1><ul><li>RBAC权限模型</li><li>WebFlux配置：@EnableWebFluxSecurity、@EnableReactiveMethodSecurity</li><li>SecurityFilterChain 组件</li><li>AuthenticationManager  组件</li><li>UserDetailsService  组件</li><li>基于注解的方法级别授权</li></ul><h2 id="整合"><a class="markdownIt-Anchor" href="#整合"></a> 整合</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.asyncer/r2dbc-mysql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.asyncer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>r2dbc-mysql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        响应式 Spring Data R2dbc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-r2dbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--        响应式Web  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="开发"><a class="markdownIt-Anchor" href="#开发"></a> 开发</h2><h3 id="应用安全"><a class="markdownIt-Anchor" href="#应用安全"></a> 应用安全</h3><ul><li><p><strong>防止攻击</strong>：</p></li><li><ul><li>DDos、CSRF、XSS、SQL注入…</li></ul></li><li><p><strong>控制权限</strong></p></li><li><ul><li>登录的用户能干什么。</li><li>用户登录系统以后要控制住用户的所有行为，防止越权；</li></ul></li><li><p>传输加密</p></li><li><ul><li>https</li><li>X509</li></ul></li><li><p>认证：</p></li><li><ul><li>OAuth2.0</li><li>JWT</li></ul></li></ul><h3 id="rbac权限模型"><a class="markdownIt-Anchor" href="#rbac权限模型"></a> RBAC权限模型</h3><p>Role Based Access Controll： 基于角色的访问控制</p><p>一个网站有很多<strong>用户</strong>，每个用户可以有很多<strong>角色</strong>，一个角色可以关联很多<strong>权限</strong>。一个人到底能干什么？</p><p>权限控制：</p><ul><li>找到这个人，看他有哪些角色，每个角色能拥有哪些<strong>权限</strong>。  这个人就拥有一堆的 <strong>角色</strong> 或者 <strong>权限</strong></li><li>这个人执行方法的时候，我们给方法规定好权限，由权限框架负责判断，这个人是否有指定的权限</li></ul><p>所有权限框架：</p><ul><li>让用户登录进来：  <strong>认证（authenticate）</strong>：用账号密码、各种其他方式，先让用户进来</li><li>查询用户拥有的所有角色和权限： <strong>授权（authorize）</strong>： 每个方法执行的时候，匹配角色或者权限来判定用户是否可以执行这个方法</li></ul><h2 id="认证"><a class="markdownIt-Anchor" href="#认证"></a> 认证</h2><blockquote><p>登录行为</p></blockquote><h3 id="静态资源放行"><a class="markdownIt-Anchor" href="#静态资源放行"></a> 静态资源放行</h3><h3 id="其他请求需要登录"><a class="markdownIt-Anchor" href="#其他请求需要登录"></a> 其他请求需要登录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuanyuan.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.yuanyuan.security.component.AppReactiveUserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.security.reactive.PathRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableReactiveMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.web.server.ServerHttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.ReactiveUserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.factory.PasswordEncoderFactories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.server.SecurityWebFilterChain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableReactiveMethodSecurity</span> <span class="comment">//开启响应式 的 基于方法级别的权限控制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppSecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ReactiveUserDetailsService appReactiveUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityWebFilterChain <span class="title function_">springSecurityFilterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">        <span class="comment">//1、定义哪些请求需要认证，哪些不需要</span></span><br><span class="line">        http.authorizeExchange(authorize -&gt; &#123;</span><br><span class="line">            <span class="comment">//1.1、允许所有人都访问静态资源；</span></span><br><span class="line">            authorize.matchers(PathRequest.toStaticResources()</span><br><span class="line">                    .atCommonLocations()).permitAll();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.2、剩下的所有请求都需要认证（登录）</span></span><br><span class="line">            authorize.anyExchange().authenticated();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、开启默认的表单登录</span></span><br><span class="line">        http.formLogin(formLoginSpec -&gt; &#123;</span><br><span class="line"><span class="comment">//            formLoginSpec.loginPage(&quot;/haha&quot;);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、安全控制:</span></span><br><span class="line">        http.csrf(csrfSpec -&gt; &#123;</span><br><span class="line">            csrfSpec.disable();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 目前认证： 用户名 是 user  密码是默认生成。</span></span><br><span class="line">        <span class="comment">// 期望认证： 去数据库查用户名和密码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、配置 认证规则： 如何去数据库中查询到用户;</span></span><br><span class="line">        <span class="comment">// Sprinbg Security 底层使用 ReactiveAuthenticationManager 去查询用户信息</span></span><br><span class="line">        <span class="comment">// ReactiveAuthenticationManager 有一个实现是</span></span><br><span class="line">        <span class="comment">//   UserDetailsRepositoryReactiveAuthenticationManager： 用户信息去数据库中查</span></span><br><span class="line">        <span class="comment">//   UDRespAM 需要  ReactiveUserDetailsService：</span></span><br><span class="line">        <span class="comment">// 我们只需要自己写一个 ReactiveUserDetailsService： 响应式的用户详情查询服务</span></span><br><span class="line">        http.authenticationManager(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UserDetailsRepositoryReactiveAuthenticationManager</span>(</span><br><span class="line">                        appReactiveUserDetailsService)</span><br><span class="line">        );</span><br><span class="line"><span class="comment">//        http.addFilterAt()</span></span><br><span class="line">        <span class="comment">//构建出安全配置</span></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">PasswordEncoder</span> <span class="variable">encoder</span> <span class="operator">=</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">        <span class="keyword">return</span> encoder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/DeWatermark.ai_1739023409796.png" alt="DeWatermark.ai_1739023409796" /></p><p>这个界面点击登录，最终Spring Security 框架会使用 ReactiveUserDetailsService 组件，按照 表单提交的用户名 去<strong>数据库查询</strong>这个<strong>用户详情</strong>（<strong>基本信息</strong>[账号、密码]，<strong>角色</strong>，<strong>权限</strong>）。把数据库中返回的 <strong>用户详情</strong> 中的密码 和 表单提交的密码进行比对。比对成功则登录成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.yuanyuan.security.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.r2dbc.core.DatabaseClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.ReactiveUserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.factory.PasswordEncoderFactories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">// 来定义如何去数据库中按照用户名查用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppReactiveUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">ReactiveUserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DatabaseClient databaseClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义如何按照用户名去数据库查询用户信息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;UserDetails&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();</span></span><br><span class="line">        <span class="comment">//从数据库查询用户、角色、权限所有数据的逻辑</span></span><br><span class="line">        Mono&lt;UserDetails&gt; userDetailsMono = databaseClient.sql(<span class="string">&quot;select u.*,r.id rid,r.name,r.value,pm.id pid,pm.value pvalue,pm.description &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;from t_user u &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;left join t_user_role ur on ur.user_id=u.id &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;left join t_roles r on r.id = ur.role_id &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;left join t_role_perm rp on rp.role_id=r.id &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;left join t_perm pm on rp.perm_id=pm.id &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;where u.username = ? limit 1&quot;</span>)</span><br><span class="line">                .bind(<span class="number">0</span>, username)</span><br><span class="line">                .fetch()</span><br><span class="line">                .one()<span class="comment">// all()</span></span><br><span class="line">                .map(map -&gt; &#123;</span><br><span class="line">                    <span class="type">UserDetails</span> <span class="variable">details</span> <span class="operator">=</span> User.builder()</span><br><span class="line">                            .username(username)</span><br><span class="line">                            .password(map.get(<span class="string">&quot;password&quot;</span>).toString())</span><br><span class="line">                            <span class="comment">//自动调用密码加密器把前端传来的明文 encode</span></span><br><span class="line"><span class="comment">//                            .passwordEncoder(str-&gt; passwordEncoder.encode(str)) //为啥？？？</span></span><br><span class="line">                            <span class="comment">//权限</span></span><br><span class="line"><span class="comment">//                            .authorities(new SimpleGrantedAuthority(&quot;ROLE_delete&quot;)) //默认不成功</span></span><br><span class="line">                            .roles(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;sale&quot;</span>,<span class="string">&quot;haha&quot;</span>,<span class="string">&quot;delete&quot;</span>) <span class="comment">//ROLE成功</span></span><br><span class="line">                            .build();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//角色和权限都被封装成 SimpleGrantedAuthority</span></span><br><span class="line">                    <span class="comment">// 角色有 ROLE_ 前缀， 权限没有</span></span><br><span class="line">                    <span class="comment">// hasRole：hasAuthority</span></span><br><span class="line">                    <span class="keyword">return</span> details;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDetailsMono;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="授权"><a class="markdownIt-Anchor" href="#授权"></a> 授权</h2><p>@EnableReactiveMethodSecurity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.yuanyuan.security.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 角色 haha： ROLE_haha：角色</span></span><br><span class="line">    <span class="comment">// 没有ROLE 前缀是权限</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//复杂的SpEL表达式</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;delete&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/world&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">world</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="string">&quot;world!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class='tag-link-1'><a class="tag-Link" target="_blank" href="https://github.com/spring-projects/spring-security-samples/tree/main">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url('https://t3.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=https://github.com/spring-projects/spring-security-samples/tree/main&size=60'); border-radius: 50%; width: 60px; height: 60px;"></div>        <div class="tag-link-right">            <div class="tag-link-title">官方实例</div>            <div class="tag-link-sitename">https://github.com/spring-projects/spring-security-samples/tree/main</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><p>配置： SecurityWebFilterChain</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.yuanyuan.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.yuanyuan.security.component.AppReactiveUserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.security.reactive.PathRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableReactiveMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.web.server.ServerHttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.ReactiveUserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.factory.PasswordEncoderFactories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.server.SecurityWebFilterChain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableReactiveMethodSecurity</span> <span class="comment">//开启响应式 的 基于方法级别的权限控制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppSecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ReactiveUserDetailsService appReactiveUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityWebFilterChain <span class="title function_">springSecurityFilterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">        <span class="comment">//1、定义哪些请求需要认证，哪些不需要</span></span><br><span class="line">        http.authorizeExchange(authorize -&gt; &#123;</span><br><span class="line">            <span class="comment">//1.1、允许所有人都访问静态资源；</span></span><br><span class="line">            authorize.matchers(PathRequest.toStaticResources()</span><br><span class="line">                    .atCommonLocations()).permitAll();</span><br><span class="line">            <span class="comment">//1.2、剩下的所有请求都需要认证（登录）</span></span><br><span class="line">            authorize.anyExchange().authenticated();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、开启默认的表单登录</span></span><br><span class="line">        http.formLogin(formLoginSpec -&gt; &#123;</span><br><span class="line"><span class="comment">//            formLoginSpec.loginPage(&quot;/haha&quot;);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、安全控制:</span></span><br><span class="line">        http.csrf(csrfSpec -&gt; &#123;</span><br><span class="line">            csrfSpec.disable();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 目前认证： 用户名 是 user  密码是默认生成。</span></span><br><span class="line">        <span class="comment">// 期望认证： 去数据库查用户名和密码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、配置 认证规则： 如何去数据库中查询到用户;</span></span><br><span class="line">        <span class="comment">// Sprinbg Security 底层使用 ReactiveAuthenticationManager 去查询用户信息</span></span><br><span class="line">        <span class="comment">// ReactiveAuthenticationManager 有一个实现是</span></span><br><span class="line">        <span class="comment">//   UserDetailsRepositoryReactiveAuthenticationManager： 用户信息去数据库中查</span></span><br><span class="line">        <span class="comment">//   UDRespAM 需要  ReactiveUserDetailsService：</span></span><br><span class="line">        <span class="comment">// 我们只需要自己写一个 ReactiveUserDetailsService： 响应式的用户详情查询服务</span></span><br><span class="line">        http.authenticationManager(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UserDetailsRepositoryReactiveAuthenticationManager</span>(</span><br><span class="line">                        appReactiveUserDetailsService)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建出安全配置</span></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">PasswordEncoder</span> <span class="variable">encoder</span> <span class="operator">=</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">        <span class="keyword">return</span> encoder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring-security-reactive&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#spring-security-reactive&quot;&gt;&lt;/a&gt; Spring Security Reactive&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="编程进阶" scheme="https://www.yuanyuan.blog/categories/%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="Java" scheme="https://www.yuanyuan.blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java响应式编程-3.R2DBC</title>
    <link href="https://www.yuanyuan.blog/posts/a3f8139e.html"/>
    <id>https://www.yuanyuan.blog/posts/a3f8139e.html</id>
    <published>2025-02-08T18:30:03.000Z</published>
    <updated>2025-02-22T12:17:28.190Z</updated>
    
    <content type="html"><![CDATA[<p>Web、网络、IO（存储）、中间件（Redis、MySQL）</p><p>应用开发：</p><ul><li>网络</li><li><strong>存储</strong>：MySQL、Redis</li><li><strong>Web</strong>：Webflux</li><li>前端； 后端：Controller – Service – Dao（r2dbc；mysql）</li></ul><p>数据库：</p><ul><li><p><strong>导入驱动</strong>； 以前：JDBC（jdbc、各大驱动mysql-connector）； 现在：r2dbc（<a href="https://github.com/r2dbc/r2dbc-spi">r2dbc-spi</a>、各大驱动 r2dbc-mysql）</p></li><li><p><strong>驱动</strong>：</p></li><li><ul><li>获取连接</li><li>发送SQL、执行</li><li>封装数据库返回结果</li></ul></li><li><p>r2dbc原生API：<a href="https://r2dbc.io">https://r2dbc.io</a></p></li><li><p>boot整合spring data r2dbc：spring-boot-starter-data-r2dbc</p></li><li><p>三大组件：R2dbcRepository、R2dbcEntityTemplate 、DatabaseClient</p></li><li><p>RBAC权限模型导入，基础CRUD练习；SQL文件在附录</p></li><li><p>1-1，1-N 关系处理；</p></li><li><p>扩展：导入接口文档进行测试： 访问 项目/doc.html</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webflux-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="r2dbc"><a class="markdownIt-Anchor" href="#r2dbc"></a> R2dbc</h2><blockquote><p>用法：</p><p>1、导入驱动: 导入连接池（<a href="https://github.com/r2dbc/r2dbc-pool">r2dbc-pool</a>）、导入驱动（<a href="https://github.com/asyncer-io/r2dbc-mysql">r2dbc-mysql</a> ）</p><p>2、使用驱动提供的API操作</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.asyncer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>r2dbc-mysql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//0、MySQL配置</span></span><br><span class="line"><span class="type">MySqlConnectionConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> MySqlConnectionConfiguration.builder()</span><br><span class="line">        .host(<span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">        .port(<span class="number">3306</span>)</span><br><span class="line">        .username(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">        .password(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">        .database(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、获取连接工厂</span></span><br><span class="line"><span class="type">MySqlConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> MySqlConnectionFactory.from(configuration);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取到连接，发送sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JDBC： Statement： 封装sql的</span></span><br><span class="line"><span class="comment">//3、数据发布者</span></span><br><span class="line">Mono.from(connectionFactory.create())</span><br><span class="line">        .flatMapMany(connection -&gt;</span><br><span class="line">                connection</span><br><span class="line">                        .createStatement(<span class="string">&quot;select * from t_author where id=?id and name=?name&quot;</span>)</span><br><span class="line">                        .bind(<span class="string">&quot;id&quot;</span>,<span class="number">1L</span>) <span class="comment">//具名参数</span></span><br><span class="line">                        .bind(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">                        .execute()</span><br><span class="line">        ).flatMap(result -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> result.map(readable -&gt; &#123;</span><br><span class="line">                <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> readable.get(<span class="string">&quot;id&quot;</span>, Long.class);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> readable.get(<span class="string">&quot;name&quot;</span>, String.class);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TAuthor</span>(id, name);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(tAuthor -&gt; System.out.println(<span class="string">&quot;tAuthor = &quot;</span> + tAuthor));</span><br></pre></td></tr></table></figure><h2 id="spring-data-r2dbc"><a class="markdownIt-Anchor" href="#spring-data-r2dbc"></a> Spring Data R2DBC</h2><blockquote><p>提升生产力方式的 响应式数据库操作</p></blockquote><h3 id="整合"><a class="markdownIt-Anchor" href="#整合"></a> 整合</h3><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.asyncer/r2dbc-mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.asyncer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>r2dbc-mysql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        响应式 Spring Data R2dbc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-r2dbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">r2dbc:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">r2dbc:mysql://localhost:3306/test</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h3 id="声明式接口r2dbcrepository"><a class="markdownIt-Anchor" href="#声明式接口r2dbcrepository"></a> 声明式接口：R2dbcRepository</h3><p>Repository接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthorRepositories</span> <span class="keyword">extends</span> <span class="title class_">R2dbcRepository</span>&lt;TAuthor,Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认继承了一堆CRUD方法； 像mybatis-plus</span></span><br><span class="line">    <span class="comment">//QBC： Query By Criteria</span></span><br><span class="line">    <span class="comment">//QBE： Query By Example</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//成为一个起名工程师  where id In () and name like ?</span></span><br><span class="line">    <span class="comment">//仅限单表复杂条件查询</span></span><br><span class="line">    Flux&lt;TAuthor&gt; <span class="title function_">findAllByIdInAndNameLike</span><span class="params">(Collection&lt;Long&gt; id, String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多表复杂查询</span></span><br><span class="line">    <span class="meta">@Query(&quot;select * from t_author&quot;)</span> <span class="comment">//自定义query注解，指定sql语句</span></span><br><span class="line">    Flux&lt;TAuthor&gt; <span class="title function_">findHaha</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1-1：关联</span></span><br><span class="line">    <span class="comment">// 1-N：关联</span></span><br><span class="line">    <span class="comment">//场景：</span></span><br><span class="line">    <span class="comment">// 1、一个图书有唯一作者； 1-1</span></span><br><span class="line">    <span class="comment">// 2、一个作者可以有很多图书： 1-N</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义Converter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.yuanyuan.r2dbc.config.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.yuanyuan.r2dbc.entity.TAuthor;</span><br><span class="line"><span class="keyword">import</span> blog.yuanyuan.r2dbc.entity.TBook;</span><br><span class="line"><span class="keyword">import</span> io.r2dbc.spi.Row;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.convert.ReadingConverter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ReadingConverter</span> <span class="comment">//读取数据库数据的时候,把row转成 TBook</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Row, TBook&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TBook <span class="title function_">convert</span><span class="params">(Row source)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(source == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//自定义结果集的封装</span></span><br><span class="line">        <span class="type">TBook</span> <span class="variable">tBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TBook</span>();</span><br><span class="line"></span><br><span class="line">        tBook.setId(source.get(<span class="string">&quot;id&quot;</span>, Long.class));</span><br><span class="line">        tBook.setTitle(source.get(<span class="string">&quot;title&quot;</span>, String.class));</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">author_id</span> <span class="operator">=</span> source.get(<span class="string">&quot;author_id&quot;</span>, Long.class);</span><br><span class="line">        tBook.setAuthorId(author_id);</span><br><span class="line">        <span class="comment">//        tBook.setPublishTime(source.get(&quot;publish_time&quot;, Instant.class));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TAuthor</span> <span class="variable">tAuthor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TAuthor</span>();</span><br><span class="line">        tAuthor.setId(author_id);</span><br><span class="line">        tAuthor.setName(source.get(<span class="string">&quot;name&quot;</span>, String.class));</span><br><span class="line"></span><br><span class="line">        tBook.setAuthor(tAuthor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableR2dbcRepositories</span> <span class="comment">//开启 R2dbc 仓库功能；jpa</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R2DbcConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//替换容器中原来的</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> R2dbcCustomConversions <span class="title function_">conversions</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把我们的转换器加入进去； 效果新增了我们的 Converter</span></span><br><span class="line">        <span class="keyword">return</span> R2dbcCustomConversions.of(MySqlDialect.INSTANCE,<span class="keyword">new</span> <span class="title class_">BookConverter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编程式组件"><a class="markdownIt-Anchor" href="#编程式组件"></a> 编程式组件</h3><ul><li>R2dbcEntityTemplate</li><li>DatabaseClient</li></ul><h2 id="rbac-sql练习"><a class="markdownIt-Anchor" href="#rbac-sql练习"></a> RBAC-SQL练习</h2><h3 id="1-1"><a class="markdownIt-Anchor" href="#1-1"></a> 1-1</h3><blockquote><p>自定义 Converter&lt;Row，Bean&gt; 方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    R2dbcCustomConversions <span class="title function_">r2dbcCustomConversions</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Converter&lt;?, ?&gt;&gt; converters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        converters.add(<span class="keyword">new</span> <span class="title class_">BookConverter</span>());</span><br><span class="line">        <span class="keyword">return</span> R2dbcCustomConversions.of(MySqlDialect.INSTANCE, converters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1-1： 结合自定义 Converter</span></span><br><span class="line">bookRepostory.hahaBook(<span class="number">1L</span>)</span><br><span class="line">        .subscribe(tBook -&gt; System.out.println(<span class="string">&quot;tBook = &quot;</span> + tBook));</span><br></pre></td></tr></table></figure><blockquote><p>编程式封装方式: 使用DatabaseClient</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1-1：第二种方式</span></span><br><span class="line">databaseClient.sql(<span class="string">&quot;select b.*,t.name as name from t_book b &quot;</span> +</span><br><span class="line">                <span class="string">&quot;LEFT JOIN t_author t on b.author_id = t.id &quot;</span> +</span><br><span class="line">                <span class="string">&quot;WHERE b.id = ?&quot;</span>)</span><br><span class="line">        .bind(<span class="number">0</span>, <span class="number">1L</span>)</span><br><span class="line">        .fetch()</span><br><span class="line">        .all()</span><br><span class="line">        .map(row-&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> row.get(<span class="string">&quot;id&quot;</span>).toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> row.get(<span class="string">&quot;title&quot;</span>).toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">author_id</span> <span class="operator">=</span> row.get(<span class="string">&quot;author_id&quot;</span>).toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> row.get(<span class="string">&quot;name&quot;</span>).toString();</span><br><span class="line">            <span class="type">TBook</span> <span class="variable">tBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TBook</span>();</span><br><span class="line"></span><br><span class="line">            tBook.setId(Long.parseLong(id));</span><br><span class="line">            tBook.setTitle(title);</span><br><span class="line"></span><br><span class="line">            <span class="type">TAuthor</span> <span class="variable">tAuthor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TAuthor</span>();</span><br><span class="line">            tAuthor.setName(name);</span><br><span class="line">            tAuthor.setId(Long.parseLong(author_id));</span><br><span class="line"></span><br><span class="line">            tBook.setAuthor(tAuthor);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> tBook;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(tBook -&gt; System.out.println(<span class="string">&quot;tBook = &quot;</span> + tBook));</span><br></pre></td></tr></table></figure><h3 id="1-n"><a class="markdownIt-Anchor" href="#1-n"></a> 1-N</h3><blockquote><p>使用底层API DatabaseClient</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">oneToN</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        databaseClient.sql(&quot;select a.id aid,a.name,b.* from t_author a  &quot; +</span></span><br><span class="line"><span class="comment">//                &quot;left join t_book b on a.id = b.author_id &quot; +</span></span><br><span class="line"><span class="comment">//                &quot;order by a.id&quot;)</span></span><br><span class="line"><span class="comment">//                .fetch()</span></span><br><span class="line"><span class="comment">//                .all(row -&gt; &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1~6</span></span><br><span class="line">        <span class="comment">// 1：false 2：false 3:false 4: true 8:true 5:false 6:false 7:false 8:true 9:false 10:false</span></span><br><span class="line">        <span class="comment">// [1,2,3]</span></span><br><span class="line">        <span class="comment">// [4,8]</span></span><br><span class="line">        <span class="comment">// [5,6,7]</span></span><br><span class="line">        <span class="comment">// [8]</span></span><br><span class="line">        <span class="comment">// [9,10]</span></span><br><span class="line">        <span class="comment">// bufferUntilChanged：</span></span><br><span class="line">        <span class="comment">// 如果下一个判定值比起上一个发生了变化就开一个新buffer保存，如果没有变化就保存到原buffer中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Flux.just(1,2,3,4,8,5,6,7,8,9,10)</span></span><br><span class="line"><span class="comment">//                .bufferUntilChanged(integer -&gt; integer%4==0 )</span></span><br><span class="line"><span class="comment">//                .subscribe(list-&gt; System.out.println(&quot;list = &quot; + list));</span></span><br><span class="line">        ; <span class="comment">//自带分组</span></span><br><span class="line"></span><br><span class="line">        Flux&lt;TAuthor&gt; flux = databaseClient.sql(<span class="string">&quot;select a.id aid,a.name,b.* from t_author a  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;left join t_book b on a.id = b.author_id &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;order by a.id&quot;</span>)</span><br><span class="line">                .fetch()</span><br><span class="line">                .all()</span><br><span class="line">                .bufferUntilChanged(rowMap -&gt; Long.parseLong(rowMap.get(<span class="string">&quot;aid&quot;</span>).toString()))</span><br><span class="line">                .map(list -&gt; &#123;</span><br><span class="line">                    <span class="type">TAuthor</span> <span class="variable">tAuthor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TAuthor</span>();</span><br><span class="line">                    Map&lt;String, Object&gt; map = list.get(<span class="number">0</span>);</span><br><span class="line">                    tAuthor.setId(Long.parseLong(map.get(<span class="string">&quot;aid&quot;</span>).toString()));</span><br><span class="line">                    tAuthor.setName(map.get(<span class="string">&quot;name&quot;</span>).toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//查到的所有图书</span></span><br><span class="line">                    List&lt;TBook&gt; tBooks = list.stream()</span><br><span class="line">                            .map(ele -&gt; &#123;</span><br><span class="line">                                <span class="type">TBook</span> <span class="variable">tBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TBook</span>();</span><br><span class="line"></span><br><span class="line">                                tBook.setId(Long.parseLong(ele.get(<span class="string">&quot;id&quot;</span>).toString()));</span><br><span class="line">                                tBook.setAuthorId(Long.parseLong(ele.get(<span class="string">&quot;author_id&quot;</span>).toString()));</span><br><span class="line">                                tBook.setTitle(ele.get(<span class="string">&quot;title&quot;</span>).toString());</span><br><span class="line">                                <span class="keyword">return</span> tBook;</span><br><span class="line">                            &#125;)</span><br><span class="line">                            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">                    tAuthor.setBooks(tBooks);</span><br><span class="line">                    <span class="keyword">return</span> tAuthor;</span><br><span class="line">                &#125;);<span class="comment">//Long 数字缓存 -127 - 127；// 对象比较需要自己写好equals方法</span></span><br><span class="line">        flux.subscribe(tAuthor -&gt; System.out.println(<span class="string">&quot;tAuthor = &quot;</span> + tAuthor));</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a class="markdownIt-Anchor" href="#最佳实践"></a> 最佳实践</h2><blockquote><p>最佳实践：  提升生产效率的做法</p><ul><li><p>1、Spring Data R2DBC，基础的CRUD用 <strong>R2dbcRepository</strong> 提供好了</p></li><li><p>2、自定义复杂的SQL（<strong>单表</strong>）： <strong>@Query</strong>；</p></li><li><p>3、<strong>多表查询复杂结果集</strong>： <strong>DatabaseClient</strong> 自定义SQL及结果封装；</p></li><li><ul><li><strong>@Query + 自定义 Converter 实现结果封装</strong></li></ul></li></ul><p><strong>经验：</strong></p><ul><li><p><strong>1-1:1-N 关联关系的封装都需要自定义结果集的方式</strong></p></li><li><ul><li><strong>Spring Data R2DBC：</strong></li></ul></li><li><ul><li><ul><li><strong>自定义Converter指定结果封装</strong></li><li><strong>DatabaseClient：贴近底层的操作进行封装; 见下面代码</strong></li></ul></li></ul></li><li><ul><li><strong>MyBatis：  自定义 ResultMap 标签去来封装</strong></li></ul></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">databaseClient.sql(<span class="string">&quot;select b.*,t.name as name from t_book b &quot;</span> +</span><br><span class="line">                <span class="string">&quot;LEFT JOIN t_author t on b.author_id = t.id &quot;</span> +</span><br><span class="line">                <span class="string">&quot;WHERE b.id = ?&quot;</span>)</span><br><span class="line">        .bind(<span class="number">0</span>, <span class="number">1L</span>)</span><br><span class="line">        .fetch()</span><br><span class="line">        .all()</span><br><span class="line">        .map(row-&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> row.get(<span class="string">&quot;id&quot;</span>).toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> row.get(<span class="string">&quot;title&quot;</span>).toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">author_id</span> <span class="operator">=</span> row.get(<span class="string">&quot;author_id&quot;</span>).toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> row.get(<span class="string">&quot;name&quot;</span>).toString();</span><br><span class="line">            <span class="type">TBook</span> <span class="variable">tBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TBook</span>();</span><br><span class="line"></span><br><span class="line">            tBook.setId(Long.parseLong(id));</span><br><span class="line">            tBook.setTitle(title);</span><br><span class="line"></span><br><span class="line">            <span class="type">TAuthor</span> <span class="variable">tAuthor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TAuthor</span>();</span><br><span class="line">            tAuthor.setName(name);</span><br><span class="line">            tAuthor.setId(Long.parseLong(author_id));</span><br><span class="line"></span><br><span class="line">            tBook.setAuthor(tAuthor);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> tBook;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(tBook -&gt; System.out.println(<span class="string">&quot;tBook = &quot;</span> + tBook));</span><br></pre></td></tr></table></figure><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h2><p>RBAC SQL文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_user`;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_user`(</span><br><span class="line">                           `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">                           `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">                           `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">                           `email` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">                           `phone` <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;电话&#x27;</span>,</span><br><span class="line">                           `create_time` datetime(<span class="number">0</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">                           `update_time` datetime(<span class="number">0</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">                           <span class="keyword">PRIMARY KEY</span> (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB  <span class="keyword">CHARACTER SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 角色表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_roles`;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_roles`(</span><br><span class="line">                            `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">                            `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;角色名&#x27;</span>,</span><br><span class="line">                            `<span class="keyword">value</span>` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;角色的英文名&#x27;</span>,</span><br><span class="line">                            `create_time` datetime(<span class="number">0</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                            `update_time` datetime(<span class="number">0</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                            <span class="keyword">PRIMARY KEY</span> (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB  <span class="keyword">CHARACTER SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限表（资源表）</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_perm`;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_perm`(</span><br><span class="line">                               `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">                               `<span class="keyword">value</span>` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;权限字段&#x27;</span>,</span><br><span class="line">                               `uri` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;资源路径&#x27;</span>,</span><br><span class="line">                               `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;资源描述&#x27;</span>,</span><br><span class="line">                               `create_time` datetime(<span class="number">0</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                               `update_time` datetime(<span class="number">0</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                               <span class="keyword">PRIMARY KEY</span> (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB  <span class="keyword">CHARACTER SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户角色关系表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_user_role`;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_user_role`(</span><br><span class="line">                                `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">                                `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                                `role_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                                `create_time` datetime(<span class="number">0</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                                `update_time` datetime(<span class="number">0</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                                <span class="keyword">PRIMARY KEY</span> (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB  <span class="keyword">CHARACTER SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 角色权限关系表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_role_perm`;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_role_perm`(</span><br><span class="line">                                    `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">                                    `role_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                                    `perm_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                                    `create_time` datetime(<span class="number">0</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                                    `update_time` datetime(<span class="number">0</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                                    <span class="keyword">PRIMARY KEY</span> (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="keyword">CHARACTER SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 图书&amp;作者表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_book`(</span><br><span class="line">                              `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">                              `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                              `author_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                              `publish_time` datetime(<span class="number">0</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                              <span class="keyword">PRIMARY KEY</span> (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="keyword">CHARACTER SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_author`(</span><br><span class="line">                         `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">                         `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">                         <span class="keyword">PRIMARY KEY</span> (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="keyword">CHARACTER SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Web、网络、IO（存储）、中间件（Redis、MySQL）&lt;/p&gt;
&lt;p&gt;应用开发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储&lt;/strong&gt;：MySQL、Redis&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web&lt;/strong&gt;：Webflu</summary>
      
    
    
    
    <category term="编程进阶" scheme="https://www.yuanyuan.blog/categories/%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="Java" scheme="https://www.yuanyuan.blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java响应式编程-2.Spring Webflux</title>
    <link href="https://www.yuanyuan.blog/posts/1b14e6c4.html"/>
    <id>https://www.yuanyuan.blog/posts/1b14e6c4.html</id>
    <published>2025-02-08T18:29:50.000Z</published>
    <updated>2025-02-22T12:17:28.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-webflux"><a class="markdownIt-Anchor" href="#spring-webflux"></a> Spring Webflux</h1><ul><li><strong>Reactor核心</strong>：<strong>HttpHandler</strong> 原生API</li><li><strong>DispatcherHandler</strong> 原理</li><li><ul><li>DispatcherHandler 组件分析</li><li>DispatcherHandler 请求处理流程</li><li>返回结果处理</li><li>异常处理</li><li>视图解析</li></ul></li><li><ul><li><ul><li>重定向</li><li>Rendering</li></ul></li></ul></li><li><strong>注解式 - Controller</strong></li><li><ul><li>兼容老版本方式</li><li><strong>新版本变化</strong></li></ul></li><li><ul><li><ul><li><strong>SSE</strong></li><li><strong>文件上传</strong></li></ul></li></ul></li><li><strong>错误响应</strong></li><li><ul><li>@ExceptionHandler</li></ul></li><li><ul><li><ul><li>ErrorResponse： 自定义 错误响应</li><li>ProblemDetail：自定义PD返回</li></ul></li></ul></li><li><strong>WebFlux配置</strong></li><li><ul><li>@EnableWebFlux</li><li>WebFluxConfigurer</li></ul></li></ul><p>WebFlux：底层完全基于netty+reactor+springweb 完成一个全异步非阻塞的web<strong>响应式框架</strong></p><p><strong>底层：异步 + 消息队列(内存) + 事件回调机制 = 整套系统</strong></p><p><strong>优点：能使用少量资源处理大量请求；</strong></p><h2 id="组件对比"><a class="markdownIt-Anchor" href="#组件对比"></a> 组件对比</h2><table><thead><tr><th>API功能</th><th>Servlet-阻塞式Web</th><th>WebFlux-响应式Web</th></tr></thead><tbody><tr><td>前端控制器</td><td>DispatcherServlet</td><td>DispatcherHandler</td></tr><tr><td>处理器</td><td>Controller</td><td>WebHandler/Controller</td></tr><tr><td>请求、响应</td><td><strong>ServletRequest</strong>、<strong>ServletResponse</strong></td><td><strong>ServerWebExchange</strong>：<strong>ServerHttpRequest、ServerHttpResponse</strong></td></tr><tr><td>过滤器</td><td>Filter（HttpFilter）</td><td>WebFilter</td></tr><tr><td>异常处理器</td><td>HandlerExceptionResolver</td><td>DispatchExceptionHandler</td></tr><tr><td>Web配置</td><td>@EnableWebMvc</td><td>@EnableWebFlux</td></tr><tr><td>自定义配置</td><td>WebMvcConfigurer</td><td>WebFluxConfigurer</td></tr><tr><td>返回结果</td><td>任意</td><td><strong>Mono、Flux</strong>、任意</td></tr><tr><td>发送REST请求</td><td>RestTemplate</td><td>WebClient</td></tr></tbody></table><p><strong>Mono： 返回0|1 数据流</strong></p><p><strong>Flux：返回N数据流</strong></p><h2 id="webflux"><a class="markdownIt-Anchor" href="#webflux"></a> WebFlux</h2><blockquote><p>底层基于Netty实现的Web容器与请求/响应处理机制</p><p>参照：<a href="https://docs.spring.io/spring-framework/reference/6.0/web/webflux.html">https://docs.spring.io/spring-framework/reference/6.0/web/webflux.html</a></p></blockquote><h3 id="引入"><a class="markdownIt-Anchor" href="#引入"></a> 引入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Context 响应式上下文数据传递； 由下游传播给上游；</strong></p><p><strong>以前： 浏览器 --&gt; Controller --&gt; Service --&gt; Dao： 阻塞式编程</strong></p><p><strong>现在： Dao（数据源查询对象【数据发布者】） --&gt; Service --&gt; Controller --&gt; 浏览器： 响应式</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大数据流程： 从一个数据源拿到大量数据进行分析计算；</span></span><br><span class="line">ProductVistorDao.loadData()</span><br><span class="line">    .distinct()</span><br><span class="line">    .map()</span><br><span class="line">    .filter()</span><br><span class="line">    .handle()</span><br><span class="line">.subscribe();</span><br><span class="line"><span class="comment">//加载最新的商品浏览数据</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/DeWatermark.ai_1739011038860.png" alt="DeWatermark.ai_1739011038860" /></p><h3 id="reactor-core"><a class="markdownIt-Anchor" href="#reactor-core"></a> Reactor Core</h3><h4 id="httphandler-httpserver"><a class="markdownIt-Anchor" href="#httphandler-httpserver"></a> HttpHandler、HttpServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//快速自己编写一个能处理请求的服务器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、创建一个能处理Http请求的处理器。 参数：请求、响应； 返回值：Mono&lt;Void&gt;：代表处理完成的信号</span></span><br><span class="line">        <span class="type">HttpHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (ServerHttpRequest request,</span><br><span class="line">                                   ServerHttpResponse response)-&gt;&#123;</span><br><span class="line">            <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> request.getURI();</span><br><span class="line">            System.out.println(Thread.currentThread()+<span class="string">&quot;请求进来：&quot;</span>+uri);</span><br><span class="line">            <span class="comment">//编写请求处理的业务,给浏览器写一个内容 URL + &quot;Hello~!&quot;</span></span><br><span class="line"><span class="comment">//            response.getHeaders(); //获取响应头</span></span><br><span class="line"><span class="comment">//            response.getCookies(); //获取Cookie</span></span><br><span class="line"><span class="comment">//            response.getStatusCode(); //获取响应状态码；</span></span><br><span class="line"><span class="comment">//            response.bufferFactory(); //buffer工厂</span></span><br><span class="line"><span class="comment">//            response.writeWith() //把xxx写出去</span></span><br><span class="line"><span class="comment">//            response.setComplete(); //响应结束</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//数据的发布者：Mono&lt;DataBuffer&gt;、Flux&lt;DataBuffer&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建 响应数据的 DataBuffer</span></span><br><span class="line">            <span class="type">DataBufferFactory</span> <span class="variable">factory</span> <span class="operator">=</span> response.bufferFactory();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//数据Buffer</span></span><br><span class="line">            <span class="type">DataBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> factory.wrap(<span class="keyword">new</span> <span class="title class_">String</span>(uri.toString() + <span class="string">&quot; ==&gt; Hello!&quot;</span>).getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 需要一个 DataBuffer 的发布者</span></span><br><span class="line">            <span class="keyword">return</span> response.writeWith(Mono.just(buffer));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、启动一个服务器，监听8080端口，接受数据，拿到数据交给 HttpHandler 进行请求处理</span></span><br><span class="line">        <span class="type">ReactorHttpHandlerAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReactorHttpHandlerAdapter</span>(handler);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、启动Netty服务器</span></span><br><span class="line">        HttpServer.create()</span><br><span class="line">                .host(<span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">                .port(<span class="number">8080</span>)</span><br><span class="line">                .handle(adapter) <span class="comment">//用指定的处理器处理请求</span></span><br><span class="line">                .bindNow(); <span class="comment">//现在就绑定</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动完成....监听8080，接受请求&quot;</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器停止....&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="dispatcherhandler"><a class="markdownIt-Anchor" href="#dispatcherhandler"></a> DispatcherHandler</h3><blockquote><p>SpringMVC： DispatcherServlet</p><p>SpringWebFlux： DispatcherHandler</p></blockquote><ol><li><strong>请求处理流程</strong></li></ol><ul><li>HandlerMapping：<strong>请求映射处理器</strong>； 保存每个请求由哪个方法进行处理</li><li>HandlerAdapter：<strong>处理器适配器</strong>；反射执行目标方法</li><li>HandlerResultHandler：<strong>处理器结果</strong>处理器；</li></ul><p>SpringMVC： DispatcherServlet 有一个 doDispatch() 方法，来处理所有请求；</p><p>WebFlux： DispatcherHandler 有一个 handle() 方法，来处理所有请求；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">handle</span><span class="params">(ServerWebExchange exchange)</span> &#123; </span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> createNotFoundError();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (CorsUtils.isPreFlightRequest(exchange.getRequest())) &#123;</span><br><span class="line"><span class="keyword">return</span> handlePreFlight(exchange);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Flux.fromIterable(<span class="built_in">this</span>.handlerMappings) <span class="comment">//拿到所有的 handlerMappings</span></span><br><span class="line">.concatMap(mapping -&gt; mapping.getHandler(exchange)) <span class="comment">//找每一个mapping看谁能处理请求</span></span><br><span class="line">.next() <span class="comment">//直接触发获取元素； 拿到流的第一个元素； 找到第一个能处理这个请求的handlerAdapter</span></span><br><span class="line">.switchIfEmpty(createNotFoundError()) <span class="comment">//如果没拿到这个元素，则响应404错误；</span></span><br><span class="line">.onErrorResume(ex -&gt; handleDispatchError(exchange, ex)) <span class="comment">//异常处理，一旦前面发生异常，调用处理异常</span></span><br><span class="line">.flatMap(handler -&gt; handleRequestWith(exchange, handler)); <span class="comment">//调用方法处理请求，得到响应结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>请求和响应都封装在 ServerWebExchange 对象中，由handle方法进行处理</li><li>如果没有任何的请求映射器； 直接返回一个： 创建一个未找到的错误； 404； 返回Mono.error；终结流</li><li>跨域工具，是否跨域请求，跨域请求检查是否复杂跨域，需要预检请求；</li><li>Flux流式操作，先找到HandlerMapping，再获取handlerAdapter，再用Adapter处理请求，期间的错误由onErrorResume触发回调进行处理；</li></ol><p>源码中的核心两个：</p><ul><li><strong>handleRequestWith</strong>： 编写了handlerAdapter怎么处理请求</li><li><strong>handleResult</strong>： String、User、ServerSendEvent、Mono、Flux …</li></ul><p>concatMap： 先挨个元素变，然后把变的结果按照之前元素的顺序拼接成一个完整流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;R&gt; Mono&lt;R&gt; <span class="title function_">createNotFoundError</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Exception</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseStatusException</span>(HttpStatus.NOT_FOUND);</span><br><span class="line"><span class="keyword">return</span> Mono.error(ex);</span><br><span class="line">&#125;</span><br><span class="line">Mono.defer(() -&gt; &#123;</span><br><span class="line"><span class="type">Exception</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseStatusException</span>(HttpStatus.NOT_FOUND);</span><br><span class="line"><span class="keyword">return</span> Mono.error(ex);</span><br><span class="line">&#125;); <span class="comment">//有订阅者，且流被激活后就动态调用这个方法； 延迟加载；</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注解开发"><a class="markdownIt-Anchor" href="#注解开发"></a> 注解开发</h3><h4 id="目标方法传参"><a class="markdownIt-Anchor" href="#目标方法传参"></a> 目标方法传参</h4><p><a href="https://docs.spring.io/spring-framework/reference/6.0/web/webflux/controller/ann-methods/arguments.html">https://docs.spring.io/spring-framework/reference/6.0/web/webflux/controller/ann-methods/arguments.html</a></p><table><thead><tr><th>Controller method argument</th><th>Description</th></tr></thead><tbody><tr><td><strong>ServerWebExchange</strong></td><td>封装了请求和响应对象的对象; 自定义获取数据、自定义响应</td></tr><tr><td><strong>ServerHttpRequest, ServerHttpResponse</strong></td><td>请求、响应</td></tr><tr><td><strong>WebSession</strong></td><td>访问Session对象</td></tr><tr><td><code>java.security.Principal</code></td><td></td></tr><tr><td><code>org.springframework.http.HttpMethod</code></td><td>请求方式</td></tr><tr><td><code>java.util.Locale</code></td><td>国际化</td></tr><tr><td><code>java.util.TimeZone + java.time.ZoneId</code></td><td>时区</td></tr><tr><td><code>@PathVariable</code></td><td>路径变量</td></tr><tr><td><code>@MatrixVariable</code></td><td>矩阵变量</td></tr><tr><td><code>@RequestParam</code></td><td>请求参数</td></tr><tr><td><code>@RequestHeader</code></td><td>请求头；</td></tr><tr><td><code>@CookieValue</code></td><td>获取Cookie</td></tr><tr><td><code>@RequestBody</code></td><td>获取请求体，Post、文件上传</td></tr><tr><td><code>HttpEntity&lt;B&gt;</code></td><td>封装后的请求对象</td></tr><tr><td><code>@RequestPart</code></td><td>获取文件上传的数据 multipart/form-data</td></tr><tr><td><code>java.util.Map, org.springframework.ui.Model, and org.springframework.ui.ModelMap.</code></td><td>Map、Model、ModelMap</td></tr><tr><td><code>@ModelAttribute</code></td><td></td></tr><tr><td><code>Errors, BindingResult</code></td><td>数据校验，封装错误</td></tr><tr><td><code>SessionStatus + class-level @SessionAttributes</code></td><td></td></tr><tr><td><code>UriComponentsBuilder</code></td><td>For preparing a URL relative to the current request’s host, port, scheme, and context path. See <a href="https://docs.spring.io/spring-framework/reference/6.0/web/webflux/uri-building.html">URI Links</a>.</td></tr><tr><td><code>@SessionAttribute</code></td><td></td></tr><tr><td><code>@RequestAttribute</code></td><td>转发请求的请求域数据</td></tr><tr><td>Any other argument</td><td>所有对象都能作为参数：1、基本类型 ，等于标注@RequestParam 2、对象类型，等于标注 @ModelAttribute</td></tr></tbody></table><h3 id="返回值写法"><a class="markdownIt-Anchor" href="#返回值写法"></a> 返回值写法</h3><p>sse和websocket区别：</p><ul><li>SSE：单工；请求过去以后，等待服务端源源不断的数据</li><li>websocket：双工： 连接建立后，可以任何交互</li></ul><table><thead><tr><th>Controller method return value</th><th>Description</th></tr></thead><tbody><tr><td><code>@ResponseBody</code></td><td>把响应数据写出去，如果是对象，可以自动转为json</td></tr><tr><td><code>HttpEntity&lt;B&gt;, ResponseEntity&lt;B&gt;</code></td><td>ResponseEntity：支持快捷自定义响应内容</td></tr><tr><td><code>HttpHeaders</code></td><td>没有响应内容，只有响应头</td></tr><tr><td><code>ErrorResponse</code></td><td>快速构建错误响应</td></tr><tr><td><code>ProblemDetail</code></td><td>SpringBoot3</td></tr><tr><td><code>String</code></td><td>就是和以前的使用规则一样；forward: 转发到一个地址redirect: 重定向到一个地址配合模板引擎</td></tr><tr><td><code>View</code></td><td>直接返回视图对象</td></tr><tr><td><code>java.util.Map, org.springframework.ui.Model</code></td><td>以前一样</td></tr><tr><td><code>@ModelAttribute</code></td><td>以前一样</td></tr><tr><td><strong>Rendering</strong></td><td>新版的页面跳转API； 不能标注 @ResponseBody 注解</td></tr><tr><td><code>void</code></td><td>仅代表响应完成信号</td></tr><tr><td><code>Flux&lt;ServerSentEvent&gt;, Observable&lt;ServerSentEvent&gt;, or other reactive type</code></td><td>使用  text/event-stream 完成SSE效果</td></tr><tr><td>Other return values</td><td>未在上述列表的其他返回值，都会当成给页面的数据</td></tr></tbody></table><h3 id="文件上传"><a class="markdownIt-Anchor" href="#文件上传"></a> 文件上传</h3><p><a href="https://docs.spring.io/spring-framework/reference/6.0/web/webflux/controller/ann-methods/multipart-forms.html">https://docs.spring.io/spring-framework/reference/6.0/web/webflux/controller/ann-methods/multipart-forms.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MultipartFile file;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/form&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handleFormUpload</span><span class="params">(MyForm form, BindingResult errors)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handle</span><span class="params">(<span class="meta">@RequestPart(&quot;meta-data&quot;)</span> Part metadata, </span></span><br><span class="line"><span class="params"><span class="meta">@RequestPart(&quot;file-data&quot;)</span> FilePart file)</span> &#123; </span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a class="markdownIt-Anchor" href="#错误处理"></a> 错误处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">error</span><span class="params">(ArithmeticException exception)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发生了数学运算异常&quot;</span>+exception);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回这些进行错误处理；</span></span><br><span class="line"><span class="comment">//        ProblemDetail：  建造者：声明式编程、链式调用</span></span><br><span class="line"><span class="comment">//        ErrorResponse ： </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;炸了，哈哈...&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="requestcontext"><a class="markdownIt-Anchor" href="#requestcontext"></a> RequestContext</h3><h3 id="自定义flux配置"><a class="markdownIt-Anchor" href="#自定义flux配置"></a> 自定义Flux配置</h3><p>WebFluxConfigurer</p><blockquote><p>容器中注入这个类型的组件，重写底层逻辑</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置底层</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebFluxConfigurer <span class="title function_">webFluxConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebFluxConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">                registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                        .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                        .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                        .allowedOrigins(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> Filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请求处理放行到目标方法之前...&quot;</span>);</span><br><span class="line">        Mono&lt;Void&gt; filter = chain.filter(exchange); <span class="comment">//放行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//流一旦经过某个操作就会变成新流</span></span><br><span class="line"></span><br><span class="line">        Mono&lt;Void&gt; voidMono = filter.doOnError(err -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;目标方法异常以后...&quot;</span>);</span><br><span class="line">                &#125;) <span class="comment">// 目标方法发生异常后做事</span></span><br><span class="line">                .doFinally(signalType -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;目标方法执行以后...&quot;</span>);</span><br><span class="line">                &#125;);<span class="comment">// 目标方法执行之后</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面执行不花时间。</span></span><br><span class="line">        <span class="keyword">return</span> voidMono; <span class="comment">//看清楚返回的是谁！！！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring-webflux&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#spring-webflux&quot;&gt;&lt;/a&gt; Spring Webflux&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reactor核心&lt;/strong&gt;：&lt;st</summary>
      
    
    
    
    <category term="编程进阶" scheme="https://www.yuanyuan.blog/categories/%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="Java" scheme="https://www.yuanyuan.blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>GLA轻量级日志系统</title>
    <link href="https://www.yuanyuan.blog/posts/d0ed3884.html"/>
    <id>https://www.yuanyuan.blog/posts/d0ed3884.html</id>
    <published>2025-01-11T12:12:08.000Z</published>
    <updated>2025-02-22T12:17:28.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="轻量级日志系统-loki"><a class="markdownIt-Anchor" href="#轻量级日志系统-loki"></a> 轻量级日志系统-Loki</h2><h2 id="日志系统"><a class="markdownIt-Anchor" href="#日志系统"></a> 日志系统</h2><p>常见日志系统：</p><ul><li><p>GLA</p></li><li><p>ELK</p></li><li><p>数仓</p></li></ul><p>日志处理流程：采集 ==&gt; 存储 ==&gt; 检索 ==&gt; 可视化</p><h2 id="loki"><a class="markdownIt-Anchor" href="#loki"></a> Loki</h2><h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3><p>Loki 是一个可水平扩展、高可用性、多租户日志聚合系统，其灵感来自 Prometheus。Loki 与 Prometheus 的不同之处在于，它专注于日志而不是指标，并通过推送而不是拉取来收集日志。</p><p>Loki 的设计非常经济高效，并且具有高度可扩展性。与其他日志系统不同，<strong>Loki 不会对日志内容进行索引，而只会对日志的元数据进行索引</strong>，将其作为每个日志流的一组标签。</p><p>日志流是一组共享相同标签的日志。标签帮助Loki在您的数据存储中找到日志流，因此拥有一组高质量的标签是高效查询执行的关键。</p><p>然后，日志数据被压缩并以块的形式存储在对象存储中，如亚马逊简单存储服务（S3）或谷歌云存储（GCS），甚至为了开发或概念验证，存储在文件系统上。小索引和高度压缩的块简化了操作，显著降低了Loki的成本。</p><h3 id="日志结构"><a class="markdownIt-Anchor" href="#日志结构"></a> 日志结构</h3><ul><li>Loki数据存储格式<ul><li>index：索引；存储Loki标签，如日志级别、来源、分组</li><li>chunk：块；存储日志条目本身</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20250111160127963.png" alt="image-20250111160127963" /></p><h3 id="架构"><a class="markdownIt-Anchor" href="#架构"></a> 架构</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20250111160220319.png" alt="image-20250111160220319" /></p><p><strong>Agent：</strong></p><ul><li>代理或客户端，例如Grafana Alloy或Promtail，随Loki一起分发。代理抓取日志，通过添加标签将日志转换为流，并通过HTTP API将流<strong>推送到Loki</strong>。</li></ul><p><strong>Loki主服务器：</strong></p><ul><li>负责摄取和存储日志以及处理查询。它可以部署在三种不同的配置中，有关更多信息，请参阅部署模式。</li></ul><p><strong>Grafana：</strong></p><ul><li>用于查询和显示日志数据。您还可以使用LogCLI或直接使用Loki API从命令行查询日志。</li></ul><h3 id="快速入门"><a class="markdownIt-Anchor" href="#快速入门"></a> 快速入门</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20250111160316610.png" alt="image-20250111160316610" /></p><p>用 Docker Compose 部署以上服务，快速体验Loki生态：</p><ul><li><strong>flog：</strong> 生成日志行。flog是常见日志格式的日志生成器。</li><li><strong>Grafana Alloy：</strong> 它从flog上抓取日志线，并通过网关将它们推送到Loki。</li><li><strong>网关（nginx）：</strong> 接收请求并根据请求的URL将它们重定向到适当的容器。</li><li><strong>Loki read组件：</strong> 它运行一个查询前端和一个查询器。</li><li><strong>Loki write组件：</strong> 它运行一个分发器和一个Ingester。</li><li><strong>Loki 后端组件：</strong> 它运行索引网关、压缩器、标尺、Bloom压缩器（实验）和Bloom网关（实验）。</li><li><strong>Minio：</strong> Loki用来存储其索引和块。</li></ul><h3 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20250111160406475.png" alt="image-20250111160406475" /></p><h4 id="写流程"><a class="markdownIt-Anchor" href="#写流程"></a> 写流程</h4><ol><li>distributor 接收带有流和日志行的HTTP POST请求。</li><li>distributor 会 hash 计算请求中包含的每个流，决定发给 一致性 hash 环 中的哪个 ingester</li><li>distributor 把每个流 发给合适处理它的 ingester 和其副本</li><li>ingester 接收带有日志行的流，并为流的数据创建一个块或附加到现有块。每个租户和每个标签集，块都是唯一的</li><li>ingester 回复写操作结果</li><li>distributor 等待大多数 ingester 确认写入完成。</li><li>distributor 在收到至少法定数量的确认写入时响应成功（2xx状态码）。或者在写入操作失败时响应错误（4xx或5xx状态码）。</li></ol><h4 id="读流程"><a class="markdownIt-Anchor" href="#读流程"></a> 读流程</h4><ol><li>查询前端（query frontend） 接受到 携带 LogQL 的 HTTP GET 请求</li><li>查询前端 将查询拆分为子查询并将它们传递给查询调度程序（query scheduler）。</li><li>querier （查询器）从调度程序（scheduler）中提取子查询。</li><li>querier 将查询传递给 所有保存数据的 ingester。</li><li>ingester 返回与查询匹配的 记忆数据（如果有）。</li><li>如果 ingester 没有返回或返回的数据不足，querier 会延迟从后备存储加载数据并对其运行查询。</li><li>querier 遍历所有接收到的数据并进行重复数据删除，将子查询的结果返回到查询前端。</li><li>查询前端 等待 查询的所有子查询完成 并由 querier 返回。</li><li>查询前端将两个结果合并为最终结果并将其返回给客户端。</li></ol><h2 id="alloy"><a class="markdownIt-Anchor" href="#alloy"></a> Alloy</h2><div class='tag-link-1'><a class="tag-Link" target="_blank" href="https://grafana.com/docs/alloy/latest/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url('https://t3.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=https://grafana.com/docs/alloy/latest/&size=60'); border-radius: 50%; width: 60px; height: 60px;"></div>        <div class="tag-link-right">            <div class="tag-link-title">Alloy官网</div>            <div class="tag-link-sitename">https://grafana.com/docs/alloy/latest/</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><h3 id="架构-2"><a class="markdownIt-Anchor" href="#架构-2"></a> 架构</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20250111160617804.png" alt="image-20250111160617804" /></p><p>Grafana Alloy是一个多功能的可观测性收集器，可以摄取各种格式的日志并将其发送到Loki。我们推荐Alloy作为向Loki发送日志的主要方法，因为它为构建高度可扩展和可靠的可观测性流水线提供了更强大和特征丰富的解决方案。</p><h3 id="组件"><a class="markdownIt-Anchor" href="#组件"></a> 组件</h3><table><thead><tr><th><strong>Type</strong></th><th><strong>Component</strong></th></tr></thead><tbody><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.api/">loki.source.api</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.awsfirehose/">loki.source.awsfirehose</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.azure_event_hubs/">loki.source.azure_event_hubs</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.cloudflare/">loki.source.cloudflare</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.docker/">loki.source.docker</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.file/">loki.source.file</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.gcplog/">loki.source.gcplog</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.gelf/">loki.source.gelf</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.heroku/">loki.source.heroku</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.journal/">loki.source.journal</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.kafka/">loki.source.kafka</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.kubernetes/">loki.source.kubernetes</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.kubernetes_events/">loki.source.kubernetes_events</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.podlogs/">loki.source.podlogs</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.syslog/">loki.source.syslog</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.source.windowsevent/">loki.source.windowsevent</a></td></tr><tr><td>Collector</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/otelcol.receiver.loki/">otelcol.receiver.loki</a></td></tr><tr><td>Transformer</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.relabel/">loki.relabel</a></td></tr><tr><td>Transformer</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.process/">loki.process</a></td></tr><tr><td>Writer</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/loki.write/">loki.write</a></td></tr><tr><td>Writer</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/otelcol.exporter.loki/">otelcol.exporter.loki</a></td></tr><tr><td>Writer</td><td><a href="https://grafana.com/docs/alloy/latest/reference/components/otelcol.exporter.logging/">otelcol.exporter.logging</a></td></tr></tbody></table><h2 id="实践"><a class="markdownIt-Anchor" href="#实践"></a> 实践</h2><h3 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、准备目录</span></span><br><span class="line">mkdir evaluate-loki</span><br><span class="line">cd evaluate-loki</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载默认配置文件</span></span><br><span class="line">wget https://raw.githubusercontent.com/grafana/loki/main/examples/getting-started/loki-config.yaml -O loki-config.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/grafana/loki/main/examples/getting-started/alloy-local-config.yaml -O alloy-local-config.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/grafana/loki/main/examples/getting-started/docker-compose.yaml -O docker-compose.yaml</span><br></pre></td></tr></table></figure><div class="tip warning"><p>配置文件下载不下来，可以复制如下，不一定是最新的</p></div><h4 id="loki-configyaml"><a class="markdownIt-Anchor" href="#loki-configyaml"></a> loki-config.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_address:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">memberlist:</span></span><br><span class="line">  <span class="attr">join_members:</span> [<span class="string">&quot;read&quot;</span>, <span class="string">&quot;write&quot;</span>, <span class="string">&quot;backend&quot;</span>]</span><br><span class="line">  <span class="attr">dead_node_reclaim_time:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">gossip_to_dead_nodes_time:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">left_ingesters_timeout:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">bind_addr:</span> [<span class="string">&#x27;0.0.0.0&#x27;</span>]</span><br><span class="line">  <span class="attr">bind_port:</span> <span class="number">7946</span></span><br><span class="line">  <span class="attr">gossip_interval:</span> <span class="string">2s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2023-01-01</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">tsdb</span></span><br><span class="line">      <span class="attr">object_store:</span> <span class="string">s3</span></span><br><span class="line">      <span class="attr">schema:</span> <span class="string">v13</span></span><br><span class="line">      <span class="attr">index:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">        <span class="attr">period:</span> <span class="string">24h</span></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">path_prefix:</span> <span class="string">/loki</span></span><br><span class="line">  <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">compactor_address:</span> <span class="string">http://backend:3100</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">s3:</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">minio:9000</span></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">bucketnames:</span> <span class="string">loki-data</span></span><br><span class="line">      <span class="attr">access_key_id:</span> <span class="string">loki</span></span><br><span class="line">      <span class="attr">secret_access_key:</span> <span class="string">supersecret</span></span><br><span class="line">      <span class="attr">s3forcepathstyle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ring:</span></span><br><span class="line">    <span class="attr">kvstore:</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">memberlist</span></span><br><span class="line"><span class="attr">ruler:</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">s3:</span></span><br><span class="line">      <span class="attr">bucketnames:</span> <span class="string">loki-ruler</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compactor:</span></span><br><span class="line">  <span class="attr">working_directory:</span> <span class="string">/tmp/compactor</span></span><br></pre></td></tr></table></figure><h4 id="alloy-local-configyaml"><a class="markdownIt-Anchor" href="#alloy-local-configyaml"></a> alloy-local-config.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">discovery.docker</span> <span class="string">&quot;flog_scrape&quot;</span> &#123;</span><br><span class="line"><span class="string">host</span>             <span class="string">=</span> <span class="string">&quot;unix:///var/run/docker.sock&quot;</span></span><br><span class="line"><span class="string">refresh_interval</span> <span class="string">=</span> <span class="string">&quot;5s&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">discovery.relabel</span> <span class="string">&quot;flog_scrape&quot;</span> &#123;</span><br><span class="line"><span class="string">targets</span> <span class="string">=</span> []</span><br><span class="line"></span><br><span class="line"><span class="string">rule</span> &#123;</span><br><span class="line"><span class="string">source_labels</span> <span class="string">=</span> [<span class="string">&quot;__meta_docker_container_name&quot;</span>]</span><br><span class="line"><span class="string">regex</span>         <span class="string">=</span> <span class="string">&quot;/(.*)&quot;</span></span><br><span class="line"><span class="string">target_label</span>  <span class="string">=</span> <span class="string">&quot;container&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">loki.source.docker</span> <span class="string">&quot;flog_scrape&quot;</span> &#123;</span><br><span class="line"><span class="string">host</span>             <span class="string">=</span> <span class="string">&quot;unix:///var/run/docker.sock&quot;</span></span><br><span class="line"><span class="string">targets</span>          <span class="string">=</span> <span class="string">discovery.docker.flog_scrape.targets</span></span><br><span class="line"><span class="string">forward_to</span>       <span class="string">=</span> [<span class="string">loki.write.default.receiver</span>]</span><br><span class="line"><span class="string">relabel_rules</span>    <span class="string">=</span> <span class="string">discovery.relabel.flog_scrape.rules</span></span><br><span class="line"><span class="string">refresh_interval</span> <span class="string">=</span> <span class="string">&quot;5s&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">loki.write</span> <span class="string">&quot;default&quot;</span> &#123;</span><br><span class="line"><span class="string">endpoint</span> &#123;</span><br><span class="line"><span class="string">url</span>       <span class="string">=</span> <span class="string">&quot;http://gateway:3100/loki/api/v1/push&quot;</span></span><br><span class="line"><span class="string">tenant_id</span> <span class="string">=</span> <span class="string">&quot;tenant1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">external_labels</span> <span class="string">=</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="docker-composeyaml"><a class="markdownIt-Anchor" href="#docker-composeyaml"></a> docker-compose.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">read:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:3.1.0</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&quot;-config.file=/etc/loki/config.yaml -target=read&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3101</span><span class="string">:3100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7946</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9095</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./loki-config.yaml:/etc/loki/config.yaml</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [ <span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1&quot;</span> ]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="string">&amp;loki-dns</span></span><br><span class="line">      <span class="attr">loki:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">write:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:3.1.0</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&quot;-config.file=/etc/loki/config.yaml -target=write&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3102</span><span class="string">:3100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7946</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9095</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./loki-config.yaml:/etc/loki/config.yaml</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [ <span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1&quot;</span> ]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="string">*loki-dns</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">alloy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/alloy:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./alloy-local-config.yaml:/etc/alloy/config.alloy:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">command:</span>  <span class="string">run</span> <span class="string">--server.http.listen-addr=0.0.0.0:12345</span> <span class="string">--storage.path=/var/lib/alloy/data</span> <span class="string">/etc/alloy/config.alloy</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">12345</span><span class="string">:12345</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gateway</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-euc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mkdir -p /data/loki-data &amp;&amp; \</span></span><br><span class="line"><span class="string">        mkdir -p /data/loki-ruler &amp;&amp; \</span></span><br><span class="line"><span class="string">        minio server /data</span></span><br><span class="line"><span class="string"></span>    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ROOT_USER=loki</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ROOT_PASSWORD=supersecret</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_PROMETHEUS_AUTH_TYPE=public</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_UPDATE=off</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.data/minio:/data</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [ <span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9000/minio/health/live&quot;</span> ]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">15s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_PATHS_PROVISIONING=/etc/grafana/provisioning</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_AUTH_ANONYMOUS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_AUTH_ANONYMOUS_ORG_ROLE=Admin</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gateway</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-euc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mkdir -p /etc/grafana/provisioning/datasources</span></span><br><span class="line"><span class="string">        cat &lt;&lt;EOF &gt; /etc/grafana/provisioning/datasources/ds.yaml</span></span><br><span class="line"><span class="string">        apiVersion: 1</span></span><br><span class="line"><span class="string">        datasources:</span></span><br><span class="line"><span class="string">          - name: Loki</span></span><br><span class="line"><span class="string">            type: loki</span></span><br><span class="line"><span class="string">            access: proxy</span></span><br><span class="line"><span class="string">            url: http://gateway:3100</span></span><br><span class="line"><span class="string">            jsonData:</span></span><br><span class="line"><span class="string">              httpHeaderName1: &quot;X-Scope-OrgID&quot;</span></span><br><span class="line"><span class="string">            secureJsonData:</span></span><br><span class="line"><span class="string">              httpHeaderValue1: &quot;tenant1&quot;</span></span><br><span class="line"><span class="string">        EOF</span></span><br><span class="line"><span class="string">        /run.sh</span></span><br><span class="line"><span class="string"></span>    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [ <span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1&quot;</span> ]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:3.1.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./loki-config.yaml:/etc/loki/config.yaml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3100&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7946&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&quot;-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gateway</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">read</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-euc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        cat &lt;&lt;EOF &gt; /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="string">        user  nginx;</span></span><br><span class="line"><span class="string">        worker_processes  5;  ## Default: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">        <span class="string">events</span> &#123;</span><br><span class="line">          <span class="string">worker_connections</span>   <span class="number">1000</span><span class="string">;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="string">http</span> &#123;</span><br><span class="line">          <span class="string">resolver</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.11</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">server</span> &#123;</span><br><span class="line">            <span class="string">listen</span>             <span class="number">3100</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/</span> &#123;</span><br><span class="line">              <span class="string">return</span> <span class="number">200</span> <span class="string">&#x27;OK&#x27;</span><span class="string">;</span></span><br><span class="line">              <span class="string">auth_basic</span> <span class="string">off;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/api/prom/push</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span>       <span class="string">http://write:3100\$$request_uri;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/api/prom/tail</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span>       <span class="string">http://read:3100\$$request_uri;</span></span><br><span class="line">              <span class="string">proxy_set_header</span> <span class="string">Upgrade</span> <span class="string">\$$http_upgrade;</span></span><br><span class="line">              <span class="string">proxy_set_header</span> <span class="string">Connection</span> <span class="string">&quot;upgrade&quot;</span><span class="string">;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">~</span> <span class="string">/api/prom/.*</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span>       <span class="string">http://read:3100\$$request_uri;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/loki/api/v1/push</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span>       <span class="string">http://write:3100\$$request_uri;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/loki/api/v1/tail</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span>       <span class="string">http://read:3100\$$request_uri;</span></span><br><span class="line">              <span class="string">proxy_set_header</span> <span class="string">Upgrade</span> <span class="string">\$$http_upgrade;</span></span><br><span class="line">              <span class="string">proxy_set_header</span> <span class="string">Connection</span> <span class="string">&quot;upgrade&quot;</span><span class="string">;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">~</span> <span class="string">/loki/api/.*</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span>       <span class="string">http://read:3100\$$request_uri;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">EOF</span></span><br><span class="line">        <span class="string">/docker-entrypoint.sh</span> <span class="string">nginx</span> <span class="string">-g</span> <span class="string">&quot;daemon off;&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3100:3100&quot;</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;service&quot;</span>, <span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;status&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">flog:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mingrammer/flog</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-f</span> <span class="string">json</span> <span class="string">-d</span> <span class="string">200ms</span> <span class="string">-l</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br></pre></td></tr></table></figure><h3 id="部署"><a class="markdownIt-Anchor" href="#部署"></a> 部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><h3 id="验证"><a class="markdownIt-Anchor" href="#验证"></a> 验证</h3><p>Read组件： <a href="http://localhost:3101/ready">http://localhost:3101/ready</a></p><p>Write组件：<a href="http://localhost:3102/ready">http://localhost:3102/ready</a></p><p>Grafana Alloy UI：<a href="http://localhost:12345">http://localhost:12345</a></p><h2 id="grafana"><a class="markdownIt-Anchor" href="#grafana"></a> Grafana</h2><h3 id="查看日志"><a class="markdownIt-Anchor" href="#查看日志"></a> 查看日志</h3><p>可以使用LogCli或者Grafana可视化界面查看日志</p><p>使用 Grafana 查询 Loki 数据源的数据:</p><ol><li>访问Grafana：<a href="http://localhost:3000/">http://localhost:3000/</a></li><li>已经整合了Loki数据源</li><li>点击 Explore 查看</li><li>使用Code模式，编写 LogQL 查询</li></ol><h3 id="查询示例"><a class="markdownIt-Anchor" href="#查询示例"></a> 查询示例</h3><h4 id="标签检索"><a class="markdownIt-Anchor" href="#标签检索"></a> 标签检索</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 container 标签值 为 evaluate-loki-flog-1 的日志</span></span><br><span class="line">&#123;container=&quot;evaluate-loki-flog-1&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#123;container=&quot;evaluate-loki-grafana-1&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="包含值"><a class="markdownIt-Anchor" href="#包含值"></a> 包含值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 container 标签值 为 evaluate-loki-flog-1 ，且 json 格式中 status字段值为404</span></span><br><span class="line">&#123;container=&quot;evaluate-loki-flog-1&quot;&#125; | json | status=`404`</span><br></pre></td></tr></table></figure><h4 id="计算"><a class="markdownIt-Anchor" href="#计算"></a> 计算</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum by(container) (rate(&#123;container=&quot;evaluate-loki-flog-1&quot;&#125; | json | status=`404` [$__auto]))</span><br></pre></td></tr></table></figure><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;container=&quot;evaluate-loki-flog-1&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#123;container=&quot;evaluate-loki-flog-1&quot;&#125; |= &quot;GET&quot;</span><br><span class="line"></span><br><span class="line">&#123;container=&quot;evaluate-loki-flog-1&quot;&#125; |= &quot;POST&quot;</span><br><span class="line"></span><br><span class="line">&#123;container=&quot;evaluate-loki-flog-1&quot;&#125; | json | status=&quot;401&quot;</span><br><span class="line"></span><br><span class="line">&#123;container=&quot;evaluate-loki-flog-1&quot;&#125; != &quot;401&quot;</span><br></pre></td></tr></table></figure><p>更多：<a href="https://grafana.com/docs/loki/latest/query/query_examples/">https://grafana.com/docs/loki/latest/query/query_examples/</a></p><div class='tag-link-1'><a class="tag-Link" target="_blank" href="https://github.com/liaojie1314/DockerExample/tree/master/docker-compose/gla">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url('https://t3.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=https://github.com/liaojie1314/DockerExample/tree/master/docker-compose/gla&size=60'); border-radius: 50%; width: 60px; height: 60px;"></div>        <div class="tag-link-right">            <div class="tag-link-title">github仓库地址</div>            <div class="tag-link-sitename">https://github.com/liaojie1314/DockerExample/tree/master/docker-compose/gla</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;轻量级日志系统-loki&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#轻量级日志系统-loki&quot;&gt;&lt;/a&gt; 轻量级日志系统-Loki&lt;/h2&gt;
&lt;h2 id=&quot;日志系统&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr</summary>
      
    
    
    
    <category term="运维" scheme="https://www.yuanyuan.blog/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="GLA" scheme="https://www.yuanyuan.blog/tags/GLA/"/>
    
  </entry>
  
  <entry>
    <title>goroutine的调度</title>
    <link href="https://www.yuanyuan.blog/posts/93bc67f.html"/>
    <id>https://www.yuanyuan.blog/posts/93bc67f.html</id>
    <published>2024-10-05T15:24:45.000Z</published>
    <updated>2025-02-22T12:17:28.194Z</updated>
    
    <content type="html"><![CDATA[<p>转载于</p><div class='tag-link-1'><a class="tag-Link" target="_blank" href="https://github.com/talkgo/night/blob/master/content/night/12-2018-08-02-goroutine-GPM.md">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url('https://t3.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=https://github.com/talkgo/night/blob/master/content/night/12-2018-08-02-goroutine-GPM.md&size=60'); border-radius: 50%; width: 60px; height: 60px;"></div>        <div class="tag-link-right">            <div class="tag-link-title">go夜读</div>            <div class="tag-link-sitename">https://github.com/talkgo/night/blob/master/content/night/12-2018-08-02-goroutine-GPM.md</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><h2 id="阅读源码前可以阅读的资料"><a class="markdownIt-Anchor" href="#阅读源码前可以阅读的资料"></a> 阅读源码前可以阅读的资料</h2><ul><li><a href="http://blog.jobbole.com/35304/">Goroutine背后的系统知识</a></li><li><a href="https://github.com/qyuhen/book">golang源码剖析-雨痕老师</a></li><li><a href="https://github.com/teh-cmc/go-internals">go-intervals</a></li><li><a href="https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/">也谈goroutine调度器</a></li></ul><h2 id="golang的调度模型概览"><a class="markdownIt-Anchor" href="#golang的调度模型概览"></a> golang的调度模型概览</h2><p>调度的机制用一句话描述：<br />runtime准备好G,P,M，然后M绑定P，M从各种队列中获取G，切换到G的执行栈上并执行G上的任务函数，调用goexit做清理工作并回到M，如此反复。</p><h3 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h3><h4 id="mmachine"><a class="markdownIt-Anchor" href="#mmachine"></a> M（machine）</h4><ul><li>M代表着真正的执行计算资源，可以认为它就是os thread（系统线程）。</li><li>M是真正调度系统的执行者，每个M就像一个勤劳的工作者，总是从各种队列中找到可运行的G，而且这样M的可以同时存在多个。</li><li>M在绑定有效的P后，进入调度循环，而且M并不保留G状态，这是G可以跨M调度的基础。</li></ul><h4 id="pprocessor"><a class="markdownIt-Anchor" href="#pprocessor"></a> P（processor）</h4><ul><li>P表示逻辑processor，是线程M的执行的上下文。</li><li>P的最大作用是其拥有的各种G对象队列、链表、cache和状态。</li></ul><h4 id="ggoroutine"><a class="markdownIt-Anchor" href="#ggoroutine"></a> G（goroutine）</h4><ul><li>调度系统的最基本单位goroutine，存储了goroutine的执行stack信息、goroutine状态以及goroutine的任务函数等。</li><li>在G的眼中只有P，P就是运行G的“CPU”。</li><li>相当于两级线程</li></ul><h4 id="线程实现模型"><a class="markdownIt-Anchor" href="#线程实现模型"></a> 线程实现模型</h4><p>来自<code>Go并发编程实战</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">                    +-------+       +-------+      </span><br><span class="line">                    |  KSE  |       |  KSE  |          </span><br><span class="line">                    +-------+       +-------+      </span><br><span class="line">                        |               |                       内核空间</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -        </span><br><span class="line">                        |               |                       用户空间</span><br><span class="line">                    +-------+       +-------+</span><br><span class="line">                    |   M   |       |   M   |</span><br><span class="line">                    +-------+       +-------+</span><br><span class="line">                  |          |         |          |</span><br><span class="line">              +------+   +------+   +------+   +------+            </span><br><span class="line">              |   P  |   |   P  |   |   P  |   |   P  |</span><br><span class="line">              +------+   +------+   +------+   +------+   </span><br><span class="line">           |     |     |     |     |     |     |     |     | </span><br><span class="line">         +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ </span><br><span class="line">         | G | | G | | G | | G | | G | | G | | G | | G | | G | </span><br><span class="line">         +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ </span><br></pre></td></tr></table></figure><ul><li>KSE（Kernel Scheduling Entity）是内核调度实体</li><li>M与P，P与G之前的关联都是动态的，可以变的</li></ul><h3 id="关系示意图"><a class="markdownIt-Anchor" href="#关系示意图"></a> 关系示意图</h3><p>来自<code>golang源码剖析</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">                            +-------------------- sysmon ---------------//------+ </span><br><span class="line">                            |                                                   |</span><br><span class="line">                            |                                                   |</span><br><span class="line">               +---+      +---+-------+                   +--------+          +---+---+</span><br><span class="line">go func() ---&gt; | G | ---&gt; | P | local | &lt;=== balance ===&gt; | global | &lt;--//--- | P | M |</span><br><span class="line">               +---+      +---+-------+                   +--------+          +---+---+</span><br><span class="line">                            |                                 |                 | </span><br><span class="line">                            |      +---+                      |                 |</span><br><span class="line">                            +----&gt; | M | &lt;--- findrunnable ---+--- steal &lt;--//--+</span><br><span class="line">                                   +---+ </span><br><span class="line">                                     |</span><br><span class="line">                                   mstart</span><br><span class="line">                                     |</span><br><span class="line">              +--- execute &lt;----- schedule </span><br><span class="line">              |                      |   </span><br><span class="line">              |                      |</span><br><span class="line">              +--&gt; G.fn --&gt; goexit --+ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">              1. go func() 语气创建G。</span><br><span class="line">              2. 将G放入P的本地队列（或者平衡到全局全局队列）。</span><br><span class="line">              3. 唤醒或新建M来执行任务。</span><br><span class="line">              4. 进入调度循环</span><br><span class="line">              5. 尽力获取可执行的G，并执行</span><br><span class="line">              6. 清理现场并且重新进入调度循环</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="gpm的来由"><a class="markdownIt-Anchor" href="#gpm的来由"></a> GPM的来由</h2><h3 id="特殊的g0和m0"><a class="markdownIt-Anchor" href="#特殊的g0和m0"></a> 特殊的g0和m0</h3><p>g0和m0是在<code>proc.go</code>文件中的两个全局变量，m0就是进程启动后的初始线程，g0也是代表着初始线程的stack<br /><code>asm_amd64.go</code> --&gt; runtime·rt0_go(SB)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 程序刚启动的时候必定有一个线程启动（主线程）</span></span><br><span class="line"><span class="comment">// 将当前的栈和资源保存在g0</span></span><br><span class="line"><span class="comment">// 将该线程保存在m0</span></span><br><span class="line"><span class="comment">// tls: Thread Local Storage</span></span><br><span class="line"><span class="comment">// set the per-goroutine and per-mach &quot;registers&quot;</span></span><br><span class="line">get_tls(BX)</span><br><span class="line">LEAQruntime·g0(SB), CX</span><br><span class="line">MOVQCX, g(BX)</span><br><span class="line">LEAQruntime·m0(SB), AX</span><br><span class="line"></span><br><span class="line"><span class="comment">// save m-&gt;g0 = g0</span></span><br><span class="line">MOVQCX, m_g0(AX)</span><br><span class="line"><span class="comment">// save m0 to g0-&gt;m</span></span><br><span class="line">MOVQAX, g_m(CX)</span><br></pre></td></tr></table></figure><h3 id="m的一生"><a class="markdownIt-Anchor" href="#m的一生"></a> M的一生</h3><h4 id="m的创建"><a class="markdownIt-Anchor" href="#m的创建"></a> M的创建</h4><p><code>proc.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a new m. It will start off with a call to fn, or else the scheduler.</span></span><br><span class="line"><span class="comment">// fn needs to be static and not a heap allocated closure.</span></span><br><span class="line"><span class="comment">// May run with m.p==nil, so write barriers are not allowed.</span></span><br><span class="line"><span class="comment">//go:nowritebarrierrec</span></span><br><span class="line"><span class="comment">// 创建一个新的m，它将从fn或者调度程序开始</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newm</span><span class="params">(fn <span class="keyword">func</span>()</span></span>, _p_ *p) &#123;</span><br><span class="line"><span class="comment">// 根据fn和p和绑定一个m对象</span></span><br><span class="line">mp := allocm(_p_, fn)</span><br><span class="line"><span class="comment">// 设置当前m的下一个p为_p_</span></span><br><span class="line">mp.nextp.set(_p_)</span><br><span class="line">mp.sigmask = initSigmask</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 真正的分配os thread</span></span><br><span class="line">newm1(mp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newm1</span><span class="params">(mp *m)</span></span> &#123;</span><br><span class="line"><span class="comment">// 对cgo的处理</span></span><br><span class="line">...</span><br><span class="line">execLock.rlock() <span class="comment">// Prevent process clone.</span></span><br><span class="line"><span class="comment">// 创建一个系统线程</span></span><br><span class="line">newosproc(mp, unsafe.Pointer(mp.g0.stack.hi))</span><br><span class="line">execLock.runlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="状态"><a class="markdownIt-Anchor" href="#状态"></a> 状态</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> mstart</span><br><span class="line">    |</span><br><span class="line">    v        找不到可执行任务，gc STW，</span><br><span class="line">+------+     任务执行时间过长，系统阻塞等   +------+</span><br><span class="line">| spin | ----------------------------&gt; |unspin| </span><br><span class="line">+------+          mstop                +------+</span><br><span class="line">    ^                                      |</span><br><span class="line">    |                                      v</span><br><span class="line">notewakeup &lt;-------------------------  notesleep</span><br></pre></td></tr></table></figure><h4 id="m的一些问题"><a class="markdownIt-Anchor" href="#m的一些问题"></a> M的一些问题</h4><p><a href="https://github.com/golang/go/issues/14592">https://github.com/golang/go/issues/14592</a></p><h3 id="p的一生"><a class="markdownIt-Anchor" href="#p的一生"></a> P的一生</h3><h4 id="p的创建"><a class="markdownIt-Anchor" href="#p的创建"></a> P的创建</h4><p><code>proc.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Change number of processors. The world is stopped, sched is locked.</span></span><br><span class="line"><span class="comment">// gcworkbufs are not being modified by either the GC or</span></span><br><span class="line"><span class="comment">// the write barrier code.</span></span><br><span class="line"><span class="comment">// Returns list of Ps with local work, they need to be scheduled by the caller.</span></span><br><span class="line"><span class="comment">// 所有的P都在这个函数分配，不管是最开始的初始化分配，还是后期调整</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">procresize</span><span class="params">(nprocs <span class="type">int32</span>)</span></span> *p &#123;</span><br><span class="line">old := gomaxprocs</span><br><span class="line"><span class="comment">// 如果 gomaxprocs &lt;=0 抛出异常</span></span><br><span class="line"><span class="keyword">if</span> old &lt; <span class="number">0</span> || nprocs &lt;= <span class="number">0</span> &#123;</span><br><span class="line">throw(<span class="string">&quot;procresize: invalid arg&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  ...</span><br><span class="line"><span class="comment">// Grow allp if necessary.</span></span><br><span class="line"><span class="keyword">if</span> nprocs &gt; <span class="type">int32</span>(<span class="built_in">len</span>(allp)) &#123;</span><br><span class="line"><span class="comment">// Synchronize with retake, which could be running</span></span><br><span class="line"><span class="comment">// concurrently since it doesn&#x27;t run on a P.</span></span><br><span class="line">lock(&amp;allpLock)</span><br><span class="line"><span class="keyword">if</span> nprocs &lt;= <span class="type">int32</span>(<span class="built_in">cap</span>(allp)) &#123;</span><br><span class="line">allp = allp[:nprocs]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 分配nprocs个*p</span></span><br><span class="line">nallp := <span class="built_in">make</span>([]*p, nprocs)</span><br><span class="line"><span class="comment">// Copy everything up to allp&#x27;s cap so we</span></span><br><span class="line"><span class="comment">// never lose old allocated Ps.</span></span><br><span class="line"><span class="built_in">copy</span>(nallp, allp[:<span class="built_in">cap</span>(allp)])</span><br><span class="line">allp = nallp</span><br><span class="line">&#125;</span><br><span class="line">unlock(&amp;allpLock)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize new P&#x27;s</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="type">int32</span>(<span class="number">0</span>); i &lt; nprocs; i++ &#123;</span><br><span class="line">pp := allp[i]</span><br><span class="line"><span class="keyword">if</span> pp == <span class="literal">nil</span> &#123;</span><br><span class="line">pp = <span class="built_in">new</span>(p)</span><br><span class="line">pp.id = i</span><br><span class="line">pp.status = _Pgcstop            <span class="comment">// 更改状态</span></span><br><span class="line">pp.sudogcache = pp.sudogbuf[:<span class="number">0</span>] <span class="comment">//将sudogcache指向sudogbuf的起始地址</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pp.deferpool &#123;</span><br><span class="line">pp.deferpool[i] = pp.deferpoolbuf[i][:<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">pp.wbBuf.reset()</span><br><span class="line"><span class="comment">// 将pp保存到allp数组里, allp[i] = pp</span></span><br><span class="line">atomicstorep(unsafe.Pointer(&amp;allp[i]), unsafe.Pointer(pp))</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">_g_ := getg()</span><br><span class="line"><span class="comment">// 如果当前的M已经绑定P，继续使用，否则将当前的M绑定一个P</span></span><br><span class="line"><span class="keyword">if</span> _g_.m.p != <span class="number">0</span> &amp;&amp; _g_.m.p.ptr().id &lt; nprocs &#123;</span><br><span class="line"><span class="comment">// continue to use the current P</span></span><br><span class="line">_g_.m.p.ptr().status = _Prunning</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// release the current P and acquire allp[0]</span></span><br><span class="line"><span class="comment">// 获取allp[0]</span></span><br><span class="line"><span class="keyword">if</span> _g_.m.p != <span class="number">0</span> &#123;</span><br><span class="line">_g_.m.p.ptr().m = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">_g_.m.p = <span class="number">0</span></span><br><span class="line">_g_.m.mcache = <span class="literal">nil</span></span><br><span class="line">p := allp[<span class="number">0</span>]</span><br><span class="line">p.m = <span class="number">0</span></span><br><span class="line">p.status = _Pidle</span><br><span class="line"><span class="comment">// 将当前的m和p绑定</span></span><br><span class="line">acquirep(p)</span><br><span class="line"><span class="keyword">if</span> trace.enabled &#123;</span><br><span class="line">traceGoStart()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> runnablePs *p</span><br><span class="line"><span class="keyword">for</span> i := nprocs - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">p := allp[i]</span><br><span class="line"><span class="keyword">if</span> _g_.m.p.ptr() == p &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">p.status = _Pidle</span><br><span class="line"><span class="keyword">if</span> runqempty(p) &#123; <span class="comment">// 将空闲p放入空闲链表</span></span><br><span class="line">pidleput(p)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p.m.set(mget())</span><br><span class="line">p.link.set(runnablePs)</span><br><span class="line">runnablePs = p</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stealOrder.reset(<span class="type">uint32</span>(nprocs))</span><br><span class="line"><span class="keyword">var</span> int32p *<span class="type">int32</span> = &amp;gomaxprocs <span class="comment">// make compiler check that gomaxprocs is an int32</span></span><br><span class="line">atomic.Store((*<span class="type">uint32</span>)(unsafe.Pointer(int32p)), <span class="type">uint32</span>(nprocs))</span><br><span class="line"><span class="keyword">return</span> runnablePs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的P在程序启动的时候就设置好了，并用一个allp slice维护，可以调用runtime.GOMAXPROCS调整P的个数，虽然代价很大</p><h4 id="状态转换"><a class="markdownIt-Anchor" href="#状态转换"></a> 状态转换</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">                                            acquirep(p)        </span><br><span class="line">                          不需要使用的P       P和M绑定的时候       进入系统调用       procresize()</span><br><span class="line">new(p)  -----+        +---------------+     +-----------+     +------------+    +----------+</span><br><span class="line">            |         |               |     |           |     |            |    |          |</span><br><span class="line">            |   +------------+    +---v--------+    +---v--------+    +----v-------+    +--v---------+</span><br><span class="line">            +--&gt;|  _Pgcstop  |    |    _Pidle  |    |  _Prunning |    |  _Psyscall |    |   _Pdead   |</span><br><span class="line">                +------^-----+    +--------^---+    +--------^---+    +------------+    +------------+</span><br><span class="line">                       |            |     |            |     |            |</span><br><span class="line">                       +------------+     +------------+     +------------+</span><br><span class="line">                           GC结束            releasep()        退出系统调用</span><br><span class="line">                                            P和M解绑                      </span><br></pre></td></tr></table></figure><p>P的数量默认等于cpu的个数，很多人认为runtime.GOMAXPROCS可以限制系统线程的数量，但这是错误的，M是按需创建的，和runtime.GOMAXPROCS没有关系。</p><h3 id="g的一生"><a class="markdownIt-Anchor" href="#g的一生"></a> G的一生</h3><h4 id="g的创建"><a class="markdownIt-Anchor" href="#g的创建"></a> G的创建</h4><p><code>proc.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a new g running fn with siz bytes of arguments.</span></span><br><span class="line"><span class="comment">// Put it on the queue of g&#x27;s waiting to run.</span></span><br><span class="line"><span class="comment">// The compiler turns a go statement into a call to this.</span></span><br><span class="line"><span class="comment">// Cannot split the stack because it assumes that the arguments</span></span><br><span class="line"><span class="comment">// are available sequentially after &amp;fn; they would not be</span></span><br><span class="line"><span class="comment">// copied if a stack split occurred.</span></span><br><span class="line"><span class="comment">//go:nosplit</span></span><br><span class="line"><span class="comment">// 新建一个goroutine，</span></span><br><span class="line"><span class="comment">// 􏳄 用fn + PtrSize 获取第一个参数的地址，也就是argp</span></span><br><span class="line"><span class="comment">// 用siz - 8 获取pc地址</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newproc</span><span class="params">(siz <span class="type">int32</span>, fn *funcval)</span></span> &#123;</span><br><span class="line">argp := add(unsafe.Pointer(&amp;fn), sys.PtrSize)</span><br><span class="line">pc := getcallerpc()</span><br><span class="line"><span class="comment">// 用g0的栈创建G对象</span></span><br><span class="line">systemstack(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">newproc1(fn, (*<span class="type">uint8</span>)(argp), siz, pc)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a new g running fn with narg bytes of arguments starting</span></span><br><span class="line"><span class="comment">// at argp. callerpc is the address of the go statement that created</span></span><br><span class="line"><span class="comment">// this. The new g is put on the queue of g&#x27;s waiting to run.</span></span><br><span class="line"><span class="comment">// 根据函数参数和函数地址，创建一个新的G，然后将这个G加入队列等待运行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newproc1</span><span class="params">(fn *funcval, argp *<span class="type">uint8</span>, narg <span class="type">int32</span>, callerpc <span class="type">uintptr</span>)</span></span> &#123;</span><br><span class="line">_g_ := getg()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> fn == <span class="literal">nil</span> &#123;</span><br><span class="line">_g_.m.throwing = <span class="number">-1</span> <span class="comment">// do not dump full stacks</span></span><br><span class="line">throw(<span class="string">&quot;go of nil func value&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">_g_.m.locks++ <span class="comment">// disable preemption because it can be holding p in a local var</span></span><br><span class="line">siz := narg</span><br><span class="line">siz = (siz + <span class="number">7</span>) &amp;^ <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We could allocate a larger initial stack if necessary.</span></span><br><span class="line"><span class="comment">// Not worth it: this is almost always an error.</span></span><br><span class="line"><span class="comment">// 4*sizeof(uintreg): extra space added below</span></span><br><span class="line"><span class="comment">// sizeof(uintreg): caller&#x27;s LR (arm) or return address (x86, in gostartcall).</span></span><br><span class="line"><span class="comment">// 如果函数的参数大小比2048大的话，直接panic</span></span><br><span class="line"><span class="keyword">if</span> siz &gt;= _StackMin<span class="number">-4</span>*sys.RegSize-sys.RegSize &#123;</span><br><span class="line">throw(<span class="string">&quot;newproc: function arguments too large for new goroutine&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从m中获取p</span></span><br><span class="line">_p_ := _g_.m.p.ptr()</span><br><span class="line"><span class="comment">// 从gfree list获取g</span></span><br><span class="line">newg := gfget(_p_)</span><br><span class="line"><span class="comment">// 如果没获取到g，则新建一个</span></span><br><span class="line"><span class="keyword">if</span> newg == <span class="literal">nil</span> &#123;</span><br><span class="line">newg = malg(_StackMin)</span><br><span class="line">casgstatus(newg, _Gidle, _Gdead) <span class="comment">//将g的状态改为_Gdead</span></span><br><span class="line"><span class="comment">// 添加到allg数组，防止gc扫描清除掉</span></span><br><span class="line">allgadd(newg) <span class="comment">// publishes with a g-&gt;status of Gdead so GC scanner doesn&#x27;t look at uninitialized stack.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> newg.stack.hi == <span class="number">0</span> &#123;</span><br><span class="line">throw(<span class="string">&quot;newproc1: newg missing stack&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> readgstatus(newg) != _Gdead &#123;</span><br><span class="line">throw(<span class="string">&quot;newproc1: new g is not Gdead&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">totalSize := <span class="number">4</span>*sys.RegSize + <span class="type">uintptr</span>(siz) + sys.MinFrameSize <span class="comment">// extra space in case of reads slightly beyond frame</span></span><br><span class="line">totalSize += -totalSize &amp; (sys.SpAlign - <span class="number">1</span>)                  <span class="comment">// align to spAlign</span></span><br><span class="line">sp := newg.stack.hi - totalSize</span><br><span class="line">spArg := sp</span><br><span class="line"><span class="keyword">if</span> usesLR &#123;</span><br><span class="line"><span class="comment">// caller&#x27;s LR</span></span><br><span class="line">*(*<span class="type">uintptr</span>)(unsafe.Pointer(sp)) = <span class="number">0</span></span><br><span class="line">prepGoExitFrame(sp)</span><br><span class="line">spArg += sys.MinFrameSize</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> narg &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// copy参数</span></span><br><span class="line">memmove(unsafe.Pointer(spArg), unsafe.Pointer(argp), <span class="type">uintptr</span>(narg))</span><br><span class="line"><span class="comment">// This is a stack-to-stack copy. If write barriers</span></span><br><span class="line"><span class="comment">// are enabled and the source stack is grey (the</span></span><br><span class="line"><span class="comment">// destination is always black), then perform a</span></span><br><span class="line"><span class="comment">// barrier copy. We do this *after* the memmove</span></span><br><span class="line"><span class="comment">// because the destination stack may have garbage on</span></span><br><span class="line"><span class="comment">// it.</span></span><br><span class="line"><span class="keyword">if</span> writeBarrier.needed &amp;&amp; !_g_.m.curg.gcscandone &#123;</span><br><span class="line">f := findfunc(fn.fn)</span><br><span class="line">stkmap := (*stackmap)(funcdata(f, _FUNCDATA_ArgsPointerMaps))</span><br><span class="line"><span class="comment">// We&#x27;re in the prologue, so it&#x27;s always stack map index 0.</span></span><br><span class="line">bv := stackmapdata(stkmap, <span class="number">0</span>)</span><br><span class="line">bulkBarrierBitmap(spArg, spArg, <span class="type">uintptr</span>(narg), <span class="number">0</span>, bv.bytedata)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memclrNoHeapPointers(unsafe.Pointer(&amp;newg.sched), unsafe.Sizeof(newg.sched))</span><br><span class="line">newg.sched.sp = sp</span><br><span class="line">newg.stktopsp = sp</span><br><span class="line"><span class="comment">// 保存goexit的地址到sched.pc</span></span><br><span class="line">newg.sched.pc = funcPC(goexit) + sys.PCQuantum <span class="comment">// +PCQuantum so that previous instruction is in same function</span></span><br><span class="line">newg.sched.g = guintptr(unsafe.Pointer(newg))</span><br><span class="line">gostartcallfn(&amp;newg.sched, fn)</span><br><span class="line">newg.gopc = callerpc</span><br><span class="line">newg.startpc = fn.fn</span><br><span class="line"><span class="keyword">if</span> _g_.m.curg != <span class="literal">nil</span> &#123;</span><br><span class="line">newg.labels = _g_.m.curg.labels</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> isSystemGoroutine(newg) &#123;</span><br><span class="line">atomic.Xadd(&amp;sched.ngsys, +<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">newg.gcscanvalid = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 更改当前g的状态为_Grunnable</span></span><br><span class="line">casgstatus(newg, _Gdead, _Grunnable)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _p_.goidcache == _p_.goidcacheend &#123;</span><br><span class="line"><span class="comment">// Sched.goidgen is the last allocated id,</span></span><br><span class="line"><span class="comment">// this batch must be [sched.goidgen+1, sched.goidgen+GoidCacheBatch].</span></span><br><span class="line"><span class="comment">// At startup sched.goidgen=0, so main goroutine receives goid=1.</span></span><br><span class="line">_p_.goidcache = atomic.Xadd64(&amp;sched.goidgen, _GoidCacheBatch)</span><br><span class="line">_p_.goidcache -= _GoidCacheBatch - <span class="number">1</span></span><br><span class="line">_p_.goidcacheend = _p_.goidcache + _GoidCacheBatch</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成唯一的goid</span></span><br><span class="line">newg.goid = <span class="type">int64</span>(_p_.goidcache)</span><br><span class="line">_p_.goidcache++</span><br><span class="line"><span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">newg.racectx = racegostart(callerpc)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> trace.enabled &#123;</span><br><span class="line">traceGoCreate(newg, newg.startpc)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将当前新生成的g，放入队列</span></span><br><span class="line">runqput(_p_, newg, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有空闲的p 且 m没有处于自旋状态 且 main goroutine已经启动，那么唤醒某个m来执行任务</span></span><br><span class="line"><span class="keyword">if</span> atomic.Load(&amp;sched.npidle) != <span class="number">0</span> &amp;&amp; atomic.Load(&amp;sched.nmspinning) == <span class="number">0</span> &amp;&amp; mainStarted &#123;</span><br><span class="line">wakep()</span><br><span class="line">&#125;</span><br><span class="line">_g_.m.locks--</span><br><span class="line"><span class="keyword">if</span> _g_.m.locks == <span class="number">0</span> &amp;&amp; _g_.preempt &#123; <span class="comment">// restore the preemption request in case we&#x27;ve cleared it in newstack</span></span><br><span class="line">_g_.stackguard0 = stackPreempt</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="g的状态图"><a class="markdownIt-Anchor" href="#g的状态图"></a> G的状态图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">                                                    +------------+</span><br><span class="line">                                    ready           |            |</span><br><span class="line">                                +------------------ |  _Gwaiting |</span><br><span class="line">                                |                   |            |</span><br><span class="line">                                |                   +------------+</span><br><span class="line">                                |                         ^ park_m</span><br><span class="line">                                V                         | </span><br><span class="line">+------------+            +------------+  execute   +------------+            +------------+    </span><br><span class="line">|            |  newproc   |            | ---------&gt; |            |   goexit   |            |</span><br><span class="line">|  _Gidle    | ---------&gt; | _Grunnable |  yield     | _Grunning  | ---------&gt; |   _Gdead   |      </span><br><span class="line">|            |            |            | &lt;--------- |            |            |            |</span><br><span class="line">+------------+            +-----^------+            +------------+            +------------+</span><br><span class="line">                                |         entersyscall |      ^ </span><br><span class="line">                                |                      V      | existsyscall</span><br><span class="line">                                |                   +------------+</span><br><span class="line">                                |   existsyscall    |            |</span><br><span class="line">                                +------------------ |  _Gsyscall |</span><br><span class="line">                                                    |            |</span><br><span class="line">                                                    +------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建的G都是_Grunnable的，新建G的时候优先从gfree list从获取G，这样可以复用G，所以上图的状态不是完整的，_Gdead通过newproc会变为_Grunnable，<br />通过go func()的语法新建的G，并不是直接运行，而是放入可运行的队列中，什么时候运行用于并不能决定，而是搞调度系统去自发的运行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转载于&lt;/p&gt;
&lt;div class=&#39;tag-link-1&#39;&gt;&lt;a class=&quot;tag-Link&quot; target=&quot;_blank&quot; href=&quot;https://github.com/talkgo/night/blob/master/content/night/12-20</summary>
      
    
    
    
    <category term="编程进阶" scheme="https://www.yuanyuan.blog/categories/%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="golang" scheme="https://www.yuanyuan.blog/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>conan2</title>
    <link href="https://www.yuanyuan.blog/posts/85850a45.html"/>
    <id>https://www.yuanyuan.blog/posts/85850a45.html</id>
    <published>2024-10-03T22:25:35.000Z</published>
    <updated>2025-02-22T12:17:28.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="conan"><a class="markdownIt-Anchor" href="#conan"></a> conan</h2><h3 id="什么是conan"><a class="markdownIt-Anchor" href="#什么是conan"></a> 什么是conan</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20241005202849758.png" alt="image-20241005202849758" /></p><p>从官网的介绍上来看，它是一个为C和C++开发者设计的软件包管理器。开源、去中心化和多平台的软件包管理器，用来创建和共享所有本地二进制文件。现在官网上的版本已经是2.0，1.x的版本就不建议学了。</p><div class='tag-link-1'><a class="tag-Link" target="_blank" href="https://conan.io/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url('https://t3.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=https://conan.io/&size=60'); border-radius: 50%; width: 60px; height: 60px;"></div>        <div class="tag-link-right">            <div class="tag-link-title">conan官网</div>            <div class="tag-link-sitename">https://conan.io/</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><div class='tag-link-1'><a class="tag-Link" target="_blank" href="https://github.com/conan-io/conan">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url('https://t3.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=https://github.com/conan-io/conan&size=60'); border-radius: 50%; width: 60px; height: 60px;"></div>        <div class="tag-link-right">            <div class="tag-link-title">conanGithub</div>            <div class="tag-link-sitename">https://github.com/conan-io/conan</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><p>目前最新版本：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20241005210645268.png" alt="image-20241005210645268" /></p><h3 id="为什么使用conan"><a class="markdownIt-Anchor" href="#为什么使用conan"></a> 为什么使用conan</h3><p>从官网上来看，可以分为以下几点：</p><ol><li>最佳二进制管理，为开发人员和 CI 节省时间和资源</li><li>真正的通用性，适用于任何平台、任何构建系统、任何编译器</li><li>全球最先进企业所需的可扩展性</li><li>管理工具，改进本地、嵌入式和交叉构建流程</li><li>快速响应，大规模整合变更</li><li>自动存储开源第三方，管理元数据。</li><li>自由开放的源代码 由专业团队提供稳定支持</li><li>从 ConanCenter 到您自己的服务器，完全去中心化，拥有自己的供应链，提高安全性</li><li>庞大而广泛的conan社区和生态系统</li></ol><h3 id="什么地方在使用conan"><a class="markdownIt-Anchor" href="#什么地方在使用conan"></a> 什么地方在使用conan</h3><p>就如官网介绍的一样，这是为C和C++开发者服务的包管理器。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20241005211032085.png" alt="image-20241005211032085" /></p><p><a href="https://isocpp.org/files/papers/CppDevSurvey-2024-summary.pdf">2024CPP调研报告</a></p><p>上图为管理C++库工具的排行榜，除去自己编译、使用别人编译好的之外，conan是最受欢迎的包管理工具（毕竟其他的都没有用到包管理工具），除此之外，比如ROS2，在线查看汇编工具：<a href="https://godbolt.org/">https://godbolt.org/</a> 都是使用的conan作为库管理工具。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20241005211619844.png" alt="image-20241005211619844" /></p><h3 id="查看包"><a class="markdownIt-Anchor" href="#查看包"></a> 查看包</h3><p>前往ConanCenter搜索你想要的包</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20241005211816868.png" alt="image-20241005211816868" />这里以<code>boost</code>举个栗子：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20241005211946018.png" alt="image-20241005211946018" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20241005212428835.png" alt="image-20241005212428835" /></p><h2 id="image-20241005212639160初识conan"><a class="markdownIt-Anchor" href="#image-20241005212639160初识conan"></a> <img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20241005212639160.png" alt="image-20241005212639160" />初识conan</h2><h3 id="安装conan"><a class="markdownIt-Anchor" href="#安装conan"></a> 安装conan</h3><p>前往官网首页，点击<code>downloads</code></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20241005212912158.png" alt="image-20241005212912158" /></p><p>推荐使用python安装（或者安装包安装），安装完之后，使用<code>conan --version</code>查看conan版本</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20241005213422489.png" alt="image-20241005213422489" /></p><p>卸载使用<code>pip uninstall conan</code>即可。</p><h3 id="配置conan"><a class="markdownIt-Anchor" href="#配置conan"></a> 配置conan</h3><p>查看<code>conan</code>配置文件位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conan config home</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20250114165849605.png" alt="image-20250114165849605" /></p><p>进入该文件夹下，使用下面命令生成profiles-&gt;default文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conan profile detect</span><br></pre></td></tr></table></figure><p>文件内容大致如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[settings]</span><br><span class="line">arch=x86_64</span><br><span class="line">build_type=Release</span><br><span class="line">compiler=gcc</span><br><span class="line">compiler.cppstd=gnu17</span><br><span class="line">compiler.libcxx=libstdc++11</span><br><span class="line">compiler.version=12</span><br><span class="line">os=Linux</span><br></pre></td></tr></table></figure><div class="tip warning"><p>不同系统环境内容可能不同！！！</p></div><h3 id="hello-conan2"><a class="markdownIt-Anchor" href="#hello-conan2"></a> Hello Conan2</h3><p>把环境配置好以后，让我们开始编写第一个项目吧！（以<strong>gcc</strong>为例）</p><p>项目目录结构如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">demo # 项目名</span><br><span class="line">├── build.sh # 构建脚本</span><br><span class="line">├── clear.sh # 清除构建产物脚本</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── conanfile.txt</span><br><span class="line">└── main.cpp</span><br></pre></td></tr></table></figure><ul><li>main.cpp</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;zlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_env</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&gt;&gt;&gt;&quot;</span> &lt;&lt; __func__ &lt;&lt; <span class="string">&quot;&lt;&lt;&lt;&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sizeof(void*) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">void</span> *) &lt;&lt; std::endl;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__VERSION__)</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;__VERSION__ = &quot;</span> &lt;&lt; __VERSION__ &lt;&lt; std::endl;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(_MSC_VER)</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;_MSC_VER = &quot;</span> &lt;&lt; __MSC_VER__ &lt;&lt; std::endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_zlib</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&gt;&gt;&gt;&quot;</span> &lt;&lt; __func__ &lt;&lt; <span class="string">&quot;&lt;&lt;&lt;&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="type">char</span> buffer_in[<span class="number">256</span>] = &#123;</span><br><span class="line">        <span class="string">&quot;Conan is a C/C++ package manager for C/C++ projects. Conan is a &quot;</span></span><br><span class="line">        <span class="string">&quot;toolchain that can be used to build and package projects. It is a &quot;</span></span><br><span class="line">        <span class="string">&quot;toolchain that can be used to build and package projects. It is a &quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buffer_out[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    z_stream defstream;</span><br><span class="line">    defstream.zalloc = Z_NULL;</span><br><span class="line">    defstream.zfree = Z_NULL;</span><br><span class="line">    defstream.opaque = Z_NULL;</span><br><span class="line">    defstream.avail_in = (uint)<span class="built_in">strlen</span>(buffer_in);</span><br><span class="line">    defstream.next_in = (Bytef *)buffer_in;</span><br><span class="line">    defstream.avail_out = (uint)<span class="built_in">sizeof</span>(buffer_out);</span><br><span class="line">    defstream.next_out = (Bytef *)buffer_out;</span><br><span class="line">    <span class="built_in">deflateInit</span>(&amp;defstream, Z_BEST_COMPRESSION);</span><br><span class="line">    <span class="built_in">deflate</span>(&amp;defstream, Z_FINISH);</span><br><span class="line">    <span class="built_in">deflateEnd</span>(&amp;defstream);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;uncompressed size is: %lu\n&quot;</span>, <span class="built_in">strlen</span>(buffer_in));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;compressed size is: %lu\n&quot;</span>, <span class="built_in">strlen</span>(buffer_out));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ZLIB VERSION: %s\n&quot;</span>, <span class="built_in">zlibVersion</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test_env</span>();</span><br><span class="line">    <span class="built_in">test_zlib</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>conanfile.txt</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[requires]</span><br><span class="line">zlib/1.3.1</span><br><span class="line"></span><br><span class="line">[generators]</span><br><span class="line">CMakeDeps</span><br><span class="line">CMakeToolchain</span><br></pre></td></tr></table></figure><ul><li>CMakeLists.txt</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"><span class="keyword">project</span>(demo CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(ZLIB REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PRIVATE ZLIB::ZLIB)</span><br></pre></td></tr></table></figure><ul><li><a href="http://build.sh">build.sh</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">conan install . --output-folder=build --build missing --profile:host=default --profile:build=default</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">host:目标平台的配置，build:构建平台的配置(交叉编译)</span></span><br><span class="line">conan install . --output-folder=build --build missing</span><br><span class="line"></span><br><span class="line">cd build</span><br><span class="line"></span><br><span class="line">cmake .. -G &quot;Unix Makefiles&quot; -DCMAKE_TOOLCHAIN_FILE=&quot;conan_toolchain.cmake&quot; -DCMAKE_BUILD_TYPE=Release</span><br><span class="line"></span><br><span class="line">cmake --build . --config Release</span><br><span class="line"></span><br><span class="line">cd ../bin</span><br><span class="line"> </span><br><span class="line">./demo</span><br></pre></td></tr></table></figure><ul><li><a href="http://clear.sh">clear.sh</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">rm -rf build</span><br><span class="line">rm -rf bin</span><br><span class="line">rm -rf CMakeUserPresets.json</span><br></pre></td></tr></table></figure><p><strong>main.cpp</strong>：<code>test_env()</code>函数主要功能是输出当前编译环境的一些信息；<code>test_zlib(void)</code>函数是测试 <code>zlib</code> 库的压缩功能。</p><p>运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><p>出现下面的结果就说明成功了！</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20250114173041638.png" alt="image-20250114173041638" /></p><p>如果你要测试<strong>MSVC</strong>（Windows系统），你需要添加或者修改配置文件<strong>default</strong>，修改后的文件大概如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[settings]</span><br><span class="line">arch=x86_64</span><br><span class="line">build_type=Release</span><br><span class="line">compiler=msvc</span><br><span class="line">compiler.cppstd=14</span><br><span class="line">compiler.runtime=dynamic</span><br><span class="line">compiler.version=192</span><br><span class="line">os=Linux</span><br></pre></td></tr></table></figure><p>同时需要修改<strong><a href="http://build.sh">build.sh</a></strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conan install . --output-folder=build --build missing</span><br><span class="line"></span><br><span class="line">cd build</span><br><span class="line"></span><br><span class="line">cmake .. -G &quot;Visual Studio 16 2019&quot; -DCMAKE_TOOLCHAIN_FILE=&quot;conan_toolchain.cmake&quot;</span><br><span class="line"></span><br><span class="line">cmake --build . --config Release</span><br><span class="line"></span><br><span class="line">cd ../bin/Release</span><br><span class="line"> </span><br><span class="line">demo.exe</span><br></pre></td></tr></table></figure><p><strong>gcc</strong>和<strong>msvc</strong>配置项描述如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20250117213836173.png" alt="image-20250117213836173" /></p><p>更多配置详情请参考执行<code>conan config home</code>命令后得到目录下的<code>settings.yml</code>文件。</p><div class="tip info"><p>推荐使用GCC</p></div><h3 id="debugrelease-静态库动态库"><a class="markdownIt-Anchor" href="#debugrelease-静态库动态库"></a> Debug&amp;Release 静态库&amp;动态库</h3><p>以下代码均使用<strong>gcc</strong>测试。重新创建一个新项目<strong>json_cpp</strong>，项目结构跟之前一样。</p><ul><li>main.cpp</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;json/json.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_env</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&gt;&gt;&gt;&quot;</span> &lt;&lt; __func__ &lt;&lt; <span class="string">&quot;&lt;&lt;&lt;&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sizeof(void*) = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">void</span> *) &lt;&lt; std::endl;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__VERSION__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Debug version&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Release version&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;__VERSION__ = &quot;</span> &lt;&lt; __VERSION__ &lt;&lt; std::endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_jsoncpp</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&gt;&gt;&gt;&quot;</span> &lt;&lt; __func__ &lt;&lt; <span class="string">&quot;&lt;&lt;&lt;&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    Json::Value up;</span><br><span class="line">    up[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;yuanyuan&quot;</span>;</span><br><span class="line">    up[<span class="string">&quot;github&quot;</span>] = <span class="string">&quot;https://github.com/liaojie1314&quot;</span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;up:&quot;</span> &lt;&lt; up &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test_env</span>();</span><br><span class="line">    <span class="built_in">test_jsoncpp</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>conanfile.txt</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[requires]</span><br><span class="line">jsoncpp/1.9.5</span><br><span class="line"></span><br><span class="line">[generators]</span><br><span class="line">CMakeDeps</span><br><span class="line">CMakeToolchain</span><br><span class="line"></span><br><span class="line">[options]</span><br><span class="line">jsoncpp*:shared=False</span><br></pre></td></tr></table></figure><p><code>jsoncpp*:shared=True</code>表示生成动态库，默认为False，即生成静态库。</p><ul><li>CMakeLists.txt</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"><span class="keyword">project</span>(json_cpp CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(jsoncpp REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> JsonCpp::JsonCpp)</span><br></pre></td></tr></table></figure><ul><li><a href="http://build.sh">build.sh</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">conan install . --output-folder=build --build missing --profile:host=default --profile:build=default</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">host:目标平台的配置，build:构建平台的配置(交叉编译)</span></span><br><span class="line">conan install . --output-folder=build --build missing</span><br><span class="line"></span><br><span class="line">cd build</span><br><span class="line"></span><br><span class="line">cmake .. -G &quot;Unix Makefiles&quot; -DCMAKE_TOOLCHAIN_FILE=&quot;conan_toolchain.cmake&quot; -DCMAKE_BUILD_TYPE=Release</span><br><span class="line"></span><br><span class="line">cmake --build . --config Release</span><br><span class="line"></span><br><span class="line">cd ../bin</span><br><span class="line"> </span><br><span class="line">./json_cpp</span><br></pre></td></tr></table></figure><ul><li>clear.sh不变</li></ul><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image-20250117220646382.png" alt="image-20250117220646382" /></p><p>可以发现当前代码是Release模式。</p><p>那么怎么变成<strong>Debug</strong>模式呢？</p><ol><li>修改<strong>default</strong>配置文件，将<code>build_type=Release</code>改为<code>build_type=Debug</code></li><li>修改<strong><a href="http://build.sh">build.sh</a></strong>文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">conan install . --output-folder=build --build missing</span><br><span class="line"></span><br><span class="line">cd build</span><br><span class="line"></span><br><span class="line">cmake .. -G &quot;Unix Makefiles&quot; -DCMAKE_TOOLCHAIN_FILE=&quot;conan_toolchain.cmake&quot; -DCMAKE_BUILD_TYPE=Debug</span><br><span class="line"></span><br><span class="line">cmake --build . --config Debug</span><br><span class="line"></span><br><span class="line">cd ../bin</span><br><span class="line"> </span><br><span class="line">./json_cpp</span><br></pre></td></tr></table></figure><h3 id="conanfilepy"><a class="markdownIt-Anchor" href="#conanfilepy"></a> <a href="http://conanfile.py">conanfile.py</a></h3><p>下面的<strong><a href="http://conanfile.py">conanfile.py</a></strong>可以完全替换上一小节中的<strong>conanfile.txt</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> conan <span class="keyword">import</span> ConanFile</span><br><span class="line"><span class="keyword">from</span> conan.tools.files <span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyConanFile</span>(<span class="title class_ inherited__">ConanFile</span>):</span><br><span class="line">    settings = <span class="string">&quot;os&quot;</span>, <span class="string">&quot;compiler&quot;</span>, <span class="string">&quot;build_type&quot;</span>, <span class="string">&quot;arch&quot;</span></span><br><span class="line">    generators = <span class="string">&quot;CMakeToolchain&quot;</span>, <span class="string">&quot;CMakeDeps&quot;</span></span><br><span class="line"></span><br><span class="line">    options = &#123;</span><br><span class="line">        <span class="string">&quot;shared&quot;</span>: [<span class="literal">True</span>, <span class="literal">False</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    default_options = &#123;</span><br><span class="line">        <span class="string">&quot;shared&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">requirements</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.requires(<span class="string">&quot;jsoncpp/1.9.5&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.options.shared:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 复制动态链接库(windows)</span></span><br><span class="line">        <span class="keyword">for</span> dep <span class="keyword">in</span> <span class="variable language_">self</span>.dependencies.values():</span><br><span class="line">            <span class="keyword">for</span> depDll <span class="keyword">in</span> dep.cpp_info.binaries:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>,depDll)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">                copy(<span class="variable language_">self</span>,<span class="string">&quot;*.dll&quot;</span>,depDll,os.path.join(<span class="variable language_">self</span>.source_folder,<span class="string">&quot;bin&quot;</span>))</span><br></pre></td></tr></table></figure><p>并且可以在<code>conan install . --output-folder=build --build missing</code>后面指定<code>-o jsoncpp*:shared=True</code>生成动态库。</p><div class="tip warning"><p>conanfile.py和conanfile.txt不能同时存在，否则会发生冲突。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;conan&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#conan&quot;&gt;&lt;/a&gt; conan&lt;/h2&gt;
&lt;h3 id=&quot;什么是conan&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是conan&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="conan" scheme="https://www.yuanyuan.blog/tags/conan/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ:5.异地容灾</title>
    <link href="https://www.yuanyuan.blog/posts/3b77087f.html"/>
    <id>https://www.yuanyuan.blog/posts/3b77087f.html</id>
    <published>2024-08-30T20:39:51.000Z</published>
    <updated>2025-02-22T12:17:28.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="federation插件"><a class="markdownIt-Anchor" href="#federation插件"></a> Federation插件</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p>Federation插件的设计目标是使RabbitMQ在不同的Broker节点之间进行消息传递而无须建立集群。</p><p>它可以在不同的管理域中的Broker或集群间传递消息，这些管理域可能设置了不同的用户和vhost，也可能运行在不同版本的RabbitMQ和Erlang上。Federation基于AMQP 0-9-1协议在不同的Broker之间进行通信，并且设计成能够容忍不稳定的网络连接情况。</p><h3 id="federation交换机"><a class="markdownIt-Anchor" href="#federation交换机"></a> Federation交换机</h3><h4 id="总体说明"><a class="markdownIt-Anchor" href="#总体说明"></a> 总体说明</h4><ul><li>各节点操作：启用联邦插件</li><li>下游操作：<ul><li>添加上游连接端点</li><li>创建控制策略</li></ul></li></ul><h4 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h4><p>为了执行相关测试，我们使用Docker创建两个RabbitMQ实例。</p><p><span style="color:blue;"><strong>特别提示</strong></span>：由于Federation机制的最大特点就是跨集群同步数据，所以这两个Docker容器中的RabbitMQ实例不加入集群！！！是两个<span style="color:blue;"><strong>独立的broker实例</strong></span>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name rabbitmq-shenzhen \</span><br><span class="line">-p 51000:5672 \</span><br><span class="line">-p 52000:15672 \</span><br><span class="line">-v rabbitmq-plugin:/plugins \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=guest \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=123456 \</span><br><span class="line">rabbitmq:3.13-management</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">--name rabbitmq-shanghai \</span><br><span class="line">-p 61000:5672 \</span><br><span class="line">-p 62000:15672 \</span><br><span class="line">-v rabbitmq-plugin:/plugins \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=guest \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=123456 \</span><br><span class="line">rabbitmq:3.13-management</span><br></pre></td></tr></table></figure><h4 id="启用联邦插件"><a class="markdownIt-Anchor" href="#启用联邦插件"></a> 启用联邦插件</h4><p>在上游、下游节点中都需要开启。</p><p>Docker容器中的RabbitMQ已经开启了rabbitmq_federation，还需要开启rabbitmq_federation_management</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it rabbitmq-shenzhen /bin/bash</span><br><span class="line">rabbitmq-plugins enable rabbitmq_federation_management</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出 <span class="built_in">exit</span></span></span><br><span class="line">docker exec -it rabbitmq-shanghai /bin/bash</span><br><span class="line">rabbitmq-plugins enable rabbitmq_federation_management</span><br></pre></td></tr></table></figure><p>rabbitmq_federation_management插件启用后会在Management UI的Admin选项卡下看到：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830204041.png" alt="image-20240425152627455" /></p><h4 id="添加上游连接端点"><a class="markdownIt-Anchor" href="#添加上游连接端点"></a> 添加上游连接端点</h4><p>在下游节点填写上游节点的连接信息：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830204101.png" alt="image-20240425164430500" /></p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830211218.png" alt="image-20240830211218319" style="zoom:80%;" /><h4 id="创建控制策略"><a class="markdownIt-Anchor" href="#创建控制策略"></a> 创建控制策略</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830204126.png" alt="image-20240425164648385" /></p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830210334.png" alt="image-20240830210334039" style="zoom:80%;" /><h4 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h4><ol><li>测试计划</li></ol><p><span style="color:blue;"><strong>特别提示</strong></span>：</p><ul><li>普通交换机和联邦交换机名称要一致</li><li>交换机名称要能够和策略正则表达式匹配上</li><li>发送消息时，两边使用的路由键也要一致</li><li>队列名称不要求一致</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830204145.png" alt="image-20240425170044297" /></p><ol start="2"><li>创建组件</li></ol><table><thead><tr><th>所在机房</th><th>交换机名称</th><th>路由键</th><th>队列名称</th></tr></thead><tbody><tr><td>深圳机房（上游）</td><td>federated.exchange.demo</td><td>routing.key.demo.test</td><td>queue.normal.shenzhen</td></tr><tr><td>上海机房（下游）</td><td>federated.exchange.demo</td><td>routing.key.demo.test</td><td>queue.normal.shanghai</td></tr></tbody></table><p>创建组件后可以查看一下联邦状态，连接成功的联邦状态如下：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830211302.png" alt="image-20240830211302253" style="zoom:80%;" /><ol start="3"><li>发布消息执行测试</li></ol><p>在上游节点(52000端口)向交换机发布消息：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830211454.png" alt="image-20240830211453901" style="zoom:67%;" /><p>看到下游节点接收到了消息：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830211521.png" alt="image-20240830211521048" style="zoom:67%;" /><h3 id="federation队列"><a class="markdownIt-Anchor" href="#federation队列"></a> Federation队列</h3><h4 id="总体说明-2"><a class="markdownIt-Anchor" href="#总体说明-2"></a> 总体说明</h4><p>Federation队列和Federation交换机的最核心区别就是：</p><ul><li>Federation Police作用在交换机上，就是Federation交换机</li><li>Federation Police作用在队列上，就是Federation队列</li></ul><h4 id="创建控制策略-2"><a class="markdownIt-Anchor" href="#创建控制策略-2"></a> 创建控制策略</h4><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830211818.png" alt="image-20240830211818281" style="zoom:67%;" /><h4 id="测试-2"><a class="markdownIt-Anchor" href="#测试-2"></a> 测试</h4><ol><li>测试计划</li></ol><p>上游节点和下游节点中队列名称是相同的，只是下游队列中的节点附加了联邦策略而已</p><table><thead><tr><th>所在机房</th><th>交换机</th><th>路由键</th><th>队列</th></tr></thead><tbody><tr><td>深圳机房（上游）</td><td>exchange.normal.shenzhen</td><td>routing.key.normal.shenzhen</td><td>fed.queue.demo</td></tr><tr><td>上海机房（下游）</td><td>——</td><td>——</td><td>fed.queue.demo</td></tr></tbody></table><ol start="2"><li>创建组件</li></ol><p>上游节点都是常规操作，此处省略。重点需要关注的是下游节点的联邦队列创建时需要指定相关参数：</p><p>创建组件后可以查看一下联邦状态，连接成功的联邦状态如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830212130.png" alt="image-20240830212130397" /></p><ol start="3"><li>执行测试</li></ol><p>在上游节点向交换机发布消息：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830212151.png" alt="image-20240425172625339" /></p><p>但此时发现下游节点中联邦队列并没有接收到消息，这是为什么呢？这里就体现出了联邦队列和联邦交换机工作逻辑的区别。</p><p>对联邦队列来说，如果没有监听联邦队列的消费端程序，它是不会到上游去拉取消息的！</p><p>如果有消费端监听联邦队列，那么首先消费联邦队列自身的消息；如果联邦队列为空，<span style="color:blue;"><strong>这时候才</strong></span>会到上游队列节点中拉取消息。</p><p>所以现在的测试效果需要消费端程序配合才能看到：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830212223.png" alt="image-20240830212222879" /></p><h2 id="shovel"><a class="markdownIt-Anchor" href="#shovel"></a> Shovel</h2><h3 id="启用shovel插件"><a class="markdownIt-Anchor" href="#启用shovel插件"></a> 启用Shovel插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_shovel</span><br><span class="line">rabbitmq-plugins enable rabbitmq_shovel_management</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830212253.png" alt="image-20240425184237327" /></p><h3 id="配置shovel"><a class="markdownIt-Anchor" href="#配置shovel"></a> 配置Shovel</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830212257.png" alt="image-20240425185107197" /></p><h3 id="测试-3"><a class="markdownIt-Anchor" href="#测试-3"></a> 测试</h3><h4 id="测试计划"><a class="markdownIt-Anchor" href="#测试计划"></a> 测试计划</h4><table><thead><tr><th>节点</th><th>交换机</th><th>路由键</th><th>队列</th></tr></thead><tbody><tr><td>深圳节点</td><td>exchange.shovel.test</td><td>exchange.shovel.test</td><td>queue.shovel.demo.shenzhen</td></tr><tr><td>上海节点</td><td>——</td><td>——</td><td>queue.shovel.demo.shanghai</td></tr></tbody></table><h4 id="测试效果"><a class="markdownIt-Anchor" href="#测试效果"></a> 测试效果</h4><ol><li>发布消息</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830212301.png" alt="image-20240425185349525" /></p><ol start="2"><li>源节点</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830212307.png" alt="image-20240425185519801" /></p><ol start="3"><li>目标节点</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830212304.png" alt="image-20240425185729887" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;federation插件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#federation插件&quot;&gt;&lt;/a&gt; Federation插件&lt;/h2&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href</summary>
      
    
    
    
    <category term="中间件" scheme="https://www.yuanyuan.blog/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="RabbitMQ" scheme="https://www.yuanyuan.blog/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ:4.集群</title>
    <link href="https://www.yuanyuan.blog/posts/df232ff4.html"/>
    <id>https://www.yuanyuan.blog/posts/df232ff4.html</id>
    <published>2024-08-29T18:19:01.000Z</published>
    <updated>2025-02-22T12:17:28.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集群搭建"><a class="markdownIt-Anchor" href="#集群搭建"></a> 集群搭建</h2><h3 id="安装rabbitmq"><a class="markdownIt-Anchor" href="#安装rabbitmq"></a> 安装RabbitMQ</h3><h4 id="前置要求"><a class="markdownIt-Anchor" href="#前置要求"></a> 前置要求</h4><p>CentOS发行版的版本≥CentOS 8 Stream</p><p>镜像下载地址：<a href="https://mirrors.163.com/centos/8-stream/isos/x86_64/CentOS-Stream-8-20240318.0-x86_64-dvd1.iso">https://mirrors.163.com/centos/8-stream/isos/x86_64/CentOS-Stream-8-20240318.0-x86_64-dvd1.iso</a></p><p>RabbitMQ安装方式官方指南：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830191403.png" alt="image-20240325212425988" /></p><h4 id="安装erlang环境"><a class="markdownIt-Anchor" href="#安装erlang环境"></a> 安装Erlang环境</h4><ol><li>创建yum库配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/rabbitmq.repo</span><br></pre></td></tr></table></figure><ol start="2"><li>加入配置内容</li></ol><p>以下内容来自官方文档：<a href="https://www.rabbitmq.com/docs/install-rpm">https://www.rabbitmq.com/docs/install-rpm</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In /etc/yum.repos.d/rabbitmq.repo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Zero dependency Erlang RPM</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[modern-erlang]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">modern-erlang-el8</span></span><br><span class="line"><span class="comment"># uses a Cloudsmith mirror @ yum.novemberain.com in addition to its Cloudsmith upstream.</span></span><br><span class="line"><span class="comment"># Unlike Cloudsmith, the mirror does not have any traffic quotas</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://yum1.novemberain.com/erlang/el/8/$basearch</span></span><br><span class="line">        <span class="attr">https</span>:<span class="string">//yum2.novemberain.com/erlang/el/8/$basearch</span></span><br><span class="line">        <span class="attr">https</span>:<span class="string">//dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/rpm/el/8/$basearch</span></span><br><span class="line"><span class="attr">repo_gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">sslverify</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">sslcacert</span>=<span class="string">/etc/pki/tls/certs/ca-bundle.crt</span></span><br><span class="line"><span class="attr">metadata_expire</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">pkg_gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">autorefresh</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">type</span>=<span class="string">rpm-md</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[modern-erlang-noarch]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">modern-erlang-el8-noarch</span></span><br><span class="line"><span class="comment"># uses a Cloudsmith mirror @ yum.novemberain.com.</span></span><br><span class="line"><span class="comment"># Unlike Cloudsmith, it does not have any traffic quotas</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://yum1.novemberain.com/erlang/el/8/noarch</span></span><br><span class="line">        <span class="attr">https</span>:<span class="string">//yum2.novemberain.com/erlang/el/8/noarch</span></span><br><span class="line">        <span class="attr">https</span>:<span class="string">//dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/rpm/el/8/noarch</span></span><br><span class="line"><span class="attr">repo_gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key</span></span><br><span class="line">       <span class="attr">https</span>:<span class="string">//github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">sslverify</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">sslcacert</span>=<span class="string">/etc/pki/tls/certs/ca-bundle.crt</span></span><br><span class="line"><span class="attr">metadata_expire</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">pkg_gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">autorefresh</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">type</span>=<span class="string">rpm-md</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[modern-erlang-source]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">modern-erlang-el8-source</span></span><br><span class="line"><span class="comment"># uses a Cloudsmith mirror @ yum.novemberain.com.</span></span><br><span class="line"><span class="comment"># Unlike Cloudsmith, it does not have any traffic quotas</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://yum1.novemberain.com/erlang/el/8/SRPMS</span></span><br><span class="line">        <span class="attr">https</span>:<span class="string">//yum2.novemberain.com/erlang/el/8/SRPMS</span></span><br><span class="line">        <span class="attr">https</span>:<span class="string">//dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/rpm/el/8/SRPMS</span></span><br><span class="line"><span class="attr">repo_gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key</span></span><br><span class="line">       <span class="attr">https</span>:<span class="string">//github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">sslverify</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">sslcacert</span>=<span class="string">/etc/pki/tls/certs/ca-bundle.crt</span></span><br><span class="line"><span class="attr">metadata_expire</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">pkg_gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">autorefresh</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## RabbitMQ Server</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[rabbitmq-el8]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">rabbitmq-el8</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://yum2.novemberain.com/rabbitmq/el/8/$basearch</span></span><br><span class="line">        <span class="attr">https</span>:<span class="string">//yum1.novemberain.com/rabbitmq/el/8/$basearch</span></span><br><span class="line">        <span class="attr">https</span>:<span class="string">//dl.cloudsmith.io/public/rabbitmq/rabbitmq-server/rpm/el/8/$basearch</span></span><br><span class="line"><span class="attr">repo_gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># Cloudsmith&#x27;s repository key and RabbitMQ package signing key</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key</span></span><br><span class="line">       <span class="attr">https</span>:<span class="string">//github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">sslverify</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">sslcacert</span>=<span class="string">/etc/pki/tls/certs/ca-bundle.crt</span></span><br><span class="line"><span class="attr">metadata_expire</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">pkg_gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">autorefresh</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">type</span>=<span class="string">rpm-md</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[rabbitmq-el8-noarch]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">rabbitmq-el8-noarch</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://yum2.novemberain.com/rabbitmq/el/8/noarch</span></span><br><span class="line">        <span class="attr">https</span>:<span class="string">//yum1.novemberain.com/rabbitmq/el/8/noarch</span></span><br><span class="line">        <span class="attr">https</span>:<span class="string">//dl.cloudsmith.io/public/rabbitmq/rabbitmq-server/rpm/el/8/noarch</span></span><br><span class="line"><span class="attr">repo_gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># Cloudsmith&#x27;s repository key and RabbitMQ package signing key</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key</span></span><br><span class="line">       <span class="attr">https</span>:<span class="string">//github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">sslverify</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">sslcacert</span>=<span class="string">/etc/pki/tls/certs/ca-bundle.crt</span></span><br><span class="line"><span class="attr">metadata_expire</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">pkg_gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">autorefresh</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">type</span>=<span class="string">rpm-md</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[rabbitmq-el8-source]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">rabbitmq-el8-source</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://yum2.novemberain.com/rabbitmq/el/8/SRPMS</span></span><br><span class="line">        <span class="attr">https</span>:<span class="string">//yum1.novemberain.com/rabbitmq/el/8/SRPMS</span></span><br><span class="line">        <span class="attr">https</span>:<span class="string">//dl.cloudsmith.io/public/rabbitmq/rabbitmq-server/rpm/el/8/SRPMS</span></span><br><span class="line"><span class="attr">repo_gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">sslverify</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">sslcacert</span>=<span class="string">/etc/pki/tls/certs/ca-bundle.crt</span></span><br><span class="line"><span class="attr">metadata_expire</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">pkg_gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">autorefresh</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">type</span>=<span class="string">rpm-md</span></span><br></pre></td></tr></table></figure><ol start="3"><li>更新yum库</li></ol><p>–nobest表示所需安装包即使不是最佳选择也接受</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update -y --nobest</span><br></pre></td></tr></table></figure><ol start="4"><li>正式安装Erlang</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y erlang</span><br></pre></td></tr></table></figure><h4 id="安装rabbitmq-2"><a class="markdownIt-Anchor" href="#安装rabbitmq-2"></a> 安装RabbitMQ</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入GPG密钥</span></span><br><span class="line">rpm --import &#x27;https://github.com/rabbitmq/signing-keys/releases/download/3.0/rabbitmq-release-signing-key.asc&#x27;</span><br><span class="line">rpm --import &#x27;https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key&#x27;</span><br><span class="line">rpm --import &#x27;https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 RPM 包</span></span><br><span class="line">wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.13.0/rabbitmq-server-3.13.0-1.el8.noarch.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">rpm -ivh rabbitmq-server-3.13.0-1.el8.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="rabbitmq基础配置"><a class="markdownIt-Anchor" href="#rabbitmq基础配置"></a> RabbitMQ基础配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用管理界面插件</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 RabbitMQ 服务：</span></span><br><span class="line">systemctl start rabbitmq-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 RabbitMQ 服务设置为开机自动启动</span></span><br><span class="line">systemctl enable rabbitmq-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增登录账号密码</span></span><br><span class="line">rabbitmqctl add_user yuanyuan 123456</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置登录账号权限</span></span><br><span class="line">rabbitmqctl set_user_tags yuanyuan administrator</span><br><span class="line">rabbitmqctl set_permissions -p / yuanyuan &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置所有稳定功能 flag 启用</span></span><br><span class="line">rabbitmqctl enable_feature_flag all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启RabbitMQ服务生效</span></span><br><span class="line">systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure><h4 id="收尾工作"><a class="markdownIt-Anchor" href="#收尾工作"></a> 收尾工作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/yum.repos.d/rabbitmq.repo</span><br></pre></td></tr></table></figure><h3 id="克隆vmware虚拟机"><a class="markdownIt-Anchor" href="#克隆vmware虚拟机"></a> 克隆VMWare虚拟机</h3><h4 id="目标"><a class="markdownIt-Anchor" href="#目标"></a> 目标</h4><p>通过克隆操作，一共准备三台VMWare虚拟机</p><table><thead><tr><th>集群节点名称</th><th>虚拟机 IP 地址</th></tr></thead><tbody><tr><td>node01</td><td>192.168.200.100</td></tr><tr><td>node02</td><td>192.168.200.150</td></tr><tr><td>node03</td><td>192.168.200.200</td></tr></tbody></table><h4 id="克隆虚拟机"><a class="markdownIt-Anchor" href="#克隆虚拟机"></a> 克隆虚拟机</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830191552.png" alt="image-20240325161211800" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830191615.png" alt="image-20240325161345886" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830191619.png" alt="image-20240325161409158" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830191626.png" alt="image-20240325161446094" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830191641.png" alt="image-20240325161659993" /></p><h4 id="给新机设置-ip-地址"><a class="markdownIt-Anchor" href="#给新机设置-ip-地址"></a> 给新机设置 IP 地址</h4><p>在CentOS 7中，可以使用<code>nmcli</code>命令行工具修改IP地址。以下是具体步骤：</p><ol><li>查看网络连接信息：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli con show</span><br></pre></td></tr></table></figure><ol start="2"><li>停止指定的网络连接（将<code>&lt;connection_name&gt;</code>替换为实际的网络连接名称）：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli con down &lt;connection_name&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改IP地址（将<code>&lt;connection_name&gt;</code>替换为实际的网络连接名称，将<code>&lt;new_ip_address&gt;</code>替换为新的IP地址，将<code>&lt;subnet_mask&gt;</code>替换为子网掩码，将<code>&lt;gateway&gt;</code>替换为网关）：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;new_ip_address&gt;/&lt;subnet_mask&gt;这里是 CIDR 表示法</span></span><br><span class="line">nmcli con mod &lt;connection_name&gt; ipv4.addresses &lt;new_ip_address&gt;/&lt;subnet_mask&gt;</span><br><span class="line">nmcli con mod &lt;connection_name&gt; ipv4.gateway &lt;gateway&gt;</span><br><span class="line">nmcli con mod &lt;connection_name&gt; ipv4.method manual</span><br></pre></td></tr></table></figure><ol start="4"><li>启动网络连接：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli con up &lt;connection_name&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>验证新的IP地址是否生效：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show</span><br></pre></td></tr></table></figure><h4 id="修改主机名称"><a class="markdownIt-Anchor" href="#修改主机名称"></a> 修改主机名称</h4><p>主机名称会被RabbitMQ作为集群中的节点名称，后面会用到，所以需要设置一下。</p><p>修改方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure><h4 id="保险措施"><a class="markdownIt-Anchor" href="#保险措施"></a> 保险措施</h4><p>为了在后续操作过程中，万一遇到操作失误，友情建议拍摄快照。</p><h3 id="集群节点彼此发现"><a class="markdownIt-Anchor" href="#集群节点彼此发现"></a> 集群节点彼此发现</h3><h4 id="node01设置"><a class="markdownIt-Anchor" href="#node01设置"></a> node01设置</h4><ol><li>设置 IP 地址到主机名称的映射</li></ol><p>修改文件/etc/hosts，追加如下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.200.100 node01</span><br><span class="line">192.168.200.150 node02</span><br><span class="line">192.168.200.200 node03</span><br></pre></td></tr></table></figure><ol start="2"><li>查看当前RabbitMQ节点的Cookie值并记录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# cat /var/lib/rabbitmq/.erlang.cookie </span><br><span class="line">NOTUPTIZIJONXDWWQPOJ # 你的可能不一样</span><br></pre></td></tr></table></figure><ol start="3"><li>重置节点应用</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><h4 id="node02设置"><a class="markdownIt-Anchor" href="#node02设置"></a> node02设置</h4><ol><li>设置 IP 地址到主机名称的映射</li></ol><p>修改文件/etc/hosts，追加如下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.200.100 node01</span><br><span class="line">192.168.200.150 node02</span><br><span class="line">192.168.200.200 node03</span><br></pre></td></tr></table></figure><ol start="2"><li>修改当前RabbitMQ节点的Cookie值</li></ol><p>node02和node03都改成和node01一样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure><ol start="3"><li>重置节点应用并加入集群</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster rabbit@node01</span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><h4 id="node03设置"><a class="markdownIt-Anchor" href="#node03设置"></a> node03设置</h4><ol><li>设置 IP 地址到主机名称的映射</li></ol><p>修改文件/etc/hosts，追加如下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.200.100 node01</span><br><span class="line">192.168.200.150 node02</span><br><span class="line">192.168.200.200 node03</span><br></pre></td></tr></table></figure><ol start="2"><li>修改当前RabbitMQ节点的Cookie值</li></ol><p>node02和node03都改成和node01一样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure><ol start="3"><li>重置节点应用并加入集群</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster rabbit@node01</span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><ol start="4"><li>查看集群状态</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830203642.png" alt="image-20240325214047841" /></p><h4 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h4><p>如有需要踢出某个节点，则按下面操作执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">被踢出的节点：</span></span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">节点1</span></span><br><span class="line">rabbitmqctl forget_cluster_node rabbit@node02</span><br></pre></td></tr></table></figure><h3 id="负载均衡management-ui"><a class="markdownIt-Anchor" href="#负载均衡management-ui"></a> 负载均衡：Management UI</h3><h4 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h4><ul><li>其实访问任何一个RabbitMQ实例的管理界面都是对集群操作，所以配置负载均衡通过统一入口访问在我们学习期间就是锦上添花</li><li>先给管理界面做负载均衡，然后方便我们在管理界面上创建交换机、队列等操作</li></ul><h4 id="安装haproxy"><a class="markdownIt-Anchor" href="#安装haproxy"></a> 安装HAProxy</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y haproxy</span><br><span class="line">haproxy -v</span><br><span class="line">systemctl start haproxy</span><br><span class="line">systemctl enable haproxy</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830203714.png" alt="image-20231205145435058" /></p><h4 id="修改配置文件"><a class="markdownIt-Anchor" href="#修改配置文件"></a> 修改配置文件</h4><p>配置文件位置：</p><blockquote><p>/etc/haproxy/haproxy.cfg</p></blockquote><p>在配置文件末尾增加如下内容：</p><blockquote><p>frontend rabbitmq_ui_frontend<br />bind 192.168.200.100:22222<br />mode http<br />default_backend rabbitmq_ui_backend</p><p>backend rabbitmq_ui_backend<br />mode http<br />balance roundrobin<br />option httpchk GET /<br />server rabbitmq_ui1 192.168.200.100:15672 check<br />server rabbitmq_ui2 192.168.200.150:15672 check<br />server rabbitmq_ui3 192.168.200.200:15672 check</p></blockquote><p>设置SELinux策略，允许HAProxy拥有权限连接任意端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsebool -P haproxy_connect_any=1</span><br></pre></td></tr></table></figure><blockquote><p>SELinux是Linux系统中的安全模块，它可以限制进程的权限以提高系统的安全性。在某些情况下，SELinux可能会阻止HAProxy绑定指定的端口，这就需要通过设置域（domain）的安全策略来解决此问题。</p><p>通过执行<code>setsebool -P haproxy_connect_any=1</code>命令，您已经为HAProxy设置了一个布尔值，允许HAProxy连接到任意端口。这样，HAProxy就可以成功绑定指定的socket，并正常工作。</p></blockquote><p>重启HAProxy：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart haproxy</span><br></pre></td></tr></table></figure><h4 id="测试效果"><a class="markdownIt-Anchor" href="#测试效果"></a> 测试效果</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830192142.png" alt="image-20231205203815753" /></p><h3 id="负载均衡核心功能"><a class="markdownIt-Anchor" href="#负载均衡核心功能"></a> 负载均衡：核心功能</h3><h4 id="增加配置"><a class="markdownIt-Anchor" href="#增加配置"></a> 增加配置</h4><blockquote><p>frontend rabbitmq_frontend<br />bind 192.168.200.100:11111<br />mode tcp<br />default_backend rabbitmq_backend</p><p>backend rabbitmq_backend<br />mode tcp<br />balance roundrobin<br />server rabbitmq1 192.168.200.100:5672 check<br />server rabbitmq2 192.168.200.150:5672 check<br />server rabbitmq3 192.168.200.200:5672 check</p></blockquote><p>重启HAProxy服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart haproxy</span><br></pre></td></tr></table></figure><h4 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h4><ol><li>创建组件</li></ol><ul><li>交换机：exchange.cluster.test</li><li>队列：queue.cluster.test</li><li>路由键：routing.key.cluster.test</li></ul><ol start="2"><li>创建生产者端程序</li></ol><p>[1]配置POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[2]主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQProducerApp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitMQProducerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[3]配置YAML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.100</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">11111</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">yuanyuan</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">CORRELATED</span> <span class="comment"># 交换机的确认</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span> <span class="comment"># 队列的确认</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">blog.yuanyuan.rabbitmq.config.MQProducerAckConfig:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><p>[4]配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ReturnedMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQProducerAckConfig</span> <span class="keyword">implements</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback, RabbitTemplate.ReturnsCallback&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="built_in">this</span>);</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;消息发送到交换机成功！数据：&quot;</span> + correlationData);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;消息发送到交换机失败！数据：&quot;</span> + correlationData + <span class="string">&quot; 原因：&quot;</span> + cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;消息主体: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(returned.getMessage().getBody()));</span><br><span class="line">        log.info(<span class="string">&quot;应答码: &quot;</span> + returned.getReplyCode());</span><br><span class="line">        log.info(<span class="string">&quot;描述：&quot;</span> + returned.getReplyText());</span><br><span class="line">        log.info(<span class="string">&quot;消息使用的交换器 exchange : &quot;</span> + returned.getExchange());</span><br><span class="line">        log.info(<span class="string">&quot;消息使用的路由键 routing : &quot;</span> + returned.getRoutingKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[5] Junit测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_CLUSTER_TEST</span> <span class="operator">=</span> <span class="string">&quot;exchange.cluster.test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY_CLUSTER_TEST</span> <span class="operator">=</span> <span class="string">&quot;routing.key.cluster.test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(EXCHANGE_CLUSTER_TEST, ROUTING_KEY_CLUSTER_TEST, <span class="string">&quot;message test cluster~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830192739.png" alt="image-20231205221122749" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830192742.png" alt="image-20231205212739539" /></p><ol start="3"><li>创建消费端程序</li></ol><p>[1]配置POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[2]主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQProducerApp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitMQProducerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[3]配置YAML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.100</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">11111</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">yuanyuan</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">blog.yuanyuan.rabbitmq.listener.MyProcessor:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><p>[4]监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &#123;&quot;queue.cluster.test&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processNormalQueueMessage</span><span class="params">(String data, Message message, Channel channel)</span> </span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费端：&quot;</span> + data);</span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[5]运行效果</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830192854.png" alt="image-20231205223533138" /></p><h3 id="镜像队列被仲裁队列取代"><a class="markdownIt-Anchor" href="#镜像队列被仲裁队列取代"></a> 镜像队列(被仲裁队列取代)</h3><h4 id="提出问题"><a class="markdownIt-Anchor" href="#提出问题"></a> 提出问题</h4><p>现在我们创建过的队列，它是属于节点1的：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830192946.png" alt="image-20231205225033524" /></p><p>现在我们停掉节点1的rabbit应用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止rabbit应用</span></span><br><span class="line">rabbitmqctl stop_app</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830192952.png" alt="image-20231205225933246" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830192955.png" alt="image-20231205231152119" /></p><p>再次发送消息：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193001.png" alt="image-20231205230041784" /></p><p>为了后续操作，再重新启动rabbit应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><h4 id="创建策略使队列镜像化"><a class="markdownIt-Anchor" href="#创建策略使队列镜像化"></a> 创建策略使队列镜像化</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830203738.png" alt="image-20231206002833874" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193011.png" alt="image-20231206002859324" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193015.png" alt="image-20231206003534880" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193020.png" alt="image-20231206003556037" /></p><h4 id="创建新的队列"><a class="markdownIt-Anchor" href="#创建新的队列"></a> 创建新的队列</h4><p><span style="color:blue;font-weight:bolder;">要求</span>：队列名称必须符合策略中指定的正则表达式</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193024.png" alt="image-20231206004507667" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193030.png" alt="image-20231206004549707" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193032.png" alt="image-20231206004648018" /></p><p>绑定交换机：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193037.png" alt="image-20231206013509788" /></p><h4 id="测试-2"><a class="markdownIt-Anchor" href="#测试-2"></a> 测试</h4><p>节点1关闭rabbit应用</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193040.png" alt="image-20231206012159111" /></p><p>然后就发现两个镜像队列自动分布到了节点2和节点3上：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193046.png" alt="image-20231206012307700" /></p><p>调整Java代码中的组件名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_CLUSTER_TEST</span> <span class="operator">=</span> <span class="string">&quot;exchange.cluster.test&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY_MIRROR_TEST</span> <span class="operator">=</span> <span class="string">&quot;routing.key.mirror.test&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_MIRROR_TEST</span> <span class="operator">=</span> <span class="string">&quot;mirror.queue.test&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193057.png" alt="image-20231206015533314" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193054.png" alt="image-20231206015618657" /></p><h2 id="仲裁队列"><a class="markdownIt-Anchor" href="#仲裁队列"></a> 仲裁队列</h2><h3 id="创建仲裁队列"><a class="markdownIt-Anchor" href="#创建仲裁队列"></a> 创建仲裁队列</h3><blockquote><p><span style="color:blue;font-weight:bolder;">说明</span>：鉴于仲裁队列的功能，肯定是需要在前面集群的基础上操作！</p></blockquote><h4 id="创建交换机"><a class="markdownIt-Anchor" href="#创建交换机"></a> 创建交换机</h4><p>和仲裁队列绑定的交换机没有特殊，我们还是创建一个direct交换机即可</p><p>交换机名称：exchange.quorum.test</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193112.png" alt="image-20231206164511238" /></p><h4 id="创建仲裁队列-2"><a class="markdownIt-Anchor" href="#创建仲裁队列-2"></a> 创建仲裁队列</h4><p>队列名称：queue.quorum.test</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193117.png" alt="image-20231206164838398" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193122.png" alt="image-20231206165113573" /></p><h4 id="绑定交换机"><a class="markdownIt-Anchor" href="#绑定交换机"></a> 绑定交换机</h4><p>路由键：routing.key.quorum.test</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193131.png" alt="image-20231206164951831" /></p><h3 id="测试仲裁队列"><a class="markdownIt-Anchor" href="#测试仲裁队列"></a> 测试仲裁队列</h3><h4 id="常规测试"><a class="markdownIt-Anchor" href="#常规测试"></a> 常规测试</h4><p>像使用经典队列一样发送消息、消费消息</p><ol><li>生产者端</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_QUORUM_TEST</span> <span class="operator">=</span> <span class="string">&quot;exchange.quorum.test&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY_QUORUM_TEST</span> <span class="operator">=</span> <span class="string">&quot;routing.key.quorum.test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessageToQuorum</span><span class="params">()</span> &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(EXCHANGE_QUORUM_TEST, ROUTING_KEY_QUORUM_TEST, <span class="string">&quot;message test quorum ~~~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193144.png" alt="image-20231206170401658" /></p><ol start="2"><li>消费者端</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_QUORUM_TEST</span> <span class="operator">=</span> <span class="string">&quot;queue.quorum.test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;QUEUE_QUORUM_TEST&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quorumMessageProcess</span><span class="params">(String data, Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;消费端：&quot;</span> + data);</span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193151.png" alt="image-20231206170424609" /></p><h4 id="高可用测试"><a class="markdownIt-Anchor" href="#高可用测试"></a> 高可用测试</h4><ol><li>停止某个节点的rabbit应用</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止rabbit应用</span></span><br><span class="line">rabbitmqctl stop_app</span><br></pre></td></tr></table></figure><ol start="2"><li>查看仲裁队列对应的节点情况</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830193157.png" alt="image-20231206170906222" /></p><ol start="3"><li>再次发送消息</li></ol><p>收发消息仍然正常</p><h2 id="stream-queue"><a class="markdownIt-Anchor" href="#stream-queue"></a> Stream Queue</h2><div class="tip info"><p>Stream队列在目前企业实际应用非常少，真有特定场景需要使用肯定会倾向于使用Kafka，而不是RabbitMQ Stream</p></div><h3 id="启用插件"><a class="markdownIt-Anchor" href="#启用插件"></a> 启用插件</h3><blockquote><p><span style="color:blue;font-weight:bolder;">说明</span>：只有启用了Stream插件，才能使用流式队列的完整功能</p></blockquote><p>在集群每个节点中依次执行如下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用Stream插件</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_stream</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启rabbit应用</span></span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看插件状态</span></span><br><span class="line">rabbitmq-plugins list</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830202724.png" alt="image-20240326140914228" /></p><h3 id="负载均衡"><a class="markdownIt-Anchor" href="#负载均衡"></a> 负载均衡</h3><p>在文件/etc/haproxy/haproxy.cfg末尾追加：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">frontend rabbitmq_stream_frontend</span><br><span class="line">bind 192.168.200.100:33333</span><br><span class="line">mode tcp</span><br><span class="line">default_backend rabbitmq_stream_backend</span><br><span class="line"></span><br><span class="line">backend rabbitmq_stream_backend</span><br><span class="line">mode tcp</span><br><span class="line">balance roundrobin</span><br><span class="line">server rabbitmq1 192.168.200.100:5552 check</span><br><span class="line">server rabbitmq2 192.168.200.150:5552 check</span><br><span class="line">server rabbitmq3 192.168.200.200:5552 check</span><br></pre></td></tr></table></figure><h3 id="java代码"><a class="markdownIt-Anchor" href="#java代码"></a> Java代码</h3><h4 id="引入依赖"><a class="markdownIt-Anchor" href="#引入依赖"></a> 引入依赖</h4><p>Stream 专属 Java 客户端官方网址：<a href="https://github.com/rabbitmq/rabbitmq-stream-java-client">https://github.com/rabbitmq/rabbitmq-stream-java-client</a></p><p>Stream 专属 Java 客户端官方文档网址：<a href="https://rabbitmq.github.io/rabbitmq-stream-java-client/stable/htmlsingle/">https://rabbitmq.github.io/rabbitmq-stream-java-client/stable/htmlsingle/</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stream-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建stream"><a class="markdownIt-Anchor" href="#创建stream"></a> 创建Stream</h4><blockquote><p><span style="color:blue;font-weight:bolder;">说明</span>：不需要创建交换机</p></blockquote><ol><li>代码方式创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> Environment.builder()</span><br><span class="line">        .host(<span class="string">&quot;192.168.200.100&quot;</span>)</span><br><span class="line">        .port(<span class="number">33333</span>)</span><br><span class="line">        .username(<span class="string">&quot;yuanyuan&quot;</span>)</span><br><span class="line">        .password(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">environment.streamCreator().stream(<span class="string">&quot;stream.yuanyuan.test2&quot;</span>).create();</span><br><span class="line"></span><br><span class="line">environment.close();</span><br></pre></td></tr></table></figure><ol start="2"><li>ManagementUI创建</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830202834.png" alt="image-20240830202833750" /></p><h4 id="生产者端程序"><a class="markdownIt-Anchor" href="#生产者端程序"></a> 生产者端程序</h4><ol><li>内部机制说明</li></ol><p>[1]官方文档</p><blockquote><p>Internally, the <code>Environment</code> will query the broker to find out about the topology of the stream and will create or re-use a connection to publish to the leader node of the stream.</p></blockquote><p>翻译：</p><blockquote><p>在内部，Environment将查询broker以了解流的拓扑结构，并将创建或重用连接以发布到流的 leader 节点。</p></blockquote><p>[2]解析</p><ul><li>在 Environment 中封装的连接信息仅负责连接到 broker</li><li>Producer 在构建对象时会访问 broker 拉取集群中 Leader 的连接信息</li><li>将来实际访问的是集群中的 Leader 节点</li><li>Leader 的连接信息格式是：节点名称:端口号</li></ul><p>[3]配置</p><p>为了让本机的应用程序知道 Leader 节点名称对应的 IP 地址，我们需要在本地配置 hosts 文件，建立从节点名称到 IP 地址的映射关系</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830203810.png" alt="image-20240326145508656" /></p><ol start="2"><li>示例代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> Environment.builder()</span><br><span class="line">        .host(<span class="string">&quot;192.168.200.100&quot;</span>)</span><br><span class="line">        .port(<span class="number">33333</span>)</span><br><span class="line">        .username(<span class="string">&quot;yuanyuan&quot;</span>)</span><br><span class="line">        .password(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"><span class="type">Producer</span> <span class="variable">producer</span> <span class="operator">=</span> environment.producerBuilder()</span><br><span class="line">        .stream(<span class="string">&quot;stream.yuanyuan.test&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] messagePayload = <span class="string">&quot;hello rabbit stream&quot;</span>.getBytes(StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line"><span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">producer.send(</span><br><span class="line">        producer.messageBuilder().addData(messagePayload).build(),</span><br><span class="line">        confirmationStatus -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (confirmationStatus.isConfirmed()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[生产者端]the message made it to the broker&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[生产者端]the message did not make it to the broker&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">countDownLatch.await();</span><br><span class="line"></span><br><span class="line">producer.close();</span><br><span class="line"></span><br><span class="line">environment.close();</span><br></pre></td></tr></table></figure><h4 id="消费端程序"><a class="markdownIt-Anchor" href="#消费端程序"></a> 消费端程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> Environment.builder()</span><br><span class="line">        .host(<span class="string">&quot;192.168.200.100&quot;</span>)</span><br><span class="line">        .port(<span class="number">33333</span>)</span><br><span class="line">        .username(<span class="string">&quot;yuanyuan&quot;</span>)</span><br><span class="line">        .password(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">environment.consumerBuilder()</span><br><span class="line">        .stream(<span class="string">&quot;stream.yuanyuan.test&quot;</span>)</span><br><span class="line">        .name(<span class="string">&quot;stream.yuanyuan.test.consumer&quot;</span>)</span><br><span class="line">        .autoTrackingStrategy()</span><br><span class="line">        .builder()</span><br><span class="line">        .messageHandler((offset, message) -&gt; &#123;</span><br><span class="line">            <span class="type">byte</span>[] bodyAsBinary = message.getBodyAsBinary();</span><br><span class="line">            <span class="type">String</span> <span class="variable">messageContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bodyAsBinary);</span><br><span class="line">            System.out.println(<span class="string">&quot;[消费者端]messageContent = &quot;</span> + messageContent + <span class="string">&quot; Offset=&quot;</span> + offset.offset());</span><br><span class="line">        &#125;)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><h3 id="指定偏移量消费"><a class="markdownIt-Anchor" href="#指定偏移量消费"></a> 指定偏移量消费</h3><h4 id="偏移量"><a class="markdownIt-Anchor" href="#偏移量"></a> 偏移量</h4><h4 id="官方文档说明"><a class="markdownIt-Anchor" href="#官方文档说明"></a> 官方文档说明</h4><blockquote><p>The offset is the place in the stream where the consumer starts consuming from. The possible values for the offset parameter are the following:</p><ul><li>OffsetSpecification.<span style="color:blue;font-weight:bolder;">first()</span>: starting from the first available offset. If the stream has not been <a href="https://rabbitmq.github.io/rabbitmq-stream-java-client/stable/htmlsingle/#limiting-the-size-of-a-stream">truncated</a>, this means the beginning of the stream (offset 0).</li><li>OffsetSpecification.<span style="color:blue;font-weight:bolder;">last()</span>: starting from the end of the stream and returning the last <a href="https://rabbitmq.github.io/rabbitmq-stream-java-client/stable/htmlsingle/#chunk-definition">chunk</a> of messages immediately (if the stream is not empty).</li><li>OffsetSpecification.<span style="color:blue;font-weight:bolder;">next()</span>: starting from the next offset to be written. Contrary to <code>OffsetSpecification.last()</code>, consuming with <code>OffsetSpecification.next()</code> will not return anything if no-one is publishing to the stream. The broker will start sending messages to the consumer when messages are published to the stream.</li><li>OffsetSpecification.<span style="color:blue;font-weight:bolder;">offset(offset)</span>: starting from the specified offset. 0 means consuming from the beginning of the stream (first messages). The client can also specify any number, for example the offset where it left off in a previous incarnation of the application.</li><li>OffsetSpecification.<span style="color:blue;font-weight:bolder;">timestamp(timestamp)</span>: starting from the messages stored after the specified timestamp. Note consumers can receive messages published a bit before the specified timestamp. Application code can filter out those messages if necessary.</li></ul></blockquote><h4 id="指定offset消费"><a class="markdownIt-Anchor" href="#指定offset消费"></a> 指定Offset消费</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> Environment.builder()</span><br><span class="line">        .host(<span class="string">&quot;192.168.200.100&quot;</span>)</span><br><span class="line">        .port(<span class="number">33333</span>)</span><br><span class="line">        .username(<span class="string">&quot;yuanyuan&quot;</span>)</span><br><span class="line">        .password(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"><span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> environment.consumerBuilder()</span><br><span class="line">        .stream(<span class="string">&quot;stream.yuanyuan.test&quot;</span>)</span><br><span class="line">        .offset(OffsetSpecification.first())</span><br><span class="line">        .messageHandler((offset, message) -&gt; &#123;</span><br><span class="line">            <span class="type">byte</span>[] bodyAsBinary = message.getBodyAsBinary();</span><br><span class="line">            <span class="type">String</span> <span class="variable">messageContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bodyAsBinary);</span><br><span class="line">            System.out.println(<span class="string">&quot;[消费者端]messageContent = &quot;</span> + messageContent);</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">countDownLatch.await();</span><br><span class="line"></span><br><span class="line">consumer.close();</span><br></pre></td></tr></table></figure><h4 id="对比"><a class="markdownIt-Anchor" href="#对比"></a> 对比</h4><ul><li>autoTrackingStrategy 方式：始终监听Stream中的新消息</li><li>指定偏移量方式：针对指定偏移量的消息消费之后就停止</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;集群搭建&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#集群搭建&quot;&gt;&lt;/a&gt; 集群搭建&lt;/h2&gt;
&lt;h3 id=&quot;安装rabbitmq&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装rabbitmq&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="中间件" scheme="https://www.yuanyuan.blog/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="RabbitMQ" scheme="https://www.yuanyuan.blog/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ:3.进阶</title>
    <link href="https://www.yuanyuan.blog/posts/b2712ca8.html"/>
    <id>https://www.yuanyuan.blog/posts/b2712ca8.html</id>
    <published>2024-08-29T18:08:56.000Z</published>
    <updated>2025-02-22T12:17:28.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整合springboot"><a class="markdownIt-Anchor" href="#整合springboot"></a> 整合SpringBoot</h2><h3 id="消费者工程"><a class="markdownIt-Anchor" href="#消费者工程"></a> 消费者工程</h3><h4 id="创建module"><a class="markdownIt-Anchor" href="#创建module"></a> 创建module</h4><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829182645.png" alt="image-20240829182645356" style="zoom:50%;" /><h4 id="配置pomxml"><a class="markdownIt-Anchor" href="#配置pomxml"></a> 配置pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="applicationyml"><a class="markdownIt-Anchor" href="#applicationyml"></a> application.yml</h4><p>增加RabbitMQ连接和日志打印的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">blog.yuanyuan.rabbitmq.listener.MyMessageListener:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><h4 id="主启动类"><a class="markdownIt-Anchor" href="#主启动类"></a> 主启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConsumerApp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitMQConsumerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="监听器"><a class="markdownIt-Anchor" href="#监听器"></a> 监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_DIRECT</span> <span class="operator">=</span> <span class="string">&quot;exchange.direct.order&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;order&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;queue.order&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写法1：监听+在RabbitMQ服务器上创建交换机和队列</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = QUEUE_NAME, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = EXCHANGE_DIRECT),</span></span><br><span class="line"><span class="meta">            key = &#123;ROUTING_KEY&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String dateString,</span></span><br><span class="line"><span class="params">                               Message message,</span></span><br><span class="line"><span class="params">                               Channel channel)</span> &#123;</span><br><span class="line">        log.info(dateString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写法2：监听</span></span><br><span class="line"><span class="comment">//    @RabbitListener(queues = &#123;QUEUE_NAME&#125;)</span></span><br><span class="line"><span class="comment">//    public void processMessage2(String dateString, Message message, Channel channel) &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;消费者接收到的消息：&quot; + dateString);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rabbitlistener注解属性对比"><a class="markdownIt-Anchor" href="#rabbitlistener注解属性对比"></a> @RabbitListener注解属性对比</h3><h4 id="bindings属性"><a class="markdownIt-Anchor" href="#bindings属性"></a> bindings属性</h4><ul><li>表面作用：<ul><li>指定交换机和队列之间的绑定关系</li><li>指定当前方法要监听的队列</li></ul></li><li>隐藏效果：如果RabbitMQ服务器上没有这里指定的交换机和队列，那么框架底层的代码会创建它们</li></ul><h4 id="queues属性"><a class="markdownIt-Anchor" href="#queues属性"></a> queues属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &#123;QUEUE_YUANYUAN&#125;)</span></span><br></pre></td></tr></table></figure><ul><li>作用：指定当前方法要监听的队列</li><li><span style="color:blue;font-weight:bolder;">注意</span>：此时框架不会创建相关交换机和队列，必须提前创建好</li></ul><h3 id="生产者工程"><a class="markdownIt-Anchor" href="#生产者工程"></a> 生产者工程</h3><h4 id="创建module-2"><a class="markdownIt-Anchor" href="#创建module-2"></a> 创建module</h4><h4 id="配置pomxml-2"><a class="markdownIt-Anchor" href="#配置pomxml-2"></a> 配置pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="applicationyml-2"><a class="markdownIt-Anchor" href="#applicationyml-2"></a> application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h4 id="主启动类-2"><a class="markdownIt-Anchor" href="#主启动类-2"></a> 主启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQProducerApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitMQProducerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试程序"><a class="markdownIt-Anchor" href="#测试程序"></a> 测试程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_DIRECT</span> <span class="operator">=</span> <span class="string">&quot;exchange.direct.order&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;order&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">                EXCHANGE_DIRECT,</span><br><span class="line">                ROUTING_KEY,</span><br><span class="line">                <span class="string">&quot;Hello SpringBoot RabbitMQ!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行测试"><a class="markdownIt-Anchor" href="#运行测试"></a> 运行测试</h4><p>先运行Consumer的SpringBoot程序，再运行测试程序生产消息：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829185059.png" alt="image-20240829185058873" /></p><h2 id="消息可靠性投递"><a class="markdownIt-Anchor" href="#消息可靠性投递"></a> 消息可靠性投递</h2><p>在消息传送过程中，可能会出现各种故障：</p><p>故障情况1：消息没有发送到消息队列</p><ul><li>解决思路A：在生产者端进行确认，具体操作中我们会分别针对交换机和队列来确认，如果没有成功发送到消息队列服务器上，那就可以尝试重新发送</li><li>解决思路B：为目标交换机指定备份交换机，当目标交换机投递失败时，把消息投递至备份交换机</li></ul><p>故障情况2：消息队列服务器宕机导致内存中消息丢失</p><ul><li>解决思路：消息持久化到硬盘上，哪怕服务器重启也不会导致消息丢失</li></ul><p>故障情况3：消费端宕机或抛异常导致消息没有成功被消费</p><ul><li>消费端消费消息成功，给服务器返回ACK信息，然后消息队列删除该消息</li><li>消费端消费消息失败，给服务器端返回NACK信息，同时把消息恢复为待消费的状态，这样就可以再次取回消息，重试一次（当然，这就需要消费端接口支持幂等性）</li></ul><h2 id="生产者端消息确认机制"><a class="markdownIt-Anchor" href="#生产者端消息确认机制"></a> 生产者端消息确认机制</h2><h3 id="创建module-3"><a class="markdownIt-Anchor" href="#创建module-3"></a> 创建module</h3><h3 id="搭建环境"><a class="markdownIt-Anchor" href="#搭建环境"></a> 搭建环境</h3><h4 id="配置pom"><a class="markdownIt-Anchor" href="#配置pom"></a> 配置POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="主启动类-3"><a class="markdownIt-Anchor" href="#主启动类-3"></a> 主启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQProducerApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitMQProducerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="yaml"><a class="markdownIt-Anchor" href="#yaml"></a> YAML</h4><p><span style="color:blue;font-weight:bold;">注意</span>：publisher-confirm-type和publisher-returns是两个必须要增加的配置，如果没有则本节功能不生效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">CORRELATED</span> <span class="comment"># 交换机的确认</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span> <span class="comment"># 队列的确认</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">blog.yuanyuan.rabbitmq.config.MQProducerAckConfig:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><h3 id="创建配置类"><a class="markdownIt-Anchor" href="#创建配置类"></a> 创建配置类</h3><h4 id="目标"><a class="markdownIt-Anchor" href="#目标"></a> 目标</h4><p>在这里我们为什么要创建这个配置类呢？首先，我们需要声明回调函数来接收RabbitMQ服务器返回的确认信息：</p><table><thead><tr><th>方法名</th><th>方法功能</th><th>所属接口</th><th>接口所属类</th></tr></thead><tbody><tr><td>confirm()</td><td>确认消息是否发送到交换机</td><td>ConfirmCallback</td><td>RabbitTemplate</td></tr><tr><td>returnedMessage()</td><td>确认消息是否发送到队列</td><td>ReturnsCallback</td><td>RabbitTemplate</td></tr></tbody></table><p>然后，就是对RabbitTemplate的功能进行增强，因为回调函数所在对象必须设置到RabbitTemplate对象中才能生效。</p><p>原本RabbitTemplate对象并没有生产者端消息确认的功能，要给它设置对应的组件才可以。</p><p>而设置对应的组件，需要调用RabbitTemplate对象下面两个方法：</p><table><thead><tr><th>设置组件调用的方法</th><th>所需对象类型</th></tr></thead><tbody><tr><td>setConfirmCallback()</td><td>ConfirmCallback接口类型</td></tr><tr><td>setReturnCallback()</td><td>ReturnCallback接口类型</td></tr></tbody></table><h4 id="api说明"><a class="markdownIt-Anchor" href="#api说明"></a> API说明</h4><ol><li>ConfirmCallback接口</li></ol><p>这是RabbitTemplate内部的一个接口，源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A callback for publisher confirmations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConfirmCallback</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Confirmation callback.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> correlationData correlation data for the callback.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ack true for ack, false for nack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cause An optional cause, for nack, when available, otherwise null.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(<span class="meta">@Nullable</span> CorrelationData correlationData, <span class="type">boolean</span> ack, <span class="meta">@Nullable</span> String cause)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者端发送消息之后，回调confirm()方法</p><ul><li>ack参数值为true：表示消息成功发送到了交换机</li><li>ack参数值为false：表示消息没有发送到交换机</li></ul><ol start="2"><li>ReturnCallback接口</li></ol><p>同样也RabbitTemplate内部的一个接口，源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A callback for returned messages.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReturnsCallback</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returned message callback.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> returned the returned message and metadata.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returned)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:blue;font-weight:bold;">注意</span>：接口中的returnedMessage()方法<span style="color:blue;font-weight:bold;font-size:25px;">仅</span>在消息<span style="color:blue;font-weight:bold;font-size:25px;">没有</span>发送到队列时调用</p><p>ReturnedMessage类中主要属性含义如下：</p><table><thead><tr><th>属性名</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>message</td><td>org.springframework.amqp.core.Message</td><td>消息以及消息相关数据</td></tr><tr><td>replyCode</td><td>int</td><td>应答码，类似于HTTP响应状态码</td></tr><tr><td>replyText</td><td>String</td><td>应答码说明</td></tr><tr><td>exchange</td><td>String</td><td>交换机名称</td></tr><tr><td>routingKey</td><td>String</td><td>路由键名称</td></tr></tbody></table><h4 id="配置类代码"><a class="markdownIt-Anchor" href="#配置类代码"></a> 配置类代码</h4><ol><li>要点1</li></ol><p>加@Component注解，加入IOC容器</p><ol start="2"><li>要点2</li></ol><p>配置类自身实现ConfirmCallback、ReturnCallback这两个接口，然后通过this指针把配置类的对象设置到RabbitTemplate对象中。</p><p>操作封装到了一个专门的void init()方法中。</p><p>为了保证这个void init()方法在应用启动时被调用，我们使用@PostConstruct注解来修饰这个方法。</p><p>关于@PostConstruct注解大家可以参照以下说明：</p><blockquote><p>@PostConstruct注解是<span style="color:blue;font-weight:bolder;">Java中的一个标准注解</span>，它用于指定在<span style="color:blue;font-weight:bolder;">对象创建之后立即执行</span>的方法。当使用依赖注入（如Spring框架）或者其他方式创建对象时，@PostConstruct注解可以确保在对象完全初始化之后，执行相应的方法。</p><p>使用@PostConstruct注解的方法必须满足以下条件：</p><ol><li><span style="color:blue;font-weight:bolder;">方法不能有任何参数</span>。</li><li><span style="color:blue;font-weight:bolder;">方法必须是非静态的</span>。</li><li><span style="color:blue;font-weight:bolder;">方法不能返回任何值</span>。</li></ol><p>当容器实例化一个带有@PostConstruct注解的Bean时，它会在<span style="color:blue;font-weight:bolder;">调用构造函数之后</span>，并在<span style="color:blue;font-weight:bolder;">依赖注入完成之前</span>调用被@PostConstruct注解标记的方法。这样，我们可以在该方法中进行一些初始化操作，比如读取配置文件、建立数据库连接等。</p></blockquote><ol start="3"><li>代码</li></ol><p>有了以上说明，下面我们就可以展示配置类的整体代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ReturnedMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQProducerAckConfig</span> <span class="keyword">implements</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback, RabbitTemplate.ReturnsCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="built_in">this</span>);</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;消息发送到交换机成功！数据：&#123;&#125;&quot;</span>, correlationData);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;消息发送到交换机失败！数据：&#123;&#125; 原因：&#123;&#125;&quot;</span>, correlationData, cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;消息主体: &#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(returned.getMessage().getBody()));</span><br><span class="line">        log.info(<span class="string">&quot;应答码: &#123;&#125;&quot;</span>, returned.getReplyCode());</span><br><span class="line">        log.info(<span class="string">&quot;描述：&#123;&#125;&quot;</span>, returned.getReplyText());</span><br><span class="line">        log.info(<span class="string">&quot;消息使用的交换器 exchange : &#123;&#125;&quot;</span>, returned.getExchange());</span><br><span class="line">        log.info(<span class="string">&quot;消息使用的路由键 routing : &#123;&#125;&quot;</span>, returned.getRoutingKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送消息"><a class="markdownIt-Anchor" href="#发送消息"></a> 发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_DIRECT</span> <span class="operator">=</span> <span class="string">&quot;exchange.direct.order&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;order&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">                EXCHANGE_DIRECT,</span><br><span class="line">                ROUTING_KEY,</span><br><span class="line">                <span class="string">&quot;Message Test Confirm RabbitMQ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过调整代码，测试如下三种情况：</p><ul><li>交换机正确、路由键正确</li><li>交换机正确、路由键不正确，无法发送到队列</li><li>交换机不正确，无法发送到交换机</li></ul><h3 id="运行测试-2"><a class="markdownIt-Anchor" href="#运行测试-2"></a> 运行测试</h3><h4 id="成功情况"><a class="markdownIt-Anchor" href="#成功情况"></a> 成功情况</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830162040.png" alt="image-20240830162039809" /></p><h4 id="模拟失败情况"><a class="markdownIt-Anchor" href="#模拟失败情况"></a> 模拟失败情况</h4><p>情况1：没有交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFailSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            EXCHANGE_DIRECT + <span class="string">&quot;~&quot;</span>,</span><br><span class="line">            ROUTING_KEY,</span><br><span class="line">            <span class="string">&quot;Message Test Confirm RabbitMQ&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830162423.png" alt="image-20240830162423027" /></p><p>情况2：没有路由键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFailSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            EXCHANGE_DIRECT,</span><br><span class="line">            ROUTING_KEY + <span class="string">&quot;~&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Message Test Confirm RabbitMQ&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830162629.png" alt="image-20240830162629280" /></p><h2 id="备份交换机"><a class="markdownIt-Anchor" href="#备份交换机"></a> 备份交换机</h2><h3 id="备份交换机原理"><a class="markdownIt-Anchor" href="#备份交换机原理"></a> 备份交换机原理</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829190106.png" alt="image-20240829190106123" /></p><h3 id="创建备份交换机"><a class="markdownIt-Anchor" href="#创建备份交换机"></a> 创建备份交换机</h3><h4 id="创建备份交换机-2"><a class="markdownIt-Anchor" href="#创建备份交换机-2"></a> 创建备份交换机</h4><p><span style="color:blue;font-weight:bolder;">注意</span>：备份交换机<span style="color:blue;font-weight:bolder;">一定</span>要选择<span style="color:blue;font-weight:bolder;">fanout类型</span>，因为原交换机转入备份交换机时并不会指定路由键</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830163044.png" alt="image-20240830163044140" style="zoom:67%;" /><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830163451.png" alt="image-20231202183701454" /></p><h4 id="创建备份交换机要绑定的队列"><a class="markdownIt-Anchor" href="#创建备份交换机要绑定的队列"></a> 创建备份交换机要绑定的队列</h4><ol><li>创建队列</li></ol><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830163223.png" alt="image-20240830163223551" style="zoom: 67%;" /><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830163502.png" alt="image-20231202183949674" /></p><ol start="2"><li>绑定交换机</li></ol><p><span style="color:blue;font-weight:bolder;">注意</span>：这里是要和备份交换机绑定</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830163508.png" alt="image-20231203232801504" /></p><h4 id="针对备份队列创建消费端监听器"><a class="markdownIt-Anchor" href="#针对备份队列创建消费端监听器"></a> 针对备份队列创建消费端监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_DIRECT_BACKUP</span> <span class="operator">=</span> <span class="string">&quot;exchange.direct.order.backup&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME_BACKUP</span>  <span class="operator">=</span> <span class="string">&quot;queue.order.backup&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = QUEUE_NAME_BACKUP, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = EXCHANGE_DIRECT_BACKUP),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessageBackup</span><span class="params">(String dateString,</span></span><br><span class="line"><span class="params">                                 Message message,</span></span><br><span class="line"><span class="params">                                 Channel channel)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;BackUp: &quot;</span> + dateString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设定备份关系"><a class="markdownIt-Anchor" href="#设定备份关系"></a> 设定备份关系</h3><h4 id="原交换机删除"><a class="markdownIt-Anchor" href="#原交换机删除"></a> 原交换机删除</h4><p>·</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830164749.png" alt="image-20231202184840124" /></p><h4 id="重新创建原交换机"><a class="markdownIt-Anchor" href="#重新创建原交换机"></a> 重新创建原交换机</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830164756.png" alt="image-20231202185211633" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830164800.png" alt="image-20231202185342087" /></p><h4 id="原交换机重新绑定原队列"><a class="markdownIt-Anchor" href="#原交换机重新绑定原队列"></a> 原交换机重新绑定原队列</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830164808.png" alt="image-20231202190111581" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830164811.png" alt="image-20231202185955138" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830164817.png" alt="image-20231202190036520" /></p><h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3><ul><li>启动消费者端</li><li>发送消息，但是路由键不对，于是转入备份交换机</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFailSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            EXCHANGE_DIRECT,</span><br><span class="line">            ROUTING_KEY + <span class="string">&quot;~&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Message Test Backup RabbitMQ&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830164615.png" alt="image-20240830164615153" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830164650.png" alt="image-20240830164650605" /></p><h2 id="交换机和队列持久化"><a class="markdownIt-Anchor" href="#交换机和队列持久化"></a> 交换机和队列持久化</h2><h3 id="测试非持久化交换机和队列"><a class="markdownIt-Anchor" href="#测试非持久化交换机和队列"></a> 测试非持久化交换机和队列</h3><h4 id="创建非持久化交换机"><a class="markdownIt-Anchor" href="#创建非持久化交换机"></a> 创建非持久化交换机</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830165059.png" alt="image-20231106192621173" /></p><p>创建之后，可以在列表中看到：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830165109.png" alt="image-20231106192708597" /></p><h4 id="创建非持久化队列"><a class="markdownIt-Anchor" href="#创建非持久化队列"></a> 创建非持久化队列</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830165121.png" alt="image-20231106195216265" /></p><p>创建之后，可以在列表中看到：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830165127.png" alt="image-20231106195132627" /></p><h4 id="绑定"><a class="markdownIt-Anchor" href="#绑定"></a> 绑定</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830165133.png" alt="image-20231106195748319" /></p><h4 id="发送消息-2"><a class="markdownIt-Anchor" href="#发送消息-2"></a> 发送消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_TRANSIENT</span> <span class="operator">=</span> <span class="string">&quot;exchange.transient.user&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY_TRANSIENT</span> <span class="operator">=</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessageTransient</span><span class="params">()</span> &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            EXCHANGE_TRANSIENT,</span><br><span class="line">            ROUTING_KEY_TRANSIENT,</span><br><span class="line">            <span class="string">&quot;Hello transient user~~~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>临时性的交换机和队列也能够接收消息，但如果RabbitMQ服务器重启之后会怎么样呢？</p><h4 id="重启rabbitmq服务器"><a class="markdownIt-Anchor" href="#重启rabbitmq服务器"></a> 重启RabbitMQ服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart rabbitmq</span><br></pre></td></tr></table></figure><p>重启之后，刚才临时性的交换机和队列都没了。在交换机和队列这二者中，队列是消息存储的容器，队列没了，消息就也跟着没了。</p><h3 id="持久化的交换机和队列"><a class="markdownIt-Anchor" href="#持久化的交换机和队列"></a> 持久化的交换机和队列</h3><p>我们其实不必专门创建持久化的交换机和队列，因为它们默认就是持久化的。接下来我们只需要确认一下：存放到队列中，尚未被消费端取走的消息，是否会随着RabbitMQ服务器重启而丢失？</p><h4 id="发送消息-3"><a class="markdownIt-Anchor" href="#发送消息-3"></a> 发送消息</h4><p>运行以前的发送消息方法即可，不过要关掉消费端程序</p><h4 id="重启rabbitmq服务器-2"><a class="markdownIt-Anchor" href="#重启rabbitmq服务器-2"></a> 重启RabbitMQ服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart rabbitmq</span><br></pre></td></tr></table></figure><h4 id="再次查看消息"><a class="markdownIt-Anchor" href="#再次查看消息"></a> 再次查看消息</h4><p>发现消息仍然还在</p><h3 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h3><p>在后台管理界面创建交换机和队列时，默认就是持久化的模式。</p><p>此时消息也是持久化的，不需要额外设置。</p><h2 id="消费端消息确认"><a class="markdownIt-Anchor" href="#消费端消息确认"></a> 消费端消息确认</h2><h3 id="ack"><a class="markdownIt-Anchor" href="#ack"></a> ACK</h3><p>ACK是acknowledge的缩写，表示已确认</p><h3 id="默认情况"><a class="markdownIt-Anchor" href="#默认情况"></a> 默认情况</h3><p>默认情况下，消费端取回消息后，默认会自动返回ACK确认消息，所以在前面的测试中消息被消费端消费之后，RabbitMQ得到ACK确认信息就会删除消息</p><p>但实际开发中，消费端根据消息队列投递的消息执行对应的业务，未必都能执行成功，如果希望能够多次重试，那么默认设定就不满足要求了</p><p>所以还是要修改成手动确认</p><h3 id="创建消费端module"><a class="markdownIt-Anchor" href="#创建消费端module"></a> 创建消费端module</h3><h4 id="配置pomxml-3"><a class="markdownIt-Anchor" href="#配置pomxml-3"></a> 配置pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="applicationyml-3"><a class="markdownIt-Anchor" href="#applicationyml-3"></a> application.yml</h4><p>增加针对监听器的设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment"># 把消息确认模式改为手动确认</span></span><br></pre></td></tr></table></figure><h4 id="主启动类-4"><a class="markdownIt-Anchor" href="#主启动类-4"></a> 主启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConsumerApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitMQConsumerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费端监听器"><a class="markdownIt-Anchor" href="#消费端监听器"></a> 消费端监听器</h3><h4 id="创建监听器类"><a class="markdownIt-Anchor" href="#创建监听器类"></a> 创建监听器类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_DIRECT</span> <span class="operator">=</span> <span class="string">&quot;exchange.direct.order&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;order&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span>  <span class="operator">=</span> <span class="string">&quot;queue.order&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String dataString, Message message, Channel channel)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在接收消息的方法上应用注解"><a class="markdownIt-Anchor" href="#在接收消息的方法上应用注解"></a> 在接收消息的方法上应用注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修饰监听方法</span></span><br><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">        // 设置绑定关系</span></span><br><span class="line"><span class="meta">        bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            // 配置队列信息：durable 设置为 true 表示队列持久化；autoDelete 设置为 false 表示关闭自动删除</span></span><br><span class="line"><span class="meta">            value = @Queue(value = QUEUE_NAME, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">            // 配置交换机信息：durable 设置为 true 表示队列持久化；autoDelete 设置为 false 表示关闭自动删除</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = EXCHANGE_DIRECT, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">            // 配置路由键信息</span></span><br><span class="line"><span class="meta">            key = &#123;ROUTING_KEY&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String dataString, Message message, Channel channel)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收消息方法内部逻辑"><a class="markdownIt-Anchor" href="#接收消息方法内部逻辑"></a> 接收消息方法内部逻辑</h4><ul><li>业务处理成功：手动返回ACK信息，表示消息成功消费</li><li>业务处理失败：手动返回NACK信息，表示消息消费失败。此时有两种后续操作供选择：<ul><li>把消息重新放回消息队列，RabbitMQ会重新投递这条消息，那么消费端将重新消费这条消息——从而让业务代码再执行一遍</li><li>不把消息放回消息队列，返回reject信息表示拒绝，那么这条消息的处理就到此为止</li></ul></li></ul><h4 id="相关api"><a class="markdownIt-Anchor" href="#相关api"></a> 相关API</h4><p>我们需要引入<strong>deliveryTag：交付标签机制</strong></p><p>deliveryTag是一个64位整数，消息往消费端投递时，会携带交付标签。</p><ol><li>交付标签有啥用？</li></ol><ul><li>消费端把消息处理结果ACK、NACK、Reject等返回给Broker之后，Broker需要对对应的消息执行后续操作，例如删除消息、重新排队或标记为死信等等。那么Broker就必须知道它现在要操作的消息具体是哪一条。而deliveryTag作为消息的唯一标识就很好的满足了这个需求。</li></ul><ol start="2"><li>如果交换机是Fanout模式，同一个消息广播到了不同队列，deliveryTag会重复吗？</li></ol><ul><li>不会，deliveryTag在Broker范围内唯一</li></ul><p>下面我们探讨的三个方法都是来自于com.rabbitmq.client.<span style="color:blue;font-weight:bolder;">Channel</span>接口</p><ol><li>basicAck()方法</li></ol><ul><li>方法功能：给Broker返回ACK确认信息，表示消息已经在消费端成功消费，这样Broker就可以把消息删除了</li><li>参数列表：</li></ul><table><thead><tr><th>参数名称</th><th>含义</th></tr></thead><tbody><tr><td>long deliveryTag</td><td>Broker给每一条进入队列的消息都设定一个唯一标识</td></tr><tr><td>boolean multiple</td><td>取值为true：为小于、等于deliveryTag的消息批量返回ACK信息<br/>取值为false：仅为指定的deliveryTag返回ACK信息</td></tr></tbody></table><ol start="2"><li>basicNack()方法</li></ol><ul><li>方法功能：给Broker返回NACK信息，表示消息在消费端消费失败，此时Broker的后续操作取决于参数requeue的值</li><li>参数列表：</li></ul><table><thead><tr><th>参数名称</th><th>含义</th></tr></thead><tbody><tr><td>long deliveryTag</td><td>Broker给每一条进入队列的消息都设定一个唯一标识</td></tr><tr><td>boolean multiple</td><td>取值为true：为小于、等于deliveryTag的消息批量返回ACK信息<br/>取值为false：仅为指定的deliveryTag返回ACK信息</td></tr><tr><td>boolean requeue</td><td>取值为true：Broker将消息重新放回队列，接下来会重新投递给消费端<br/>取值为false：Broker将消息标记为已消费，不会放回队列</td></tr></tbody></table><ol start="3"><li>basicReject()方法</li></ol><ul><li>方法功能：根据指定的deliveryTag，对该消息表示拒绝</li><li>参数列表：</li></ul><table><thead><tr><th>参数名称</th><th>含义</th></tr></thead><tbody><tr><td>long deliveryTag</td><td>Broker给每一条进入队列的消息都设定一个唯一标识</td></tr><tr><td>boolean requeue</td><td>取值为true：Broker将消息重新放回队列，接下来会重新投递给消费端<br/>取值为false：Broker将消息标记为已消费，不会放回队列</td></tr></tbody></table><ul><li>basicNack()和basicReject()有啥区别？<ul><li>basicNack()有批量操作</li><li>basicReject()没有批量操作</li></ul></li></ul><h4 id="完整代码示例"><a class="markdownIt-Anchor" href="#完整代码示例"></a> 完整代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_DIRECT</span> <span class="operator">=</span> <span class="string">&quot;exchange.direct.order&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;order&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;queue.order&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修饰监听方法</span></span><br><span class="line">    <span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">            // 设置绑定关系</span></span><br><span class="line"><span class="meta">            bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">                    // 配置队列信息：durable 设置为 true 表示队列持久化；autoDelete 设置为 false 表示关闭自动删除</span></span><br><span class="line"><span class="meta">                    value = @Queue(value = QUEUE_NAME, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">                    // 配置交换机信息：durable 设置为 true 表示队列持久化；autoDelete 设置为 false 表示关闭自动删除</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = EXCHANGE_DIRECT, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">                    // 配置路由键信息</span></span><br><span class="line"><span class="meta">                    key = &#123;ROUTING_KEY&#125;</span></span><br><span class="line"><span class="meta">            ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String dataString, Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、获取当前消息的 deliveryTag 值备用</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2、正常业务操作</span></span><br><span class="line">            log.info(<span class="string">&quot;消费端接收到消息内容：&quot;</span> + dataString);</span><br><span class="line">            <span class="comment">// System.out.println(10 / 0);</span></span><br><span class="line">            <span class="comment">// 3、给 RabbitMQ 服务器返回 ACK 确认信息</span></span><br><span class="line">            channel.basicAck(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 4、获取信息，看当前消息是否曾经被投递过</span></span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">redelivered</span> <span class="operator">=</span> message.getMessageProperties().getRedelivered();</span><br><span class="line">            <span class="keyword">if</span> (!redelivered) &#123;</span><br><span class="line">                <span class="comment">// 5、如果没有被投递过，那就重新放回队列，重新投递，再试一次</span></span><br><span class="line">                channel.basicNack(deliveryTag, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 6、如果已经被投递过，且这一次仍然进入了 catch 块，那么返回拒绝且不再放回队列</span></span><br><span class="line">                channel.basicReject(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="要点总结"><a class="markdownIt-Anchor" href="#要点总结"></a> 要点总结</h3><ul><li>要点1：把消息确认模式改为<span style="color:blue;font-weight:bold;">手动确认</span></li><li>要点2：调用Channel对象的方法返回信息<ul><li>ACK：Acknowledgement，表示消息处理成功</li><li>NACK：Negative Acknowledgement，表示消息处理失败</li><li>Reject：拒绝，同样表示消息处理失败</li></ul></li><li>要点3：后续操作<ul><li>requeue为true：重新放回队列，重新投递，再次尝试</li><li>requeue为false：不放回队列，不重新投递</li></ul></li><li>要点4：deliveryTag 消息的唯一标识，查找具体某一条消息的依据</li></ul><div class="tip warning"><p>消费端如果设定消息重新放回队列，Broker重新投递消息，那么消费端就可以再次消费消息，这是一种“重试”机制，这需要消费端代码支持“<span style="color:blue;font-weight:bold;">幂等性</span>”</p></div><h2 id="prefetch"><a class="markdownIt-Anchor" href="#prefetch"></a> Prefetch</h2><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><ul><li>生产者发送100个消息</li><li>对照两种情况：<ul><li>消费端没有设置prefetch参数：100个消息被全部取回</li><li>消费端设置prefetch参数为1：100个消息慢慢取回</li></ul></li></ul><h3 id="生产者端代码"><a class="markdownIt-Anchor" href="#生产者端代码"></a> 生产者端代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPrefetch</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">                EXCHANGE_DIRECT,</span><br><span class="line">                ROUTING_KEY,</span><br><span class="line">                <span class="string">&quot;Test prefetch&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830172532.png" alt="image-20240830172531876" /></p><h3 id="消费者端代码"><a class="markdownIt-Anchor" href="#消费者端代码"></a> 消费者端代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &#123;QUEUE_NAME&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessagePrefetch</span><span class="params">(String dataString, Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    log.info(<span class="string">&quot;消费端接收到消息内容：&#123;&#125;&quot;</span>, dataString);</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830173039.png" alt="image-20240830173038750" /></p><p>一次性取完，缓慢ack。</p><h3 id="测试-2"><a class="markdownIt-Anchor" href="#测试-2"></a> 测试</h3><h4 id="未使用prefetch"><a class="markdownIt-Anchor" href="#未使用prefetch"></a> 未使用prefetch</h4><ul><li>不要启动消费端程序，如果正在运行就把它停了</li><li>运行生产者端程序发送100条消息</li><li>查看队列中消息的情况：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830173118.png" alt="image-20231107155915253" /></p><ul><li><p>说明：</p><ul><li>Ready表示已经发送到队列的消息数量</li><li>Unacked表示已经发送到消费端但是消费端尚未返回ACK信息的消息数量</li><li>Total未被删除的消息总数</li></ul></li><li><p>接下来启动消费端程序，再查看队列情况：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830173122.png" alt="image-20231107160233539" /></p><ul><li>能看到消息全部被消费端取走了，正在逐个处理、确认，说明有多少消息消费端就并发处理多少</li></ul><h4 id="设定prefetch"><a class="markdownIt-Anchor" href="#设定prefetch"></a> 设定prefetch</h4><ol><li>YAML配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 设置每次最多从消息队列服务器取回多少消息</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830173329.png" alt="image-20240830173328802" /></p><p>Ready缓慢减少，一秒减少一个。</p><ol start="2"><li>测试流程</li></ol><ul><li>停止消费端程序</li><li>运行生产者端程序发送100条消息</li><li>查看队列中消息的情况：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830173149.png" alt="image-20231107160820062" /></p><ul><li>接下来启动消费端程序，持续观察队列情况：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830173434.png" alt="image-20231107160922632" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830173438.png" alt="image-20231107160936216" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830173444.png" alt="image-20231107160951639" /></p><ul><li>能看到消息不是一次性全部取回的，而是有个过程</li></ul><h2 id="消息超时"><a class="markdownIt-Anchor" href="#消息超时"></a> 消息超时</h2><p>给消息设定一个过期时间，超过这个时间没有被取走的消息就会被删除</p><p>我们可以从两个层面来给消息设定过期时间：</p><ul><li>队列层面：在队列层面设定消息的过期时间，并不是队列的过期时间。意思是这<br />个队列中的消息全部使用同一个过期时间。</li><li>消息本身：给具体的某个消息设定过期时间</li></ul><p>如果两个层面都做了设置，那么哪个时间短，哪个生效</p><h3 id="队列层面设置"><a class="markdownIt-Anchor" href="#队列层面设置"></a> 队列层面设置</h3><h4 id="设置"><a class="markdownIt-Anchor" href="#设置"></a> 设置</h4><p>创建交换机</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830173749.png" alt="image-20240830173749496" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830173855.png" alt="image-20240830173855392" style="zoom:67%;" /><p>别忘了设置绑定关系：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830174042.png" alt="image-20240830174042615" /></p><h4 id="测试-3"><a class="markdownIt-Anchor" href="#测试-3"></a> 测试</h4><ul><li>不启动消费端程序</li><li>向设置了过期时间的队列中发送100条消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_TIMEOUT</span> <span class="operator">=</span> <span class="string">&quot;exchange.test.timeout&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY_TIMEOUT</span> <span class="operator">=</span> <span class="string">&quot;routing.key.test.timeout&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTimeout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">                EXCHANGE_TIMEOUT,</span><br><span class="line">                ROUTING_KEY_TIMEOUT,</span><br><span class="line">                <span class="string">&quot;Test timeout&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>等5秒后，看是否全部被过期删除</li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830174505.png" alt="image-20240830174505189" style="zoom: 67%;" /><h3 id="消息层面设置"><a class="markdownIt-Anchor" href="#消息层面设置"></a> 消息层面设置</h3><p>删除queue-test-timeout，重新创建，只不过这次我们不设置过期时间，记得绑定交换机</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830175011.png" alt="image-20240830175011182" style="zoom:67%;" /><h4 id="设置-2"><a class="markdownIt-Anchor" href="#设置-2"></a> 设置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTimeoutQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建消息后置处理器对象</span></span><br><span class="line">    <span class="type">MessagePostProcessor</span> <span class="variable">postProcessor</span> <span class="operator">=</span> message -&gt; &#123;</span><br><span class="line">        <span class="comment">// 8000毫秒后过期</span></span><br><span class="line">        message.getMessageProperties().setExpiration(<span class="string">&quot;8000&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;;</span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            EXCHANGE_TIMEOUT, ROUTING_KEY_TIMEOUT, <span class="string">&quot;Test timeout queue&quot;</span>, postProcessor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查看效果"><a class="markdownIt-Anchor" href="#查看效果"></a> 查看效果</h4><p>这次我们是发送到普通队列上：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830175514.png" alt="image-20240830175513717" style="zoom:67%;" /><h2 id="死信"><a class="markdownIt-Anchor" href="#死信"></a> 死信</h2><h3 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h3><p>概念：当一个消息无法被消费，它就变成了死信。<br />死信产生的原因大致有下面三种：</p><ul><li>拒绝：消费者拒接消息，basicNack()/basicReject()，并且不把消息重新放入原目标队列，requeue=false</li><li>溢出：队列中消息数量到达限制。比如队列最大只能存储10条消息，且现在已经存储了10条，此时如果再发送一条消息进来，根据先进先出原则，队列中最早的消息会变成死信</li><li>超时：消息到达超时时间未被消费</li></ul><p>死信的处理方式大致有下面三种：</p><ul><li>丢弃：对不重要的消息直接丢弃，不做处理</li><li>入库：把死信写入数据库，日后处理</li><li>监听：消息变成死信后进入死信队列，我们专门设置消费端监听死信队列，做后续处理（通常采用）</li></ul><h3 id="测试相关准备"><a class="markdownIt-Anchor" href="#测试相关准备"></a> 测试相关准备</h3><h4 id="创建死信交换机和死信队列"><a class="markdownIt-Anchor" href="#创建死信交换机和死信队列"></a> 创建死信交换机和死信队列</h4><p>常规设定即可，没有特殊设置：</p><ul><li>死信交换机：exchange.dead.letter.video</li><li>死信队列：queue.dead.letter.video</li><li>死信路由键：routing.key.dead.letter.video</li></ul><h4 id="创建正常交换机和正常队列"><a class="markdownIt-Anchor" href="#创建正常交换机和正常队列"></a> 创建正常交换机和正常队列</h4><p><span style="color:blue;font-weight:bolder;">注意</span>：一定要注意正常队列有诸多限定和设置，这样才能让无法处理的消息进入死信交换机</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830180426.png" alt="image-20240318165821774" /></p><ul><li>正常交换机：exchange.normal.video</li><li>正常队列：queue.normal.video</li><li>正常路由键：routing.key.normal.video</li></ul><p>全部设置完成后参照如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830180757.png" alt="image-20240318165927279" /></p><h4 id="相关常量声明"><a class="markdownIt-Anchor" href="#相关常量声明"></a> 相关常量声明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NORMAL</span> <span class="operator">=</span> <span class="string">&quot;exchange.normal.video&quot;</span>;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_DEAD_LETTER</span> <span class="operator">=</span> <span class="string">&quot;exchange.dead.letter.video&quot;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY_NORMAL</span> <span class="operator">=</span> <span class="string">&quot;routing.key.normal.video&quot;</span>;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY_DEAD_LETTER</span> <span class="operator">=</span> <span class="string">&quot;routing.key.dead.letter.video&quot;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NORMAL</span> <span class="operator">=</span> <span class="string">&quot;queue.normal.video&quot;</span>;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_DEAD_LETTER</span> <span class="operator">=</span> <span class="string">&quot;queue.dead.letter.video&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="消费端拒收消息"><a class="markdownIt-Anchor" href="#消费端拒收消息"></a> 消费端拒收消息</h3><h4 id="发送消息的代码"><a class="markdownIt-Anchor" href="#发送消息的代码"></a> 发送消息的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessageButReject</span><span class="params">()</span> &#123;  </span><br><span class="line">    rabbitTemplate  </span><br><span class="line">            .convertAndSend(  </span><br><span class="line">                    EXCHANGE_NORMAL,  </span><br><span class="line">                    ROUTING_KEY_NORMAL,  </span><br><span class="line">                    <span class="string">&quot;测试死信情况1：消息被拒绝&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收消息的代码"><a class="markdownIt-Anchor" href="#接收消息的代码"></a> 接收消息的代码</h4><ol><li>监听正常队列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &#123;QUEUE_NORMAL&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessageNormal</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 监听正常队列，但是拒绝消息</span></span><br><span class="line">    log.info(<span class="string">&quot;★[normal]消息接收到，但我拒绝。&quot;</span>);</span><br><span class="line">    channel.basicReject(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>监听死信队列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &#123;QUEUE_DEAD_LETTER&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessageDead</span><span class="params">(String dataString, Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 监听死信队列  </span></span><br><span class="line">    log.info(<span class="string">&quot;★[dead letter]dataString = &#123;&#125;&quot;</span>, dataString);</span><br><span class="line">    log.info(<span class="string">&quot;★[dead letter]我是死信监听方法，我接收到了死信消息&quot;</span>);</span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行结果"><a class="markdownIt-Anchor" href="#执行结果"></a> 执行结果</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190532.png" alt="image-20231107170523503" /></p><h3 id="消息数量超过队列容纳极限"><a class="markdownIt-Anchor" href="#消息数量超过队列容纳极限"></a> 消息数量超过队列容纳极限</h3><h4 id="发送消息的代码-2"><a class="markdownIt-Anchor" href="#发送消息的代码-2"></a> 发送消息的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMultiMessage</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;  </span><br><span class="line">        rabbitTemplate.convertAndSend(  </span><br><span class="line">                EXCHANGE_NORMAL,  </span><br><span class="line">                ROUTING_KEY_NORMAL,  </span><br><span class="line">                <span class="string">&quot;测试死信情况2：消息数量超过队列的最大容量&quot;</span> + i);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收消息的代码-2"><a class="markdownIt-Anchor" href="#接收消息的代码-2"></a> 接收消息的代码</h4><p>消息接收代码不再拒绝消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &#123;QUEUE_NORMAL&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessageNormal</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 监听正常队列</span></span><br><span class="line">    log.info(<span class="string">&quot;★[normal]消息接收到。&quot;</span>);</span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启微服务使代码修改生效。</p><h4 id="执行效果"><a class="markdownIt-Anchor" href="#执行效果"></a> 执行效果</h4><p>正常队列的参数如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190538.png" alt="image-20231107171231765" /></p><p>生产者发送20条消息之后，消费端死信队列接收到前10条消息：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190544.png" alt="images" /></p><h3 id="消息超时未消费"><a class="markdownIt-Anchor" href="#消息超时未消费"></a> 消息超时未消费</h3><h4 id="发送消息的代码-3"><a class="markdownIt-Anchor" href="#发送消息的代码-3"></a> 发送消息的代码</h4><p>正常发送一条消息即可，所以使用第一个例子的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessageTimeout</span><span class="params">()</span> &#123;</span><br><span class="line">    rabbitTemplate</span><br><span class="line">            .convertAndSend(</span><br><span class="line">                    EXCHANGE_NORMAL,</span><br><span class="line">                    ROUTING_KEY_NORMAL,</span><br><span class="line">                    <span class="string">&quot;测试死信情况3：消息超时&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行效果-2"><a class="markdownIt-Anchor" href="#执行效果-2"></a> 执行效果</h4><p>队列参数生效：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190550.png" alt="image-20231107172002297" /></p><p>因为没有消费端监听程序，所以消息未超时前滞留在队列中：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190559.png" alt="image-20231107172234849" /></p><p>消息超时后，进入死信队列：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190604.png" alt="image-20231107172042460" /></p><h2 id="延迟插件"><a class="markdownIt-Anchor" href="#延迟插件"></a> 延迟插件</h2><h3 id="插件简介"><a class="markdownIt-Anchor" href="#插件简介"></a> 插件简介</h3><ul><li>官网地址：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange</a></li><li>延迟极限：最多两天</li></ul><h3 id="插件安装"><a class="markdownIt-Anchor" href="#插件安装"></a> 插件安装</h3><h4 id="确定卷映射目录"><a class="markdownIt-Anchor" href="#确定卷映射目录"></a> 确定卷映射目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker inspect rabbitmq | jq -r &#x27;.[0].Mounts[].Source&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">docker inspect --format=&#x27;&#123;&#123;range .Mounts&#125;&#125;&#123;&#123;.Source&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; rabbitmq</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830182101.png" alt="image-20240830182100769" /></p><h4 id="下载延迟插件"><a class="markdownIt-Anchor" href="#下载延迟插件"></a> 下载延迟插件</h4><p>官方文档说明页地址：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190804.png" alt="image-20231107180045135" /></p><p>下载插件安装文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.13.0/rabbitmq_delayed_message_exchange-3.13.0.ez</span><br><span class="line">sudo mv rabbitmq_delayed_message_exchange-3.13.0.ez /home/docker/volumes/rabbitmq-plugin/_data # 将/home/docker/volumes/rabbitmq-plugin/_data替换为你的数据卷目录</span><br></pre></td></tr></table></figure><h4 id="启用插件"><a class="markdownIt-Anchor" href="#启用插件"></a> 启用插件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录进入容器内部</span></span><br><span class="line">docker exec -it rabbitmq /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rabbitmq-plugins命令所在目录已经配置到<span class="variable">$PATH</span>环境变量中了，可以直接调用</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出Docker容器</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启Docker容器</span></span><br><span class="line">docker restart rabbitmq</span><br></pre></td></tr></table></figure><h4 id="确认"><a class="markdownIt-Anchor" href="#确认"></a> 确认</h4><p>确认点1：查看当前节点已启用插件的列表：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830182614.png" alt="image-20240830182613739" style="zoom:67%;" /><p>确认点2：如果创建新交换机时可以在type中看到x-delayed-message选项，那就说明插件安装好了</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830182640.png" alt="image-20231107181914265" /></p><h3 id="创建交换机"><a class="markdownIt-Anchor" href="#创建交换机"></a> 创建交换机</h3><p>rabbitmq_delayed_message_exchange插件在工作时要求交换机是<span style="color:blue;font-weight:bolder;">x-delayed-message</span>类型才可以，创建方式如下：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830182910.png" alt="image-20240830182910426" style="zoom:67%;" /><p>关于<span style="color:blue;font-weight:bolder;">x-delayed-type</span>参数的理解：</p><blockquote><p>原本指定交换机类型的地方使用了x-delayed-message这个值，那么这个交换机除了支持延迟消息之外，到底是direct、fanout、topic这些类型中的哪一个呢？</p><p>这里就额外使用x-delayed-type来指定交换机本身的类型</p></blockquote><p>创建队列并绑定交换机</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830183042.png" alt="image-20240830183042568" style="zoom:67%;" /><h3 id="代码测试"><a class="markdownIt-Anchor" href="#代码测试"></a> 代码测试</h3><h4 id="生产者端代码-2"><a class="markdownIt-Anchor" href="#生产者端代码-2"></a> 生产者端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_DELAY</span> <span class="operator">=</span> <span class="string">&quot;exchange.test.delay&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY_DELAY</span> <span class="operator">=</span> <span class="string">&quot;routing.key.test.delay&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDelayMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            EXCHANGE_DELAY,</span><br><span class="line">            ROUTING_KEY_DELAY,</span><br><span class="line">            <span class="string">&quot;测试基于插件的延迟消息 [&quot;</span> + <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;hh:mm:ss&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>()) + <span class="string">&quot;]&quot;</span>,</span><br><span class="line">            messageProcessor -&gt; &#123;</span><br><span class="line">                <span class="comment">// 设置延迟时间：以毫秒为单位</span></span><br><span class="line">                <span class="comment">// x-delay 参数必须基于 x-delay-message-exchange 创建才能生效</span></span><br><span class="line">                messageProcessor.getMessageProperties().setHeader(<span class="string">&quot;x-delay&quot;</span>, <span class="string">&quot;10000&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> messageProcessor;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者端代码-2"><a class="markdownIt-Anchor" href="#消费者端代码-2"></a> 消费者端代码</h4><ol><li>情况A：资源已创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_DELAY</span> <span class="operator">=</span> <span class="string">&quot;queue.test.delay&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;QUEUE_DELAY&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(String dataString, Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;[生产者]&#123;&#125;&quot;</span>, dataString);</span><br><span class="line">    log.info(<span class="string">&quot;[消费者]&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;hh:mm:ss&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>情况B：资源未创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDelayMessageListener</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_DELAY</span> <span class="operator">=</span> <span class="string">&quot;exchange.test.delay&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY_DELAY</span> <span class="operator">=</span> <span class="string">&quot;routing.key.test.delay&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_DELAY</span> <span class="operator">=</span> <span class="string">&quot;queue.test.delay&quot;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(  </span></span><br><span class="line"><span class="meta">        value = @Queue(value = QUEUE_DELAY, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),  </span></span><br><span class="line"><span class="meta">        exchange = @Exchange(  </span></span><br><span class="line"><span class="meta">                value = EXCHANGE_DELAY,   </span></span><br><span class="line"><span class="meta">                durable = &quot;true&quot;,   </span></span><br><span class="line"><span class="meta">                autoDelete = &quot;false&quot;,   </span></span><br><span class="line"><span class="meta">                type = &quot;x-delayed-message&quot;,   </span></span><br><span class="line"><span class="meta">                arguments = @Argument(name = &quot;x-delayed-type&quot;, value = &quot;direct&quot;)),  </span></span><br><span class="line"><span class="meta">        key = &#123;ROUTING_KEY_DELAY&#125;  </span></span><br><span class="line"><span class="meta">    ))</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(String dataString, Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        log.info(<span class="string">&quot;[生产者]&quot;</span> + dataString);  </span><br><span class="line">        log.info(<span class="string">&quot;[消费者]&quot;</span> + <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;hh:mm:ss&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>()));  </span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行效果-3"><a class="markdownIt-Anchor" href="#执行效果-3"></a> 执行效果</h4><ol><li>交换机类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830184258.png" alt="image-20240319171359652" /></p><ol start="2"><li>生产者端效果</li></ol><p><span style="color:blue;font-weight:bolder;">注意</span>：使用rabbitmq_delayed_message_exchange插件后，即使消息成功发送到队列上，也会导致returnedMessage()方法执行</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830184333.png" alt="image-20240830184332873" style="zoom:67%;" /><ol start="3"><li>消费者端效果</li></ol><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830184025.png" alt="image-20240830184025464" style="zoom:80%;" /><h2 id="事务消息之生产者端"><a class="markdownIt-Anchor" href="#事务消息之生产者端"></a> 事务消息之生产者端</h2><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><h4 id="新建module"><a class="markdownIt-Anchor" href="#新建module"></a> 新建module</h4><h4 id="引入依赖"><a class="markdownIt-Anchor" href="#引入依赖"></a> 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yaml配置"><a class="markdownIt-Anchor" href="#yaml配置"></a> yaml配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h4 id="主启动类-5"><a class="markdownIt-Anchor" href="#主启动类-5"></a> 主启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQProducerApp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitMQProducerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="相关配置"><a class="markdownIt-Anchor" href="#相关配置"></a> 相关配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CachingConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.transaction.RabbitTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitTransactionManager <span class="title function_">transactionManager</span><span class="params">(CachingConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RabbitTransactionManager</span>(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitTemplate <span class="title function_">rabbitTemplate</span><span class="params">(CachingConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>(connectionFactory);</span><br><span class="line">        rabbitTemplate.setChannelTransacted(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a class="markdownIt-Anchor" href="#测试代码"></a> 测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;exchange.tx.dragon&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;routing.key.tx.dragon&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessageInTx</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1、发送第一条消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(EXCHANGE_NAME, ROUTING_KEY, <span class="string">&quot;I am a dragon(tx msg ~~~01)&quot;</span>);</span><br><span class="line">        <span class="comment">// 2、抛出异常</span></span><br><span class="line">        log.info(<span class="string">&quot;do bad:&quot;</span> + <span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 3、发送第二条消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(EXCHANGE_NAME, ROUTING_KEY, <span class="string">&quot;I am a dragon(tx msg ~~~02)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行测试"><a class="markdownIt-Anchor" href="#执行测试"></a> 执行测试</h3><h4 id="未使用事务"><a class="markdownIt-Anchor" href="#未使用事务"></a> 未使用事务</h4><p>抛出异常前的消息发送了，抛异常后的消息没有发送：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830184937.png" alt="image-20231109131321901" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830184941.png" alt="image-20231109131413185" /></p><p>为了不影响后续操作，我们直接在管理界面这里把这条消息消费掉：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830184949.png" alt="image-20231109131520985" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830184953.png" alt="image-20231109131611991" /></p><h4 id="使用事务"><a class="markdownIt-Anchor" href="#使用事务"></a> 使用事务</h4><ol><li>说明</li></ol><p>因为在junit中给测试方法使用@Transactional注解默认就会回滚，所以回滚操作需要使用@RollBack注解操控</p><ol start="2"><li>测试提交事务的情况</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Rollback(value = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessageInTx</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1、发送第一条消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(EXCHANGE_NAME, ROUTING_KEY, <span class="string">&quot;I am a dragon(tx msg [commit] ~~~01)&quot;</span>);</span><br><span class="line">    <span class="comment">// 2、发送第二条消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(EXCHANGE_NAME, ROUTING_KEY, <span class="string">&quot;I am a dragon(tx msg [commit] ~~~02)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830185030.png" alt="image-20231109132025204" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830185038.png" alt="image-20231109132112164" /></p><ol start="3"><li>测试回滚事务的情况</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Rollback(value = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessageInTx</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1、发送第一条消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(EXCHANGE_NAME, ROUTING_KEY, <span class="string">&quot;I am a dragon(tx msg [rollback] ~~~01)&quot;</span>);</span><br><span class="line"><span class="comment">// 2、抛出异常</span></span><br><span class="line">log.info(<span class="string">&quot;do bad:&quot;</span> + <span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 3、发送第二条消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(EXCHANGE_NAME, ROUTING_KEY, <span class="string">&quot;I am a dragon(tx msg [rollback] ~~~02)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830185046.png" alt="image-20231109132312914" /></p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li>在生产者端使用事务消息和消费端没有关系</li><li>在生产者端使用事务消息仅仅是控制事务内的消息是否发送</li><li>提交事务就把事务内所有消息都发送到交换机</li><li>回滚事务则事务内任何消息都不会被发送</li></ul><div class="tip warning"><p>事务控制对消费者端无效!!!</p></div><h2 id="惰性队列"><a class="markdownIt-Anchor" href="#惰性队列"></a> 惰性队列</h2><h3 id="创建惰性队列"><a class="markdownIt-Anchor" href="#创建惰性队列"></a> 创建惰性队列</h3><h4 id="官网说明"><a class="markdownIt-Anchor" href="#官网说明"></a> 官网说明</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830185214.png" alt="image-20231110110607266" /></p><p>队列可以创建为<code>默认</code>或<code>惰性</code>模式，模式指定方式是：</p><ul><li>使用队列策略（建议）</li><li>设置<code>queue.declare</code>参数</li></ul><p>如果策略和队列参数同时指定，那么队列参数有更高优先级。如果队列模式是在声明时通过可选参数指定的，那么只能通过删除队列再重新创建来修改。</p><h4 id="基于策略方式设定"><a class="markdownIt-Anchor" href="#基于策略方式设定"></a> 基于策略方式设定</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录Docker容器</span></span><br><span class="line">docker exec -it rabbitmq /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行rabbitmqctl命令</span></span><br><span class="line">rabbitmqctl set_policy Lazy &quot;^lazy-queue$&quot; &#x27;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#x27; --apply-to queues</span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li><p>rabbitmqctl命令所在目录是：/opt/rabbitmq/sbin，该目录已配置到Path环境变量</p></li><li><p>set_policy是子命令，表示设置策略</p></li><li><p>Lazy是当前要设置的策略名称，是我们自己自定义的，不是系统定义的</p></li><li><p>&quot;^lazy-queue$&quot;是用正则表达式限定的队列名称，凡是名称符合这个正则表达式的队列都会应用这里的设置</p></li><li><p>'{“queue-mode”:“lazy”}'是一个JSON格式的参数设置指定了队列的模式为&quot;lazy&quot;</p></li><li><p>–-apply-to参数指定该策略将应用于队列（queues）级别</p></li><li><p>命令执行后，所有名称符合正则表达式的队列都会应用指定策略，包括未来新创建的队列</p></li></ul><p>如果需要修改队列模式可以执行如下命令（不必删除队列再重建）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_policy Lazy &quot;^lazy-queue$&quot; &#x27;&#123;&quot;queue-mode&quot;:&quot;default&quot;&#125;&#x27; --apply-to queues</span><br></pre></td></tr></table></figure><h4 id="在声明队列时使用参数设定"><a class="markdownIt-Anchor" href="#在声明队列时使用参数设定"></a> 在声明队列时使用参数设定</h4><ul><li>参数名称：x-queue-mode</li><li>可用参数值：<ul><li>default</li><li>lazy</li></ul></li><li>不设置就是取值为default</li></ul><p>Java代码原生API设置方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">args.put(<span class="string">&quot;x-queue-mode&quot;</span>, <span class="string">&quot;lazy&quot;</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;myqueue&quot;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br></pre></td></tr></table></figure><p>Java代码注解设置方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Queue(value = QUEUE_NAME, durable = &quot;true&quot;, autoDelete = &quot;false&quot;, arguments = &#123;</span></span><br><span class="line"><span class="meta">@Argument(name = &quot;x-queue-mode&quot;, value = &quot;lazy&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="实操演练"><a class="markdownIt-Anchor" href="#实操演练"></a> 实操演练</h3><h4 id="生产者端代码-3"><a class="markdownIt-Anchor" href="#生产者端代码-3"></a> 生产者端代码</h4><ol><li>配置POM</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置YAML</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>主启动类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQLazyProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitMQLazyProducer.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>发送消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_LAZY_NAME</span> <span class="operator">=</span> <span class="string">&quot;exchange.test.lazy&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_LAZY_KEY</span> <span class="operator">=</span> <span class="string">&quot;routing.key.test.lazy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(EXCHANGE_LAZY_NAME, ROUTING_LAZY_KEY, <span class="string">&quot;I am a message for test lazy queue.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者端代码-3"><a class="markdownIt-Anchor" href="#消费者端代码-3"></a> 消费者端代码</h4><ol><li>配置POM</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置YAML</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>主启动类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQLazyConsumerApp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitMQLazyConsumerApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>监听器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLazyMessageProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_LAZY_NAME</span> <span class="operator">=</span> <span class="string">&quot;exchange.test.lazy&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_LAZY_KEY</span> <span class="operator">=</span> <span class="string">&quot;routing.key.test.lazy&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_LAZY_NAME</span> <span class="operator">=</span> <span class="string">&quot;queue.test.lazy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = QUEUE_LAZY_NAME, durable = &quot;true&quot;, autoDelete = &quot;false&quot;, arguments = &#123;</span></span><br><span class="line"><span class="meta">            @Argument(name = &quot;x-queue-mode&quot;, value = &quot;lazy&quot;)</span></span><br><span class="line"><span class="meta">        &#125;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = EXCHANGE_LAZY_NAME, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">        key = &#123;ROUTING_LAZY_KEY&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessageLazy</span><span class="params">(String data, Message message, Channel channel)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费端接收到消息：&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-4"><a class="markdownIt-Anchor" href="#测试-4"></a> 测试</h3><ul><li><p>先启动消费端</p></li><li><p>基于消费端@RabbitListener注解中的配置，自动创建了队列</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190838.png" alt="image-20231110201151470" /></p><ul><li>发送消息</li></ul><h3 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h3><p>使用惰性队列的主要原因之一是支持非常长的队列（数百万条消息）。</p><p>由于各种原因，排队可能会变得很长：</p><ul><li>消费者离线/崩溃/停机进行维护</li><li>突然出现消息进入高峰，生产者的速度超过了消费者</li><li>消费者比正常情况慢</li></ul><h2 id="优先级队列"><a class="markdownIt-Anchor" href="#优先级队列"></a> 优先级队列</h2><h3 id="创建相关资源"><a class="markdownIt-Anchor" href="#创建相关资源"></a> 创建相关资源</h3><h4 id="创建交换机-2"><a class="markdownIt-Anchor" href="#创建交换机-2"></a> 创建交换机</h4><p>exchange.test.priority</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830185956.png" alt="image-20231110234945082" /></p><h4 id="创建队列"><a class="markdownIt-Anchor" href="#创建队列"></a> 创建队列</h4><p>queue.test.priority</p><p>x-max-priority</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190002.png" alt="image-20231110235404630" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190008.png" alt="image-20231110235707445" /></p><h4 id="队列绑定交换机"><a class="markdownIt-Anchor" href="#队列绑定交换机"></a> 队列绑定交换机</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190013.png" alt="image-20231110235749304" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190016.png" alt="image-20231110235808541" /></p><h3 id="生产者发送消息"><a class="markdownIt-Anchor" href="#生产者发送消息"></a> 生产者发送消息</h3><h4 id="配置pom-2"><a class="markdownIt-Anchor" href="#配置pom-2"></a> 配置POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置yaml"><a class="markdownIt-Anchor" href="#配置yaml"></a> 配置YAML</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h4 id="主启动类-6"><a class="markdownIt-Anchor" href="#主启动类-6"></a> 主启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQPriorityProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitMQPriorityProducer.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送消息-4"><a class="markdownIt-Anchor" href="#发送消息-4"></a> 发送消息</h4><ul><li>不要启动消费者程序，让多条不同优先级的消息滞留在队列中</li><li>第一次发送优先级为1的消息</li><li>第二次发送优先级为2的消息</li><li>第三次发送优先级为3的消息</li><li>先发送的消息优先级低，后发送的消息优先级高，将来看看消费端是不是先收到优先级高的消息</li></ul><ol><li>第一次发送优先级为1的消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_PRIORITY</span> <span class="operator">=</span> <span class="string">&quot;exchange.test.priority&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY_PRIORITY</span> <span class="operator">=</span> <span class="string">&quot;routing.key.test.priority&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(EXCHANGE_PRIORITY, ROUTING_KEY_PRIORITY, <span class="string">&quot;I am a message with priority 1.&quot;</span>, message-&gt;&#123;</span><br><span class="line">            message.getMessageProperties().setPriority(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>第二次发送优先级为2的消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(EXCHANGE_PRIORITY, ROUTING_KEY_PRIORITY, <span class="string">&quot;I am a message with priority 2.&quot;</span>, message-&gt;&#123;</span><br><span class="line">        message.getMessageProperties().setPriority(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>第三次发送优先级为3的消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(EXCHANGE_PRIORITY, ROUTING_KEY_PRIORITY, <span class="string">&quot;I am a message with priority 3.&quot;</span>, message-&gt;&#123;</span><br><span class="line">        message.getMessageProperties().setPriority(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190125.png" alt="image-20240830190125314" style="zoom:67%;" /><h3 id="消费端接收消息"><a class="markdownIt-Anchor" href="#消费端接收消息"></a> 消费端接收消息</h3><h4 id="配置pom-3"><a class="markdownIt-Anchor" href="#配置pom-3"></a> 配置POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置yaml-2"><a class="markdownIt-Anchor" href="#配置yaml-2"></a> 配置YAML</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h4 id="主启动类-7"><a class="markdownIt-Anchor" href="#主启动类-7"></a> 主启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQPriorityConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitMQPriorityConsumer.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="监听器-2"><a class="markdownIt-Anchor" href="#监听器-2"></a> 监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_PRIORITY</span> <span class="operator">=</span> <span class="string">&quot;queue.test.priority&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &#123;QUEUE_PRIORITY&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processPriorityMessage</span><span class="params">(String data, Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        log.info(data);</span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试效果"><a class="markdownIt-Anchor" href="#测试效果"></a> 测试效果</h4><p>对于已经滞留服务器的消息，只要消费端一启动，就能够收到消息队列的投递，打印效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240830190211.png" alt="image-20231111003358425" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;整合springboot&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#整合springboot&quot;&gt;&lt;/a&gt; 整合SpringBoot&lt;/h2&gt;
&lt;h3 id=&quot;消费者工程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h</summary>
      
    
    
    
    <category term="中间件" scheme="https://www.yuanyuan.blog/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="RabbitMQ" scheme="https://www.yuanyuan.blog/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ:2.基础</title>
    <link href="https://www.yuanyuan.blog/posts/d0aaed9e.html"/>
    <id>https://www.yuanyuan.blog/posts/d0aaed9e.html</id>
    <published>2024-08-27T19:24:07.000Z</published>
    <updated>2025-02-22T12:17:28.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hellorabbitmq"><a class="markdownIt-Anchor" href="#hellorabbitmq"></a> HelloRabbitMQ</h2><h3 id="目标"><a class="markdownIt-Anchor" href="#目标"></a> 目标</h3><p>生产者发送消息，消费者接收消息，用最简单的方式实现</p><p>官网说明参见下面超链接：</p><p><a href="https://www.rabbitmq.com/tutorials/tutorial-one-java.html">RabbitMQ tutorial - “Hello World!” — RabbitMQ</a></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829163431.png" alt="image-20240829163431320" /></p><h3 id="具体操作"><a class="markdownIt-Anchor" href="#具体操作"></a> 具体操作</h3><h4 id="创建java工程"><a class="markdownIt-Anchor" href="#创建java工程"></a> 创建Java工程</h4><ol><li>创建一个空项目</li></ol><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829163222.png" alt="image-20240829163221890" style="zoom: 67%;" /><ol start="2"><li>新建一个模块</li></ol><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829163335.png" alt="image-20240829163335410" style="zoom:67%;" /><ol start="3"><li>添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="发送消息"><a class="markdownIt-Anchor" href="#发送消息"></a> 发送消息</h4><ol><li>Java代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 设置主机地址</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置连接端口号：默认为 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 虚拟主机名称：默认为 /</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置连接用户名；默认为guest</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置连接密码；默认为guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">// 创建频道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        <span class="comment">// queue      参数1：队列名称</span></span><br><span class="line">        <span class="comment">// durable    参数2：是否定义持久化队列，当 MQ 重启之后还在</span></span><br><span class="line">        <span class="comment">// exclusive  参数3：是否独占本次连接。若独占，只能有一个消费者监听这个队列且 Connection 关闭时删除这个队列</span></span><br><span class="line">        <span class="comment">// autoDelete 参数4：是否在不使用的时候自动删除队列，也就是在没有Consumer时自动删除</span></span><br><span class="line">        <span class="comment">// arguments  参数5：队列其它参数</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;simple_queue&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 要发送的信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;你好；RabbitMQ！&quot;</span>;</span><br><span class="line">        <span class="comment">// 参数1：交换机名称,如果没有指定则使用默认Default Exchange</span></span><br><span class="line">        <span class="comment">// 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class="line">        <span class="comment">// 参数3：配置信息</span></span><br><span class="line">        <span class="comment">// 参数4：消息内容</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;simple_queue&quot;</span>, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;已发送消息：&quot;</span> + message);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>运行程序</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829164554.png" alt="image-20240829164554308" /></p><ol start="3"><li>查看效果</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829164748.png" alt="image-20240829164747776" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829164918.png" alt="image-20240829164917637" /></p><h4 id="接收消息"><a class="markdownIt-Anchor" href="#接收消息"></a> 接收消息</h4><ol><li>Java代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.创建连接工厂  </span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 2. 设置参数  </span></span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 创建连接 Connection        </span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">// 4. 创建Channel  </span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 5. 创建队列  </span></span><br><span class="line">        <span class="comment">// 如果没有一个名字叫simple_queue的队列，则会创建该队列，如果有则不会创建  </span></span><br><span class="line">        <span class="comment">// 参数1. queue：队列名称  </span></span><br><span class="line">        <span class="comment">// 参数2. durable：是否持久化。如果持久化，则当MQ重启之后还在  </span></span><br><span class="line">        <span class="comment">// 参数3. exclusive：是否独占。  </span></span><br><span class="line">        <span class="comment">// 参数4. autoDelete：是否自动删除。当没有Consumer时，自动删除掉  </span></span><br><span class="line">        <span class="comment">// 参数5. arguments：其它参数。  </span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;simple_queue&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 接收消息  </span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">// 回调方法,当收到消息后，会自动执行该方法  </span></span><br><span class="line">            <span class="comment">// 参数1. consumerTag：标识  </span></span><br><span class="line">            <span class="comment">// 参数2. envelope：获取一些信息，交换机，路由key...  </span></span><br><span class="line">            <span class="comment">// 参数3. properties：配置信息  </span></span><br><span class="line">            <span class="comment">// 参数4. body：数据  </span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;consumerTag：&quot;</span>+consumerTag);</span><br><span class="line">                System.out.println(<span class="string">&quot;Exchange：&quot;</span>+envelope.getExchange());</span><br><span class="line">                System.out.println(<span class="string">&quot;RoutingKey：&quot;</span>+envelope.getRoutingKey());</span><br><span class="line">                System.out.println(<span class="string">&quot;properties：&quot;</span>+properties);</span><br><span class="line">                System.out.println(<span class="string">&quot;body：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 参数1. queue：队列名称  </span></span><br><span class="line">        <span class="comment">// 参数2. autoAck：是否自动确认，类似咱们发短信，发送成功会收到一个确认消息  </span></span><br><span class="line">        <span class="comment">// 参数3. callback：回调对象  </span></span><br><span class="line">        <span class="comment">// 消费者类似一个监听程序，主要是用来监听消息  </span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;simple_queue&quot;</span>,<span class="literal">true</span>,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>运行程序</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829165327.png" alt="image-20240829165326753" /></p><ol start="3"><li>查看后台管理界面</li></ol><p>因为消息被消费掉了，所以RabbitMQ服务器上没有了，即消息数量为0：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829165347.png" alt="image-20240829165347416" /></p><h2 id="工作模式"><a class="markdownIt-Anchor" href="#工作模式"></a> 工作模式</h2><p>RabbitMQ有7种工作模式:</p><div class='tag-link-1'><a class="tag-Link" target="_blank" href="https://www.rabbitmq.com/getstarted.html">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url('https://t3.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=https://www.rabbitmq.com/getstarted.html&size=60'); border-radius: 50%; width: 60px; height: 60px;"></div>        <div class="tag-link-right">            <div class="tag-link-title">RabbitMQ官网</div>            <div class="tag-link-sitename">https://www.rabbitmq.com/getstarted.html</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829165839.png" alt="image-20240829165839070" /></p><p>下面一一进行讲解</p><h2 id="工作队列work-queues模式"><a class="markdownIt-Anchor" href="#工作队列work-queues模式"></a> 工作队列（Work Queues）模式</h2><h3 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h3><p>本质上我们刚刚写的HelloWorld程序就是这种模式，只是简化到了最简单的情况：</p><ul><li>生产者只有一个</li><li>发送一个消息</li><li>消费者也只有一个，消息也只能被这个消费者消费</li></ul><p>所以HelloWorld也称为简单模式。</p><p>现在我们还原一下常规情况：</p><ul><li>生产者发送多个消息</li><li>由多个消费者来竞争</li><li>谁抢到算谁的</li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829170029.png" alt="image-20240829170029591" style="zoom:50%;" /><h3 id="生产者代码"><a class="markdownIt-Anchor" href="#生产者代码"></a> 生产者代码</h3><h4 id="封装工具类"><a class="markdownIt-Anchor" href="#封装工具类"></a> 封装工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectionUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HOST_ADDRESS</span> <span class="operator">=</span> <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 定义连接工厂  </span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 设置服务地址  </span></span><br><span class="line">        factory.setHost(HOST_ADDRESS);</span><br><span class="line">        <span class="comment">// 端口  </span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置账号信息，用户名、密码、vhost  </span></span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过工程获取连接  </span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写代码"><a class="markdownIt-Anchor" href="#编写代码"></a> 编写代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> blog.yuanyuan.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work_queue&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> i + <span class="string">&quot;hello rabbitmq!!!&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, body.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送消息效果"><a class="markdownIt-Anchor" href="#发送消息效果"></a> 发送消息效果</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829170843.png" alt="image-20240829170843042" /></p><h3 id="消费者代码"><a class="markdownIt-Anchor" href="#消费者代码"></a> 消费者代码</h3><h4 id="编写代码-2"><a class="markdownIt-Anchor" href="#编写代码-2"></a> 编写代码</h4><p>创建Consumer1和Consumer2。Consumer2只是类名和打印提示不同，代码完全一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> blog.yuanyuan.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer1</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work_queue&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer1 body：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>运行的时候先启动两个消费端程序，然后再启动生产者端程序。如果已经运行过生产者程序，则手动把work_queue队列删掉。</p></div><h4 id="运行效果"><a class="markdownIt-Anchor" href="#运行效果"></a> 运行效果</h4><p>最终两个消费端程序竞争结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829171455.png" alt="image-20240829171454720" /></p><h3 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h3><ul><li>多个消费者监听同一个队列，则各消费者之间对同一个消息是竞争的关系。</li><li>Work Queues工作模式适用于任务较重或任务较多的情况，多消费者分摊任务可以提高消息处理的效率。</li></ul><h2 id="发布订阅publishsubscribe模式"><a class="markdownIt-Anchor" href="#发布订阅publishsubscribe模式"></a> 发布订阅(Publish/Subscribe)模式</h2><h3 id="概述-2"><a class="markdownIt-Anchor" href="#概述-2"></a> 概述</h3><p>引入新角色：交换机。这时生产者不是把消息直接发送到队列，而是发送到交换机。交换机接收消息，而如何处理消息取决于交换机的类型。</p><p>交换机有如下3种常见类型：</p><ul><li>Fanout：广播，将消息发送给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式）的队列</li></ul><div class="tip warning"><p>Exchange（交换机）只负责转发消息，不具备存储消息的能力，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p></div><h3 id="模式说明"><a class="markdownIt-Anchor" href="#模式说明"></a> 模式说明</h3><p>组件之间关系：</p><ul><li>生产者把消息发送到交换机</li><li>队列直接和交换机绑定</li></ul><p>工作机制：消息发送到交换机上，就会以<strong>广播</strong>的形式发送给所有已绑定队列</p><p>理解概念：</p><ul><li>Publish：发布，这里就是把消息发送到交换机上</li><li>Subscribe：订阅，这里只要把队列和交换机绑定，事实上就形成了一种订阅关系</li></ul><h3 id="生产者代码-2"><a class="markdownIt-Anchor" href="#生产者代码-2"></a> 生产者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> blog.yuanyuan.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、获取连接  </span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 2、创建频道  </span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 参数1. exchange：交换机名称  </span></span><br><span class="line">        <span class="comment">// 参数2. type：交换机类型  </span></span><br><span class="line">        <span class="comment">//     DIRECT(&quot;direct&quot;)：定向  </span></span><br><span class="line">        <span class="comment">//     FANOUT(&quot;fanout&quot;)：扇形（广播），发送消息到每一个与之绑定队列。  </span></span><br><span class="line">        <span class="comment">//     TOPIC(&quot;topic&quot;)：通配符的方式  </span></span><br><span class="line">        <span class="comment">//     HEADERS(&quot;headers&quot;)：参数匹配  </span></span><br><span class="line">        <span class="comment">// 参数3. durable：是否持久化  </span></span><br><span class="line">        <span class="comment">// 参数4. autoDelete：自动删除  </span></span><br><span class="line">        <span class="comment">// 参数5. internal：内部使用。一般false  </span></span><br><span class="line">        <span class="comment">// 参数6. arguments：其它参数  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;test_fanout&quot;</span>;</span><br><span class="line">        <span class="comment">// 3、创建交换机  </span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.FANOUT, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 4、创建队列  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 5、绑定队列和交换机  </span></span><br><span class="line">        <span class="comment">// 参数1. queue：队列名称  </span></span><br><span class="line">        <span class="comment">// 参数2. exchange：交换机名称  </span></span><br><span class="line">        <span class="comment">// 参数3. routingKey：路由键，绑定规则  </span></span><br><span class="line">        <span class="comment">//     如果交换机的类型为fanout，routingKey设置为&quot;&quot;  </span></span><br><span class="line">        channel.queueBind(queue1Name, exchangeName, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name, exchangeName, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;日志信息：张三调用了findAll方法...日志级别：info...&quot;</span>;</span><br><span class="line">        <span class="comment">// 6、发送消息  </span></span><br><span class="line">        channel.basicPublish(exchangeName, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, body.getBytes());</span><br><span class="line">        <span class="comment">// 7、释放资源  </span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者代码-2"><a class="markdownIt-Anchor" href="#消费者代码-2"></a> 消费者代码</h3><h4 id="消费者1号"><a class="markdownIt-Anchor" href="#消费者1号"></a> 消费者1号</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> blog.yuanyuan.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue1&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;body：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">                System.out.println(<span class="string">&quot;队列 1 消费者 1 将日志信息打印到控制台.....&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue1Name, <span class="literal">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者2号"><a class="markdownIt-Anchor" href="#消费者2号"></a> 消费者2号</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> blog.yuanyuan.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_fanout_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue2Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;body：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">                System.out.println(<span class="string">&quot;队列 2 消费者 2 将日志信息打印到控制台.....&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue2Name, <span class="literal">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行效果-2"><a class="markdownIt-Anchor" href="#运行效果-2"></a> 运行效果</h3><p>还是先启动2个消费者，然后再运行生产者程序发送消息：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829173405.png" alt="image-20240829173404929" /></p><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><p>查看交换机</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829173643.png" alt="image-20240829173642626" /></p><p>交换机和队列的绑定关系如下图所示：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829173722.png" alt="image-20240829173722176" style="zoom:80%;" /><p>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到。</p><p><strong>发布订阅模式与工作队列模式的区别：</strong></p><ul><li>工作队列模式本质上是绑定默认交换机</li><li>发布订阅模式绑定指定交换机</li><li>监听同一个队列的消费端程序彼此之间是竞争关系</li><li>绑定同一个交换机的多个队列在发布订阅模式下，消息是广播的，每个队列都能接收到消息</li></ul><h2 id="路由routing模式"><a class="markdownIt-Anchor" href="#路由routing模式"></a> 路由（Routing）模式</h2><h3 id="概述-3"><a class="markdownIt-Anchor" href="#概述-3"></a> 概述</h3><ul><li><p>通过『路由绑定』的方式，把交换机和队列关联起来</p></li><li><p>交换机和队列通过路由键进行绑定</p></li><li><p>生产者发送消息时不仅要指定交换机，还要指定路由键</p></li><li><p>交换机接收到消息会发送到路由键绑定的队列</p></li><li><p>在编码上与 Publish/Subscribe发布与订阅模式的区别：</p><ul><li><p>交换机的类型为：Direct</p></li><li><p>队列绑定交换机的时候需要指定routing key</p></li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829173952.png" alt="image-20240829173952601" style="zoom:67%;" /><div class="tip info"><p>实际开发中用得最多</p></div><h3 id="生产者代码-3"><a class="markdownIt-Anchor" href="#生产者代码-3"></a> 生产者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> blog.yuanyuan.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;test_direct&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建交换机  </span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.DIRECT, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 创建队列  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue2&quot;</span>;</span><br><span class="line">        <span class="comment">// 声明（创建）队列  </span></span><br><span class="line">        channel.queueDeclare(queue1Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 队列绑定交换机  </span></span><br><span class="line">        <span class="comment">// 队列1绑定error  </span></span><br><span class="line">        channel.queueBind(queue1Name, exchangeName, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="comment">// 队列2绑定info error warning  </span></span><br><span class="line">        channel.queueBind(queue2Name, exchangeName, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name, exchangeName, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name, exchangeName, <span class="string">&quot;warning&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;日志信息：张三调用了delete方法.错误了,日志级别warning&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息  </span></span><br><span class="line">        channel.basicPublish(exchangeName, <span class="string">&quot;warning&quot;</span>, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(message);</span><br><span class="line">        <span class="comment">// 释放资源  </span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者代码-3"><a class="markdownIt-Anchor" href="#消费者代码-3"></a> 消费者代码</h3><h4 id="消费者1号-2"><a class="markdownIt-Anchor" href="#消费者1号-2"></a> 消费者1号</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> blog.yuanyuan.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue1&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;body：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer1 将日志信息打印到控制台.....&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue1Name, <span class="literal">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者2号-2"><a class="markdownIt-Anchor" href="#消费者2号-2"></a> 消费者2号</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_direct_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue2Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;body：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer2 将日志信息存储到数据库.....&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue2Name, <span class="literal">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h3><h4 id="消费消息"><a class="markdownIt-Anchor" href="#消费消息"></a> 消费消息</h4><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829174522.png" alt="image-20240829174521779" /></p><h4 id="绑定消息"><a class="markdownIt-Anchor" href="#绑定消息"></a> 绑定消息</h4><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829174638.png" alt="image-20240829174638324" style="zoom:67%;" /><div class="tip warning"><p>如果一个交换机通过相同的routing key绑定了多个队列，就会有广播效果</p></div><h2 id="主题topics模式"><a class="markdownIt-Anchor" href="#主题topics模式"></a> 主题（Topics）模式</h2><h3 id="概述-4"><a class="markdownIt-Anchor" href="#概述-4"></a> 概述</h3><p>Topic类型与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key的时候使用通配符。</p><p>Routingkey一般都是由一个或多个单词组成，多个单词之间以“.”分割，例如：<code>item.insert</code> 。<br />通配符规则：</p><ul><li>#：匹配零个或多个词</li><li>*：匹配一个词</li></ul><h3 id="生产者代码-4"><a class="markdownIt-Anchor" href="#生产者代码-4"></a> 生产者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> blog.yuanyuan.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;test_topic&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.TOPIC, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue1Name</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queue2Name</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 绑定队列和交换机  </span></span><br><span class="line">        <span class="comment">// 参数1. queue：队列名称  </span></span><br><span class="line">        <span class="comment">// 参数2. exchange：交换机名称  </span></span><br><span class="line">        <span class="comment">// 参数3. routingKey：路由键,绑定规则  </span></span><br><span class="line">        <span class="comment">//      如果交换机的类型为fanout ,routingKey设置为&quot;&quot;  </span></span><br><span class="line">        <span class="comment">// routing key 常用格式：系统的名称.日志的级别。  </span></span><br><span class="line">        <span class="comment">// 需求： 所有error级别的日志存入数据库,所有order系统的日志存入数据库  </span></span><br><span class="line">        channel.queueBind(queue1Name, exchangeName, <span class="string">&quot;#.error&quot;</span>);</span><br><span class="line">        channel.queueBind(queue1Name, exchangeName, <span class="string">&quot;order.*&quot;</span>);</span><br><span class="line">        channel.queueBind(queue2Name, exchangeName, <span class="string">&quot;*.*&quot;</span>);</span><br><span class="line">        <span class="comment">// 分别发送消息到队列：order.info、goods.info、goods.error  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;[所在系统：order][日志级别：info][日志内容：订单生成，保存成功]&quot;</span>;</span><br><span class="line">        channel.basicPublish(exchangeName, <span class="string">&quot;order.info&quot;</span>, <span class="literal">null</span>, body.getBytes());</span><br><span class="line">        body = <span class="string">&quot;[所在系统：goods][日志级别：info][日志内容：商品发布成功]&quot;</span>;</span><br><span class="line">        channel.basicPublish(exchangeName, <span class="string">&quot;goods.info&quot;</span>, <span class="literal">null</span>, body.getBytes());</span><br><span class="line">        body = <span class="string">&quot;[所在系统：goods][日志级别：error][日志内容：商品发布失败]&quot;</span>;</span><br><span class="line">        channel.basicPublish(exchangeName, <span class="string">&quot;goods.error&quot;</span>, <span class="literal">null</span>, body.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者代码-4"><a class="markdownIt-Anchor" href="#消费者代码-4"></a> 消费者代码</h3><h4 id="消费者1号-3"><a class="markdownIt-Anchor" href="#消费者1号-3"></a> 消费者1号</h4><p>消费者1监听队列1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> blog.yuanyuan.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue1&quot;</span>;</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;body：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者2号-3"><a class="markdownIt-Anchor" href="#消费者2号-3"></a> 消费者2号</h4><p>消费者2监听队列2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> blog.yuanyuan.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;test_topic_queue2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;body：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行效果-3"><a class="markdownIt-Anchor" href="#运行效果-3"></a> 运行效果</h3><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829180035.png" alt="image-20240829180034851" /></p><h4 id="绑定关系"><a class="markdownIt-Anchor" href="#绑定关系"></a> 绑定关系</h4><p>交换机：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829180143.png" alt="image-20240829180143352" style="zoom: 50%;" /><p>test_topic_queue1：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829180300.png" alt="image-20240829180300143" style="zoom: 50%;" /><p>test_topic_queue2：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829180358.png" alt="image-20240829180357729" style="zoom:50%;" /><h2 id="rpc"><a class="markdownIt-Anchor" href="#rpc"></a> RPC</h2><p>远程过程调用，本质上是同步调用，和我们使用OpenFeign调用远程接口一样，这不是典型的消息队列工作方式。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829180748.png" alt="image-20240829180748244" /></p><h2 id="publisher-confirms"><a class="markdownIt-Anchor" href="#publisher-confirms"></a> Publisher Confirms</h2><p>发送端消息确认，是我们在进阶篇要探讨的『消息可靠性投递』的一部分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;hellorabbitmq&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hellorabbitmq&quot;&gt;&lt;/a&gt; HelloRabbitMQ&lt;/h2&gt;
&lt;h3 id=&quot;目标&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h</summary>
      
    
    
    
    <category term="中间件" scheme="https://www.yuanyuan.blog/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="RabbitMQ" scheme="https://www.yuanyuan.blog/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ:1.安装</title>
    <link href="https://www.yuanyuan.blog/posts/69fafd34.html"/>
    <id>https://www.yuanyuan.blog/posts/69fafd34.html</id>
    <published>2024-08-27T19:22:46.000Z</published>
    <updated>2025-02-22T12:17:28.191Z</updated>
    
    <content type="html"><![CDATA[<p>在学习RabbitMQ之前，我们先讲讲怎么安装RabbitMQ。</p><h2 id="docker安装"><a class="markdownIt-Anchor" href="#docker安装"></a> Docker安装</h2><p>还不会Docker的小朋友可以看看我之前的一篇文章：</p><div class='tag-link-1'><a class="tag-Link" target="_blank" href="/posts/f255ffad.html">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url('https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/202301141212847.png'); border-radius: 50%; width: 60px; height: 60px;"></div>        <div class="tag-link-right">            <div class="tag-link-title">docker</div>            <div class="tag-link-sitename">/posts/f255ffad.html</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull rabbitmq:3.13-management</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d 参数：后台运行 Docker 容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name 参数：设置容器名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p 参数：映射端口号，格式是“宿主机端口号:容器内端口号”。5672供客户端程序访问，15672供后台管理界面访问</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v 参数：卷映射目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-e 参数：设置容器内的环境变量，这里我们设置了登录RabbitMQ管理后台的默认用户和密码</span></span><br><span class="line">docker run -d \</span><br><span class="line">--name rabbitmq \</span><br><span class="line">-p 5672:5672 \</span><br><span class="line">-p 15672:15672 \</span><br><span class="line">-v rabbitmq-plugin:/plugins \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=guest \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=123456 \</span><br><span class="line">rabbitmq:3.13-management</span><br></pre></td></tr></table></figure><h2 id="验证"><a class="markdownIt-Anchor" href="#验证"></a> 验证</h2><p>访问后台管理界面：<a href="http://localhost:15672">http://localhost:15672</a></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829162202.png" alt="image-20240829162201705" /></p><p>管理页面：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240829162310.png" alt="image-20240829162309898" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在学习RabbitMQ之前，我们先讲讲怎么安装RabbitMQ。&lt;/p&gt;
&lt;h2 id=&quot;docker安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docker安装&quot;&gt;&lt;/a&gt; Docker安装&lt;/h2&gt;
&lt;p&gt;还不会Docker的小朋友可</summary>
      
    
    
    
    <category term="中间件" scheme="https://www.yuanyuan.blog/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="RabbitMQ" scheme="https://www.yuanyuan.blog/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Kafka3.7.0:4.Kafka集群</title>
    <link href="https://www.yuanyuan.blog/posts/b7fe7790.html"/>
    <id>https://www.yuanyuan.blog/posts/b7fe7790.html</id>
    <published>2024-08-15T19:11:36.000Z</published>
    <updated>2025-02-22T12:17:28.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kafka集群搭建"><a class="markdownIt-Anchor" href="#kafka集群搭建"></a> Kafka集群搭建</h1><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240816111952.png" alt="image-20240816111951720" /></p><h2 id="kafka集群搭建方式"><a class="markdownIt-Anchor" href="#kafka集群搭建方式"></a> Kafka集群搭建方式</h2><ol><li>基于Zookeeper的集群搭建方式</li><li>基于Kraft的集群搭建方式</li></ol><h2 id="基于zookeeper的集群搭建"><a class="markdownIt-Anchor" href="#基于zookeeper的集群搭建"></a> 基于Zookeeper的集群搭建</h2><ol><li>解压三个kafka</li><li>配置kafka集群：server.properties</li><li>集群启动并测试</li></ol><h3 id="解压"><a class="markdownIt-Anchor" href="#解压"></a> 解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kafka_2.13-3.7.0.tgz <span class="comment"># 解压</span></span><br><span class="line"><span class="built_in">mv</span> kafka_2.13-3.7.0 kafka-01</span><br><span class="line"><span class="built_in">cp</span> -r kafka-01 kafka-02</span><br><span class="line"><span class="built_in">cp</span> -r kafka-01 kafka-03</span><br></pre></td></tr></table></figure><h3 id="配置kafka集群"><a class="markdownIt-Anchor" href="#配置kafka集群"></a> 配置kafka集群</h3><p>配置kafka集群：server.properties</p><ol><li>三台分别配置为：<br /><code>broker.id=1、broker.id=2、broker.id=3</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> kafka-01/config</span><br><span class="line">vim server.properties</span><br></pre></td></tr></table></figure><p>其他2个同理。</p><div class="tip warning"><p>该配置项是每个broker的唯一id，取值在0~255之间</p></div><ol start="2"><li>三台分别配置listener=PAINTEXT:IP:PORT</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://0.0.0.0:9091</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://0.0.0.0:9092</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://0.0.0.0:9093</span></span><br></pre></td></tr></table></figure><p>三台分别配置advertised.listeners=PAINTEXT:IP:PORT</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">advertised.listeners</span>=<span class="string">PLAINTEXT://192.168.1.7:9091 # 请换成你的ip</span></span><br><span class="line"><span class="attr">advertised.listeners</span>=<span class="string">PLAINTEXT://192.168.1.7:9092</span></span><br><span class="line"><span class="attr">advertised.listeners</span>=<span class="string">PLAINTEXT://192.168.1.7:9093</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置日志目录</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log.dirs</span>=<span class="string">/tmp/kafka-logs-9091</span></span><br><span class="line"><span class="attr">log.dirs</span>=<span class="string">/tmp/kafka-logs-9092</span></span><br><span class="line"><span class="attr">log.dirs</span>=<span class="string">/tmp/kafka-logs-9093</span></span><br></pre></td></tr></table></figure><p>这是极为重要的配置项，kafka所有数据就是写入这个目录下的磁盘文件中的；</p><ol start="4"><li>配置zookeeper连接地址</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zookeeper.connect</span>=<span class="string">localhost:2181</span></span><br></pre></td></tr></table></figure><p>如果zookeeper是集群，则：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zookeeper.connect</span>=<span class="string">localhost:2181,localhost:2182,localhost:2183</span></span><br></pre></td></tr></table></figure><h3 id="启动测试"><a class="markdownIt-Anchor" href="#启动测试"></a> 启动测试</h3><ol><li>启动Zookeeper，切换到bin目录：<code>./zkServer.sh start</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240816115053.png" alt="image-20240816115053647" /></p><p>连接测试（这里使用IDEA插件ZookeeperManager）：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240816115721.png" alt="image-20240816115720747" style="zoom: 80%;" /><ol start="2"><li>启动三个Kafka，切换到bin目录：<code>./kafka-server-start.sh ../config/server.properties</code></li></ol><p>连接测试（IDEA插件Kafka）：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240816120204.png" alt="image-20240816120203679" style="zoom:67%;" /><p>其他2个同理。</p><p>查看zookeeper：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240816120025.png" alt="image-20240816120024749" style="zoom:80%;" /><ol start="3"><li>查看topic详情：<code>./kafka-topics.sh --bootstrap-server 127.0.0.1:9091 --describe --topic clusterTopic</code></li></ol><h2 id="springboot连接kafka集群"><a class="markdownIt-Anchor" href="#springboot连接kafka集群"></a> SpringBoot连接Kafka集群</h2><p>在之前的项目上CV一份最新的module</p><p>修改项目配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kafka-06-base</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="string">localhost:9091,localhost:9092,localhost:9093</span> <span class="comment"># kafka集群地址</span></span><br><span class="line">    <span class="attr">consumer:</span></span><br><span class="line">      <span class="attr">key-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">      <span class="attr">value-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">      <span class="attr">auto-offset-reset:</span> <span class="string">earliest</span></span><br></pre></td></tr></table></figure><p>Kafka配置多副本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> NewTopic <span class="title function_">newTopic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 3个kafka，副本数最多为3</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NewTopic</span>(<span class="string">&quot;clusterTopic&quot;</span>, <span class="number">3</span>, (<span class="type">short</span>) <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动程序（请先注释掉@KafkaListener，或者先删除消费者代码）</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240816121432.png" alt="image-20240816121432453" /></p><p>生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &#123;&quot;clusterTopic&quot;&#125;, groupId = &quot;clusterGroup&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(ConsumerRecord&lt;String, String&gt; record)</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getId() + <span class="string">&quot; --&gt; 消费消息：&quot;</span> + record);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试方法发送消息：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240816121909.png" alt="image-20240816121909121" style="zoom:67%;" /><p>消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &#123;&quot;clusterTopic&quot;&#125;, groupId = &quot;clusterGroup&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(ConsumerRecord&lt;String, String&gt; record)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费消息：&quot;</span> + record);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行主程序：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240816122216.png" alt="image-20240816122216282" /></p><div class="tip info"><ol><li><p>主副本究竟放在哪个broker中是由kafka内部机制决定的</p></li><li><p>从副本和主副本不在同一个broker上</p></li></ol></div><h2 id="kafka12个核心概念"><a class="markdownIt-Anchor" href="#kafka12个核心概念"></a> Kafka12个核心概念</h2><ol><li>服务器 broker</li><li>主题 topic</li><li>事件  Event （message、消息、数据）</li><li>生产者 producer</li><li>消费者 consumer</li><li>消费组 consumer group</li><li>分区 partition</li><li>偏移量offset（生产者偏移量，消费者偏移量）</li><li>Replica副本：分为 Leader Replica 和 Follower Replica；</li><li>ISR副本：在同步中的副本 (In-Sync Replicas)</li><li>LEO：日志末端偏移量 (Log End Offset)</li><li>HW：高水位值 (High Water mark)</li></ol><p>前9个我们之前已经讲过了，这里我们只讲后面3个。</p><h3 id="isr副本"><a class="markdownIt-Anchor" href="#isr副本"></a> ISR副本</h3><h4 id="什么是isr副本"><a class="markdownIt-Anchor" href="#什么是isr副本"></a> 什么是ISR副本</h4><p>ISR副本：在同步中的副本 (In-Sync Replicas)，包含了Leader副本和所有与Leader副本保持同步的Follower副本。</p><p>写请求首先由 Leader 副本处理，之后 Follower 副本会从 Leader 上拉取写入的消息，这个过程会有一定的延迟，导致 Follower 副本中保存的消息略少于 Leader 副本，但是只要没有超出阈值都可以容忍，但是如果一个Follower 副本出现异常，比如宕机、网络断开等原因长时间没有同步到消息，那这个时候，Leader就会把它踢出去，Kafka 通过ISR集合来维护一个&quot;<strong>可用且消息量与Leader相差不多的副本集合，它是整个副本集合的一个子集</strong>&quot;。</p><h4 id="成为isr副本的条件"><a class="markdownIt-Anchor" href="#成为isr副本的条件"></a> 成为ISR副本的条件</h4><p>在Kafka中，一个副本要成为ISR（In-Sync Replicas）副本，需要满足一定条件：</p><ol><li>Leader副本本身就是一个ISR副本</li><li>Follower副本最后一条消息的offset与Leader副本的最后一条消息的offset之间的差值不能超过指定的阈值，超过阈值则该Follower副本将会从ISR列表中剔除<ul><li><code>replica.lag.time.max.ms</code>：默认是30秒；如果该Follower在此时间间隔内一直没有追上过Leader副本的所有消息，则该Follower副本就会被剔除ISR列表</li><li><code>replica.lag.max.messages</code>：落后了多少条消息时，该Follower副本就会被剔除ISR列表，<strong>该配置参数现在在新版本的Kafka已经过时了</strong></li></ul></li></ol><h3 id="leo"><a class="markdownIt-Anchor" href="#leo"></a> LEO</h3><p>LEO：日志末端偏移量 (Log End Offset)，记录该副本消息日志(log)中下一条消息的偏移量，注意是下一条消息，也就是说，如果LEO=10，那么表示该副本只保存了偏移量值是[0, 9]的10条消息</p><h3 id="hw"><a class="markdownIt-Anchor" href="#hw"></a> HW</h3><p>HW：(High Watermark)，即高水位值，它代表一个偏移量offset信息，表示消息的复制进度，也就是消息已经成功复制到哪个位置了。即在HW之前的所有消息都已经被成功写入副本中并且可以在所有的副本中找到，因此，消费者可以安全地消费这些已成功复制的消息。</p><p>对于同一个副本而言，小于等于HW值的所有消息都被认为是“已备份”的（replicated），消费者只能拉取到这个offset之前的消息，确保了数据的可靠性。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240816162104.png" alt="image-20240816162103804" /></p><h3 id="isr-hw-leo的关系"><a class="markdownIt-Anchor" href="#isr-hw-leo的关系"></a> ISR、HW、LEO的关系</h3><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240816162410.png" alt="image-20240816162410150" style="zoom: 80%;" /><h2 id="基于kraft的集群搭建"><a class="markdownIt-Anchor" href="#基于kraft的集群搭建"></a> 基于KRaft的集群搭建</h2><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240816162919.png" alt="image-20240816162919025" style="zoom:67%;" /><p>Controller节点在Kafka集群中扮演着管理和协调的角色，管理整个集群中所有分区和副本的状态，当某个分区的leader副本出现故障时，Controller负责为该分区选举新的leader副本。</p><p>Broker节点在Kafka集群中主要承担消息存储和转发等任务。</p><p>左图：</p><ul><li>集群有三个节点都是Broker角色，其中一个Broker（褐色）是Controller控制器节点，控制器节点将集群元数据信息（比如主题分类、消费进度等）保存到zookeeper，用于集群各节点之间分布式交互。</li></ul><p>右图：</p><ul><li>一个集群有四个Broker节点，人为指定其中三个作为Conreoller角色(蓝色)，从三个Controller中选举出一个Controller作为主控制器（褐色），其它2个备用，Zookeeper不再被需要，相关的元数据信息以kafka日志的形式存在（即：以消息队列消息的形式存在）。</li></ul><h3 id="kafka服务器规划"><a class="markdownIt-Anchor" href="#kafka服务器规划"></a> Kafka服务器规划</h3><ul><li>ip=192.168.11.129:9091   roles=broker,controller  node.id=1</li><li>ip=192.168.11.129:9092   roles=broker,controller  node.id=2</li><li>ip=192.168.11.129:9093   roles=broker,controller  node.id=3</li></ul><p>基于KRaft的集群搭建方式:</p><ol><li>准备三个Kafka，解压三个Kafka</li><li>配置kafka集群：config/kraft/server.properties</li><li>集群启动并测试</li></ol><h3 id="解压-2"><a class="markdownIt-Anchor" href="#解压-2"></a> 解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kafka_2.13-3.7.0.tgz <span class="comment"># 解压</span></span><br><span class="line"><span class="built_in">mv</span> kafka_2.13-3.7.0 kafka-01</span><br><span class="line"><span class="built_in">cp</span> -r kafka-01 kafka-02</span><br><span class="line"><span class="built_in">cp</span> -r kafka-01 kafka-03</span><br></pre></td></tr></table></figure><h3 id="配置kafka集群-2"><a class="markdownIt-Anchor" href="#配置kafka集群-2"></a> 配置kafka集群</h3><p>配置kafka集群：<code>config/kraft/server.properties</code></p><ol><li>三台分别配置：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> kafka-01/config/kraft</span><br><span class="line">vim server.properties</span><br></pre></td></tr></table></figure><p>修改配置，其他2个kafka同理。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker.id</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">broker.id</span>=<span class="string">2</span></span><br><span class="line"><span class="attr">broker.id</span>=<span class="string">3</span></span><br></pre></td></tr></table></figure><ol start="2"><li>三台分别配置节点角色：</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">process.roles</span>=<span class="string">broker,controller # 默认</span></span><br></pre></td></tr></table></figure><ol start="3"><li>三台分别配置参与投票的节点</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">controller.quorum.voters</span>=<span class="string">1@192.168.1.7:9081,2@192.168.1.7:9082,3@192.168.1.7:9083 # 只本机可以使用localhost</span></span><br></pre></td></tr></table></figure><ol start="4"><li>三台配置各自监听本机的ip和端口</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://0.0.0.0:9091,CONTROLLER://0.0.0.0:9081</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9082</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://0.0.0.0:9093,CONTROLLER://0.0.0.0:9083</span></span><br></pre></td></tr></table></figure><ol start="5"><li>三台配置对外开放访问的ip和端口</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">advertised.listeners</span>=<span class="string">PLAINTEXT://192.168.1.7:9091</span></span><br><span class="line"><span class="attr">advertised.listeners</span>=<span class="string">PLAINTEXT://192.168.1.7:9092</span></span><br><span class="line"><span class="attr">advertised.listeners</span>=<span class="string">PLAINTEXT://192.168.1.7:9093</span></span><br></pre></td></tr></table></figure><ol start="6"><li>三台分别配置日志目录</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log.dirs</span>=<span class="string">/tmp/kraft-combined-logs-9091</span></span><br><span class="line"><span class="attr">log.dirs</span>=<span class="string">/tmp/kraft-combined-logs-9092</span></span><br><span class="line"><span class="attr">log.dirs</span>=<span class="string">/tmp/kraft-combined-logs-9093</span></span><br></pre></td></tr></table></figure><h3 id="启动测试-2"><a class="markdownIt-Anchor" href="#启动测试-2"></a> 启动测试</h3><p>进入kafka的bin目录下:</p><ol><li>生成Cluster UUID（集群UUID）： <code>./kafka-storage.sh random-uuid</code>(只在一台机器上生成，其他共用)</li><li>格式化日志目录：<code>./kafka-storage.sh format -t 生成的UUID -c ../config/kraft/server.properties</code>（每个kafka都要执行）</li><li>启动Kafka：<code>./kafka-server-start.sh ../config/kraft/server.properties &amp;</code>（每个kafka都要执行）</li><li>关闭Kafka：<code>./kafka-server-stop.sh ../config/kraft/server.properties</code>（每个kafka都要执行）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;kafka集群搭建&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#kafka集群搭建&quot;&gt;&lt;/a&gt; Kafka集群搭建&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/liaojie1314/P</summary>
      
    
    
    
    <category term="中间件" scheme="https://www.yuanyuan.blog/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="kafka" scheme="https://www.yuanyuan.blog/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>gRPC</title>
    <link href="https://www.yuanyuan.blog/posts/bde3a706.html"/>
    <id>https://www.yuanyuan.blog/posts/bde3a706.html</id>
    <published>2024-08-07T16:26:41.000Z</published>
    <updated>2025-02-22T12:17:28.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="grpc"><a class="markdownIt-Anchor" href="#grpc"></a> gRPC</h2><h3 id="grpc入门"><a class="markdownIt-Anchor" href="#grpc入门"></a> gRPC入门</h3><h4 id="grpc简介"><a class="markdownIt-Anchor" href="#grpc简介"></a> gRPC简介</h4><p>gRPC来自Google，它是一个开源的框架；它同时也是Cloud Native Computation基金会（CNCF）的一部分，就像Docker和Kubernetes一样。<br />gRPC允许你为RPC（Remote Procedure call）定义请求和响应，然后gRPC会帮你处理一切剩余问题。<br />它速度快，执行效率高，基于HTTP/2构建，低延迟，支持流，与开发语言无关，并且可以很简单的插入身份认证、负载均衡、日志和监控等功能。<br />gRPC它是对RPC一种非常简洁的实现并且解决了很多RPC的问题。</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240807163126.png" alt="image-20240807163126198" style="zoom:80%;" /><p><strong>gRPC结构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240810160423.png" alt="image-20240810160423389" /></p><p><strong>设计步骤</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240810160753.png" alt="image-20240810160752936" /></p><p><strong>生命周期</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240810160820.png" alt="image-20240810160820157" /></p><h4 id="如何学习grpc"><a class="markdownIt-Anchor" href="#如何学习grpc"></a> 如何学习gRPC</h4><p>首先，你得学习Protocol Buffers（<a href="https://developers.google.com/protocol-buffers/%EF%BC%89%EF%BC%8C%E7%AE%80%E5%8D%95%E7%9A%84%E8%AF%B4%EF%BC%8C%E5%AE%83%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E3%80%82">https://developers.google.com/protocol-buffers/），简单的说，它可以用来定义消息和服务。</a><br />然后，你只需要实现服务即可，剩余的gRPC代码将会自动为你生成。<br />.proto这个文件可以适用于十几种开发语言（包括服务端和客户端），并且它允许你使用同一个框架来支持每秒百万级以上的RPC调用。</p><h4 id="开发模式"><a class="markdownIt-Anchor" href="#开发模式"></a> 开发模式</h4><p>gPRC使用的是合约优先的API开发模式，它默认使用Protocol buffers（protobuf）作为接口设计语言（IDL），这个.proto文件包括两部分：</p><ul><li>gRPC服务的定义</li><li>服务端和客户端之间传递的消息</li></ul><h4 id="为什么使用protocol-buffers"><a class="markdownIt-Anchor" href="#为什么使用protocol-buffers"></a> 为什么使用Protocol Buffers</h4><ol><li><p>它和开发语言无关</p></li><li><p>可以生成所有主流开发语言的代码</p></li><li><p>数据是二进制格式的，串行化的效率高，Payload比较小</p></li><li><p>也很适合传递大量的数据</p></li><li><p>通过设定某些规则，使得API的进化也很简单</p></li></ol><h3 id="hello-grpc"><a class="markdownIt-Anchor" href="#hello-grpc"></a> Hello gRPC</h3><p>新建一个以 <code>.proto</code> 结尾的文件first.proto：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">//使用proto3语法 默认是proto2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义消息</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">FirstMessage</span>&#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">bool</span> is_male = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息定义"><a class="markdownIt-Anchor" href="#消息定义"></a> 消息定义</h2><h3 id="标量类型"><a class="markdownIt-Anchor" href="#标量类型"></a> 标量类型</h3><ol><li>数值型：数值型有很多种形式：double，float，int32，int64，uint32，uint64，sint32，sint64，fixed32，fixed64，sfixed32，sfixed64。<br />根据需要选择对应的数值类型。</li><li>布尔型：bool型可以有True和False两个值。</li><li>字符串：string表示任意长度的文本，但是它必须包含的是UTF-8编码或7位ASCII的文本，长度不可超过232。</li><li>字节型：bytes可表示任意的byte数组序列，但是长度也不可以超过232，最后是由你来决定如何解释这些bytes。例如你可以使用这个类型来表示一个图片。</li></ol><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="type">float</span> height = <span class="number">3</span>;</span><br><span class="line">    <span class="type">float</span> weight = <span class="number">4</span>;</span><br><span class="line">    <span class="type">bytes</span> avatar = <span class="number">5</span>;</span><br><span class="line">    <span class="type">string</span> email = <span class="number">6</span>;</span><br><span class="line">    <span class="type">bool</span> email_verified = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段的数值tag"><a class="markdownIt-Anchor" href="#字段的数值tag"></a> 字段的数值(Tag)</h3><p>在Protocol Buffers里面，字段的名其实没那么重要，但是写C#/go等语言代码的时候，字段名还是很重要的。<br />对于protobuf来说，这个tag是更为重要的。<br />可以使用的最小的tag数值是1，最大值是2^29-1，或者536,870,911。但是你不可以使用19000到19999之间的数，这部分数是保留的。</p><div class="tip warning"><p>从1到15的Tag数只占用1个字节的空间，所以它们应该被用在频繁使用的字段上。而从16到2047，则占用两个字节，它们可以用在不频繁使用的字段上。</p></div><h3 id="字段规则"><a class="markdownIt-Anchor" href="#字段规则"></a> 字段规则</h3><p>protobuf的字段必须满足以下两个规则之一</p><ol><li>单数字段(Singular）<br />大概意思就是指这个字段只能出现0或1次（不能超过一次），这也是proto3的默认字段规则。</li><li>重复字段(Repeated）<br />与singular相对的就是repeated。如果你想做一个list或数组的话，你可以使用重复字段这个概念。这个list可以有任何数量（包括0）的元素。它里面的值的顺序将会得到保留。</li></ol><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">string</span> phone_numbers = <span class="number">8</span>; <span class="comment">// 编码:packed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保留的字段"><a class="markdownIt-Anchor" href="#保留的字段"></a> 保留的字段</h3><p>如果你对你定义的消息类型进行了更新，例如删除某个字段或者注释掉某个字段，那么其它开发者在以后更新这个消息类型的时候可能会重新使用被你删除/注释掉的字段的数值（tag）。如果以后还需要使用这个消息类型的老版本的proto文件，那么这将会引起严重的问题，例如数据损坏、隐私漏洞等等。<br />一种避免此类事情发生的解决办法就是将你删除/注释掉的这些字段的数值（或/并且包括字段名，因为字段名也可引起JSON序列化的问题）标记为reserved，如果其他人再使用这个数值作为字段标识符，那么编译器就会有错误提示。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    reserved <span class="number">9</span>, <span class="number">10</span>, <span class="number">20</span> to <span class="number">100</span>, <span class="number">200</span> to max;</span><br><span class="line">    reserved <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="字段的默认值"><a class="markdownIt-Anchor" href="#字段的默认值"></a> 字段的默认值</h3><p>当消息被解析的时候，如果编码的消息里不含有特定的一个singular元素，那么在被解析对象里相应的字段就会被设为默认值。<br />常用类型的默认值如下：</p><ul><li>string：空字符串</li><li>bytes：空的byte数组</li><li>bool：false</li><li>数值型：0</li><li>枚举enum：枚举里定义的第一个枚举值，值必须是0</li><li>repeated：通常是相应开发语言里的空list</li><li>还有个消息类型的字段，它的默认值和开发语言有关，这个以后再说。</li></ul><p>默认值在更新Protocol Buffer消息定义的时候有很重要的作用，它可以防止对现有代码/新代码造成破坏性影响。它们也可以保证字段永远不会有null值。<br />但是，默认值还是非常危险的：<br />你无法区分这个默认值到底是来白一个去失的字段还是字段的实际值正好等于默认值。</p><p><strong>应该怎么办？</strong><br />需要保证这个默认值对于业务来说是一个毫无意义的值。例如int32pop(入口)默认值就可以设置为-1.<br />再就是，可能需要在你的代码里来做一些对默认值的判断，从而进行处理。</p><h4 id="枚举"><a class="markdownIt-Anchor" href="#枚举"></a> 枚举</h4><p>枚举里面定义的第一个值就是这个枚举的默认值。<br />Enum的tag必须从0开始，所以0就是枚举的数值默认值。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span> &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    Gender gender = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">enum </span><span class="title class_">Gender</span> &#123;</span><br><span class="line">        UNKNOWN = <span class="number">0</span>;</span><br><span class="line">        MALE = <span class="number">1</span>;</span><br><span class="line">        FEMALE = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为枚举值起别名</strong></p><p>枚举值是可以起别名的，起别名的作用就是允许两个枚举值拥有同一个数值。<br />要想起别名，首先需要设置allow_alias这个option为true<br />然后我们为FEMALE这个枚举值起了一个别名叫做WOMAN，它们的数值是一样的。同样的MAN是MALE的数值也是一样的。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span> &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    Gender gender = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">enum </span><span class="title class_">Gender</span> &#123;</span><br><span class="line">        <span class="keyword">option</span> allow_alias = <span class="literal">true</span>;</span><br><span class="line">        UNKNOWN = <span class="number">0</span>;</span><br><span class="line">        MALE = <span class="number">1</span>;</span><br><span class="line">        FEMALE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        MAN = <span class="number">1</span>;</span><br><span class="line">        WOMAN = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举里面的常量的值必须不能超过32位整型的数值，不建议使用负数。<br />枚举可以定义在message里面，也可以在外边单独定义以便复用。如果另一个消息想使用Person里面这个Gender枚举，那么可以使用Person.Gender这这种形式。</p><h4 id="使用其它的信息类型"><a class="markdownIt-Anchor" href="#使用其它的信息类型"></a> 使用其它的信息类型</h4><p>可以使用其它的信息类型作为字段的类型。</p><p>新建date.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Date</span>&#123;</span><br><span class="line">    <span class="type">int32</span> year = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int32</span> month = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int32</span> day = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在person.proto中使用</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;date.proto&quot;</span>; <span class="comment">// 导入date.proto</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    Date birthday = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消息嵌套</strong></p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;date.proto&quot;</span>; <span class="comment">// 导入date.proto</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span> &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">repeated</span> Address address = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 嵌套定义</span></span><br><span class="line">    <span class="keyword">message </span><span class="title class_">Address</span>&#123;</span><br><span class="line">        <span class="type">string</span> province = <span class="number">1</span>;</span><br><span class="line">        <span class="type">string</span> city = <span class="number">2</span>;</span><br><span class="line">        <span class="type">string</span> zip_code = <span class="number">3</span>;</span><br><span class="line">        <span class="type">string</span> street = <span class="number">4</span>;</span><br><span class="line">        <span class="type">string</span> number = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>打包</strong><br />你可以向proto文件添加可选的打包（package）说明符，以避免消息类型间的名称冲突，打包是很有必要的。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;date.proto&quot;</span>; <span class="comment">// 导入date.proto</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> my.project; <span class="comment">// 定义包名,即命名空间 C# namespace:My.Project</span></span><br><span class="line"><span class="keyword">option</span> csharp_namespace = <span class="string">&quot;My.WebApis&quot;</span>; <span class="comment">// 指定C#命名空间</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="设置protocolbuffers编译器"><a class="markdownIt-Anchor" href="#设置protocolbuffers编译器"></a> 设置ProtocolBuffers编译器</h2><p>protoc编译器主要就是用来生成代码的，它的下载地址目前是：<a href="https://github.com/protocolbuffers/protobuf/releases/">https://github.com/protocolbuffers/protobuf/releases/</a></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240807173102.png" alt="image-20240807173101677" /></p><p>解压完后添加bin文件夹到环境变量中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">==================添加===================</span></span><br><span class="line">export PATH=/home/liaojie1314/env/protoc/bin:$PATH # 根据你的bin文件夹修改/home/liaojie1314/env/protoc/bin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">=========================================</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>查看是否成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240807173447.png" alt="image-20240807173447158" /></p><p>出现内容说明安装成功。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240807173658.png" alt="image-20240807173658255" /></p><h3 id="生成源文件"><a class="markdownIt-Anchor" href="#生成源文件"></a> 生成源文件</h3><p><strong>csharp</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc first.proto --csharp_out=csharp</span><br></pre></td></tr></table></figure><div class="tip warning"><p>需要提前创建csharp文件夹</p></div><p>发现在csharp文件下生成了一个First.cs文件。</p><div class="tip warning"><p>这个文件我们不要修改，可以把它看成是一个库，我们只需要调用就行</p></div><p>一次性生成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc *.proto --csharp_out=csharp</span><br></pre></td></tr></table></figure><h2 id="go语言例子"><a class="markdownIt-Anchor" href="#go语言例子"></a> go语言例子</h2><h3 id="创建项目"><a class="markdownIt-Anchor" href="#创建项目"></a> 创建项目</h3><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240807175538.png" alt="image-20240807175537991" style="zoom:67%;" /><h3 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure><h3 id="编写proto文件"><a class="markdownIt-Anchor" href="#编写proto文件"></a> 编写proto文件</h3><p>位置 <code>src-&gt;proto-&gt;person.proto</code>:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;src/proto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">PersonMessage</span>&#123;</span><br><span class="line">  <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">  <span class="type">bool</span> is_adult = <span class="number">2</span>;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="type">int32</span> lucky_numbers = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成go代码"><a class="markdownIt-Anchor" href="#生成go代码"></a> 生成go代码</h3><p>在项目根目录下运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --proto_path src/ --go_out=./ src/proto/person.proto</span><br></pre></td></tr></table></figure><p>发现生成了 <code>person.pb.go</code> 文件</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240809191946.png" alt="image-20240809191945931" /></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Code generated by protoc-gen-go. DO NOT EDIT.</span></span><br><span class="line"><span class="comment">// versions:</span></span><br><span class="line"><span class="comment">//  protoc-gen-go v1.34.2</span></span><br><span class="line"><span class="comment">//  protoc        v3.20.3</span></span><br><span class="line"><span class="comment">// source: proto/person.proto</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> proto</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    protoreflect <span class="string">&quot;google.golang.org/protobuf/reflect/protoreflect&quot;</span></span><br><span class="line">    protoimpl <span class="string">&quot;google.golang.org/protobuf/runtime/protoimpl&quot;</span></span><br><span class="line">    reflect <span class="string">&quot;reflect&quot;</span></span><br><span class="line">    sync <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    <span class="comment">// Verify that this generated code is sufficiently up-to-date.</span></span><br><span class="line">    _ = protoimpl.EnforceVersion(<span class="number">20</span> - protoimpl.MinVersion)</span><br><span class="line">    <span class="comment">// Verify that runtime/protoimpl is sufficiently up-to-date.</span></span><br><span class="line">    _ = protoimpl.EnforceVersion(protoimpl.MaxVersion - <span class="number">20</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PersonMessage <span class="keyword">struct</span> &#123; <span class="comment">// message 对应于 go 中 struct</span></span><br><span class="line">    state         protoimpl.MessageState</span><br><span class="line">    sizeCache     protoimpl.SizeCache</span><br><span class="line">    unknownFields protoimpl.UnknownFields</span><br><span class="line"></span><br><span class="line">    Id           <span class="type">int32</span>   <span class="string">`protobuf:&quot;varint,1,opt,name=id,proto3&quot; json:&quot;id,omitempty&quot;`</span> <span class="comment">//反射</span></span><br><span class="line">    IsAdult      <span class="type">bool</span>    <span class="string">`protobuf:&quot;varint,2,opt,name=is_adult,json=isAdult,proto3&quot; json:&quot;is_adult,omitempty&quot;`</span></span><br><span class="line">    Name         <span class="type">string</span>  <span class="string">`protobuf:&quot;bytes,3,opt,name=name,proto3&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class="line">    LuckyNumbers []<span class="type">int32</span> <span class="string">`protobuf:&quot;varint,4,rep,packed,name=lucky_numbers,json=luckyNumbers,proto3&quot; json:&quot;lucky_numbers,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *PersonMessage)</span></span> Reset() &#123;</span><br><span class="line">    *x = PersonMessage&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> protoimpl.UnsafeEnabled &#123;</span><br><span class="line">       mi := &amp;file_proto_person_proto_msgTypes[<span class="number">0</span>]</span><br><span class="line">       ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))</span><br><span class="line">       ms.StoreMessageInfo(mi)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *PersonMessage)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> protoimpl.X.MessageStringOf(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*PersonMessage)</span></span> ProtoMessage() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *PersonMessage)</span></span> ProtoReflect() protoreflect.Message &#123;</span><br><span class="line">    mi := &amp;file_proto_person_proto_msgTypes[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> protoimpl.UnsafeEnabled &amp;&amp; x != <span class="literal">nil</span> &#123;</span><br><span class="line">       ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))</span><br><span class="line">       <span class="keyword">if</span> ms.LoadMessageInfo() == <span class="literal">nil</span> &#123;</span><br><span class="line">          ms.StoreMessageInfo(mi)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ms</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mi.MessageOf(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deprecated: Use PersonMessage.ProtoReflect.Descriptor instead.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*PersonMessage)</span></span> Descriptor() ([]<span class="type">byte</span>, []<span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> file_proto_person_proto_rawDescGZIP(), []<span class="type">int</span>&#123;<span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *PersonMessage)</span></span> GetId() <span class="type">int32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> x.Id</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *PersonMessage)</span></span> GetIsAdult() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> x.IsAdult</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *PersonMessage)</span></span> GetName() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> x.Name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *PersonMessage)</span></span> GetLuckyNumbers() []<span class="type">int32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> x.LuckyNumbers</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> File_proto_person_proto protoreflect.FileDescriptor</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> file_proto_person_proto_rawDesc = []<span class="type">byte</span>&#123;</span><br><span class="line">    <span class="number">0x0a</span>, <span class="number">0x12</span>, <span class="number">0x70</span>, <span class="number">0x72</span>, <span class="number">0x6f</span>, <span class="number">0x74</span>, <span class="number">0x6f</span>, <span class="number">0x2f</span>, <span class="number">0x70</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x6f</span>, <span class="number">0x6e</span>, <span class="number">0x2e</span>, <span class="number">0x70</span>,</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0x6f</span>, <span class="number">0x74</span>, <span class="number">0x6f</span>, <span class="number">0x22</span>, <span class="number">0x73</span>, <span class="number">0x0a</span>, <span class="number">0x0d</span>, <span class="number">0x50</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x6f</span>, <span class="number">0x6e</span>, <span class="number">0x4d</span>, <span class="number">0x65</span>,</span><br><span class="line">    <span class="number">0x73</span>, <span class="number">0x73</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x65</span>, <span class="number">0x12</span>, <span class="number">0x0e</span>, <span class="number">0x0a</span>, <span class="number">0x02</span>, <span class="number">0x69</span>, <span class="number">0x64</span>, <span class="number">0x18</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x01</span>, <span class="number">0x28</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x52</span>, <span class="number">0x02</span>, <span class="number">0x69</span>, <span class="number">0x64</span>, <span class="number">0x12</span>, <span class="number">0x19</span>, <span class="number">0x0a</span>, <span class="number">0x08</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x5f</span>, <span class="number">0x61</span>, <span class="number">0x64</span>, <span class="number">0x75</span>, <span class="number">0x6c</span>,</span><br><span class="line">    <span class="number">0x74</span>, <span class="number">0x18</span>, <span class="number">0x02</span>, <span class="number">0x20</span>, <span class="number">0x01</span>, <span class="number">0x28</span>, <span class="number">0x08</span>, <span class="number">0x52</span>, <span class="number">0x07</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x41</span>, <span class="number">0x64</span>, <span class="number">0x75</span>, <span class="number">0x6c</span>, <span class="number">0x74</span>,</span><br><span class="line">    <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x0a</span>, <span class="number">0x04</span>, <span class="number">0x6e</span>, <span class="number">0x61</span>, <span class="number">0x6d</span>, <span class="number">0x65</span>, <span class="number">0x18</span>, <span class="number">0x03</span>, <span class="number">0x20</span>, <span class="number">0x01</span>, <span class="number">0x28</span>, <span class="number">0x09</span>, <span class="number">0x52</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x6e</span>, <span class="number">0x61</span>, <span class="number">0x6d</span>, <span class="number">0x65</span>, <span class="number">0x12</span>, <span class="number">0x23</span>, <span class="number">0x0a</span>, <span class="number">0x0d</span>, <span class="number">0x6c</span>, <span class="number">0x75</span>, <span class="number">0x63</span>, <span class="number">0x6b</span>, <span class="number">0x79</span>, <span class="number">0x5f</span>, <span class="number">0x6e</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x6d</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x18</span>, <span class="number">0x04</span>, <span class="number">0x20</span>, <span class="number">0x03</span>, <span class="number">0x28</span>, <span class="number">0x05</span>, <span class="number">0x52</span>, <span class="number">0x0c</span>, <span class="number">0x6c</span>, <span class="number">0x75</span>, <span class="number">0x63</span>,</span><br><span class="line">    <span class="number">0x6b</span>, <span class="number">0x79</span>, <span class="number">0x4e</span>, <span class="number">0x75</span>, <span class="number">0x6d</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x42</span>, <span class="number">0x0b</span>, <span class="number">0x5a</span>, <span class="number">0x09</span>, <span class="number">0x73</span>, <span class="number">0x72</span>, <span class="number">0x63</span>,</span><br><span class="line">    <span class="number">0x2f</span>, <span class="number">0x70</span>, <span class="number">0x72</span>, <span class="number">0x6f</span>, <span class="number">0x74</span>, <span class="number">0x6f</span>, <span class="number">0x62</span>, <span class="number">0x06</span>, <span class="number">0x70</span>, <span class="number">0x72</span>, <span class="number">0x6f</span>, <span class="number">0x74</span>, <span class="number">0x6f</span>, <span class="number">0x33</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    file_proto_person_proto_rawDescOnce sync.Once</span><br><span class="line">    file_proto_person_proto_rawDescData = file_proto_person_proto_rawDesc</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">file_proto_person_proto_rawDescGZIP</span><span class="params">()</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    file_proto_person_proto_rawDescOnce.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       file_proto_person_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_person_proto_rawDescData)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> file_proto_person_proto_rawDescData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> file_proto_person_proto_msgTypes = <span class="built_in">make</span>([]protoimpl.MessageInfo, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> file_proto_person_proto_goTypes = []any&#123;</span><br><span class="line">    (*PersonMessage)(<span class="literal">nil</span>), <span class="comment">// 0: PersonMessage</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> file_proto_person_proto_depIdxs = []<span class="type">int32</span>&#123;</span><br><span class="line">    <span class="number">0</span>, <span class="comment">// [0:0] is the sub-list for method output_type</span></span><br><span class="line">    <span class="number">0</span>, <span class="comment">// [0:0] is the sub-list for method input_type</span></span><br><span class="line">    <span class="number">0</span>, <span class="comment">// [0:0] is the sub-list for extension type_name</span></span><br><span class="line">    <span class="number">0</span>, <span class="comment">// [0:0] is the sub-list for extension extendee</span></span><br><span class="line">    <span class="number">0</span>, <span class="comment">// [0:0] is the sub-list for field type_name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123; file_proto_person_proto_init() &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">file_proto_person_proto_init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> File_proto_person_proto != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !protoimpl.UnsafeEnabled &#123;</span><br><span class="line">       file_proto_person_proto_msgTypes[<span class="number">0</span>].Exporter = <span class="function"><span class="keyword">func</span><span class="params">(v any, i <span class="type">int</span>)</span></span> any &#123;</span><br><span class="line">          <span class="keyword">switch</span> v := v.(*PersonMessage); i &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">             <span class="keyword">return</span> &amp;v.state</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">             <span class="keyword">return</span> &amp;v.sizeCache</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">             <span class="keyword">return</span> &amp;v.unknownFields</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">type</span> x <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    out := protoimpl.TypeBuilder&#123;</span><br><span class="line">       File: protoimpl.DescBuilder&#123;</span><br><span class="line">          GoPackagePath: reflect.TypeOf(x&#123;&#125;).PkgPath(),</span><br><span class="line">          RawDescriptor: file_proto_person_proto_rawDesc,</span><br><span class="line">          NumEnums:      <span class="number">0</span>,</span><br><span class="line">          NumMessages:   <span class="number">1</span>,</span><br><span class="line">          NumExtensions: <span class="number">0</span>,</span><br><span class="line">          NumServices:   <span class="number">0</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">       GoTypes:           file_proto_person_proto_goTypes,</span><br><span class="line">       DependencyIndexes: file_proto_person_proto_depIdxs,</span><br><span class="line">       MessageInfos:      file_proto_person_proto_msgTypes,</span><br><span class="line">    &#125;.Build()</span><br><span class="line">    File_proto_person_proto = out.File</span><br><span class="line">    file_proto_person_proto_rawDesc = <span class="literal">nil</span></span><br><span class="line">    file_proto_person_proto_goTypes = <span class="literal">nil</span></span><br><span class="line">    file_proto_person_proto_depIdxs = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>该文件为生成文件，不要修改</p></div><h3 id="编写go代码"><a class="markdownIt-Anchor" href="#编写go代码"></a> 编写go代码</h3><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/jsonpb&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang/protobuf/proto&quot;</span></span><br><span class="line">personProto <span class="string">&quot;github.com/liaojie1314/protobuf-go/src/proto&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//写入文件</span></span><br><span class="line">pm := NewPersonMessage()</span><br><span class="line"><span class="comment">//_ = writeToFile(&quot;person.bin&quot;, pm)</span></span><br><span class="line"><span class="comment">//读取文件信息</span></span><br><span class="line">blank := &amp;personProto.PersonMessage&#123;&#125;</span><br><span class="line"><span class="comment">//_ = readFromFile(&quot;person.bin&quot;, blank)</span></span><br><span class="line"><span class="comment">//fmt.Println(blank)</span></span><br><span class="line"><span class="comment">//转换为JSON</span></span><br><span class="line">pmStr := toJson(pm)</span><br><span class="line">log.Println(pmStr)</span><br><span class="line"><span class="comment">//JSON转换为PB</span></span><br><span class="line">_ = fromJson(pmStr, blank)</span><br><span class="line">log.Println(blank)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">toJson</span><span class="params">(pb proto.Message)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">marshaler := jsonpb.Marshaler&#123;Indent: <span class="string">&quot;    &quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">str, err := marshaler.MarshalToString(pb)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;转换为JSON失败&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fromJson</span><span class="params">(in <span class="type">string</span>, pb proto.Message)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">err := jsonpb.UnmarshalString(in, pb)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;JSON转换为PB失败&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeToFile</span><span class="params">(fileName <span class="type">string</span>, pb proto.Message)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">dataBytes, err := proto.Marshal(pb)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;序列化失败&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="keyword">if</span> err := ioutil.WriteFile(fileName, dataBytes, <span class="number">0644</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;写入文件失败&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;写入文件成功&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFromFile</span><span class="params">(fileName <span class="type">string</span>, pb proto.Message)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line">dataBytes, err := ioutil.ReadFile(fileName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;读取文件失败&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="keyword">if</span> err := proto.Unmarshal(dataBytes, pb); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;反序列化失败&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;读取文件成功&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPersonMessage</span><span class="params">()</span></span> *personProto.PersonMessage &#123;</span><br><span class="line">pm := personProto.PersonMessage&#123;</span><br><span class="line">Id:           <span class="number">1234</span>,</span><br><span class="line">IsAdult:      <span class="literal">true</span>,</span><br><span class="line">Name:         <span class="string">&quot;YuanYuan&quot;</span>,</span><br><span class="line">LuckyNumbers: []<span class="type">int32</span>&#123;<span class="number">6</span>, <span class="number">8</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;pm</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240809202121.png" alt="image-20240809202120835" /></p><h3 id="枚举使用"><a class="markdownIt-Anchor" href="#枚举使用"></a> 枚举使用</h3><p>enum.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;src/proto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">EnumMessage</span>&#123;</span><br><span class="line">  <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">  Gender gender = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum </span><span class="title class_">Gender</span>&#123;</span><br><span class="line">  <span class="keyword">option</span> allow_alias = <span class="literal">true</span>;</span><br><span class="line">  NOT_SPECIFIED = <span class="number">0</span>;</span><br><span class="line">  WOMAN = <span class="number">1</span>;</span><br><span class="line">  MAN = <span class="number">2</span>;</span><br><span class="line">  FEMALE = <span class="number">1</span>;</span><br><span class="line">  MALE = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成go代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --proto_path src/ --go_out=./ src/proto/enum.proto</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    myProto <span class="string">&quot;github.com/liaojie1314/protobuf-go/src/proto&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    em := NewEnumMessage()</span><br><span class="line">    fmt.Println(myProto.Gender_name[<span class="type">int32</span>(em.Gender)])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewEnumMessage</span><span class="params">()</span></span> *myProto.EnumMessage &#123;</span><br><span class="line">    em := myProto.EnumMessage&#123;</span><br><span class="line">       Id:     <span class="number">888</span>,</span><br><span class="line">       Gender: myProto.Gender_MALE,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;em</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂类型使用"><a class="markdownIt-Anchor" href="#复杂类型使用"></a> 复杂类型使用</h3><p>complex.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;src/proto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">DepartmentMessage</span> &#123;</span><br><span class="line">  <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> EmployeeMessage employees = <span class="number">3</span>;</span><br><span class="line">  DepartmentMessage parent_department = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">repeated</span> DepartmentMessage children_department = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">EmployeeMessage</span> &#123;</span><br><span class="line">  <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成go代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --proto_path src/ --go_out=./ src/proto/complex.proto</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    myProto <span class="string">&quot;github.com/liaojie1314/protobuf-go/src/proto&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dm := NewDepartMessage()</span><br><span class="line">    fmt.Println(dm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDepartMessage</span><span class="params">()</span></span> *myProto.DepartmentMessage &#123;</span><br><span class="line">    dm := myProto.DepartmentMessage&#123;</span><br><span class="line">       Id:   <span class="number">111</span>,</span><br><span class="line">       Name: <span class="string">&quot;开发部&quot;</span>,</span><br><span class="line">       Employees: []*myProto.EmployeeMessage&#123;</span><br><span class="line">          &#123;</span><br><span class="line">             Id:   <span class="number">22</span>,</span><br><span class="line">             Name: <span class="string">&quot;YuanYuan&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">             Id:   <span class="number">8888</span>,</span><br><span class="line">             Name: <span class="string">&quot;liaojie1314&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">       ParentDepartment: &amp;myProto.DepartmentMessage&#123;</span><br><span class="line">          Id:   <span class="number">1122</span>,</span><br><span class="line">          Name: <span class="string">&quot;总公司&quot;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;dm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240809204119.png" alt="image-20240809204118945" /></p><h2 id="更新消息类型"><a class="markdownIt-Anchor" href="#更新消息类型"></a> 更新消息类型</h2><h3 id="需求会发生变化"><a class="markdownIt-Anchor" href="#需求会发生变化"></a> 需求会发生变化</h3><p>有一些字段可能会发生变化，可能会添加一些字段，也可能会删除一些字段。<br />但是可能有很多程序正在使用/读取你的Protocol Buffer的消息，但是它们没法都随着需求进行更新。<br />所以，在你对源数据进行演进的时候，一定不要引起破坏性变化，否则其它的程序可能就无法正常工作了。</p><h3 id="两种变更情景"><a class="markdownIt-Anchor" href="#两种变更情景"></a> 两种变更情景</h3><p>向前兼容变更：使用新的.proto文件来写数据----从旧的.proto文件读取数据<br />向后兼容变更：使用旧的.proto文件来写数据----从新的.proto文件读取数据</p><h3 id="更新消息类型的规则"><a class="markdownIt-Anchor" href="#更新消息类型的规则"></a> 更新消息类型的规则</h3><p>不要修改任何现有字段的数字（tag）<br />你可以添加新的字段，那些使用旧的消息格式的代码仍然可以将消息序列化，您应该注意这些元素的默认值，以便新代码可以与旧代码生成的消息正确交互。类似的，新代码所创建的消息也可以被旧代码解析：旧的二进制在解析的时候会忽略新的字段。<br />字段可以被删除，只要它们的数字（tag）在更新后的消息类型中不再使用即可。你也可以把字段名改为使用“OBSOLETE_&quot;前而不是删除字段，或者把这些字段的数字（tag）进行保留（reserved），以免未来其它开发者不消息使用了删除字段的数字。<br />对于数据类型的变化，例如int32到int64，string到bytes等等，可以参考官方文档：<br /><a href="https://developers.google.com/protocol-buffers/docs/proto3#updating%E3%80%82%E4%BD%86%E6%98%AF%E5%BB%BA%E8%AE%AE%E8%BF%98%E6%98%AF%E5%B0%BD%E9%87%8F%E4%B8%8D%E8%A6%81%E5%8E%BB%E4%BF%AE%E6%94%B9%E5%AD%97%E6%AE%B5%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%82">https://developers.google.com/protocol-buffers/docs/proto3#updating。但是建议还是尽量不要去修改字段的数据类型。</a></p><h2 id="身份认证"><a class="markdownIt-Anchor" href="#身份认证"></a> 身份认证</h2><p>这里指的不是用户的身份认证，而是指多个server和client之间，它们如何识别出来谁是谁，并且能安全的进行消息传输。<br />在身份认证这方面，gRPC一共有4种身份认证的机制：</p><ul><li>不采取任何措施的连接，也就是不安全的连接。</li><li>TLS/SSL连接</li><li>基于GoogleToken 的身份认证。</li><li>自定义的身份认证提供商。</li></ul><h2 id="消息传输类型"><a class="markdownIt-Anchor" href="#消息传输类型"></a> 消息传输类型</h2><p>gRPC的消息传输类型有4种</p><ul><li><p>第一种是一元的消息，就是简单的请求–响应。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240810161726.png" alt="image-20240810161726531" /></p></li><li><p>第二种是server streaming（流），server会把数据streaming回给client。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240810162001.png" alt="image-20240810162000966" /></p></li><li><p>第三种是client streaming，也就是client会把数据streaming给server。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240810162311.png" alt="image-20240810162310743" /></p></li><li><p>最后是双向streaming。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240810162204.png" alt="image-20240810162203623" /></p></li></ul><h2 id="go-server"><a class="markdownIt-Anchor" href="#go-server"></a> go Server</h2><h3 id="创建proto文件"><a class="markdownIt-Anchor" href="#创建proto文件"></a> 创建proto文件</h3><p>新建protos-&gt;messages.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;./pb&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;protos/enums.proto&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;google/protobuf/timestamp.proto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Employee</span>&#123;</span><br><span class="line">  <span class="type">int32</span> id = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int32</span> no = <span class="number">2</span>;</span><br><span class="line">  <span class="type">string</span> firstname = <span class="number">3</span>;</span><br><span class="line">  <span class="type">string</span> lastname = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  MonthSalary monthSalary = <span class="number">6</span>;</span><br><span class="line">  EmployeeStatus status = <span class="number">7</span>;</span><br><span class="line">  google.protobuf.Timestamp lastModified = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">  reserved <span class="number">5</span>;</span><br><span class="line">  reserved <span class="string">&quot;salary&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">MonthSalary</span> &#123;</span><br><span class="line">  <span class="type">float</span> basic = <span class="number">1</span>;</span><br><span class="line">  <span class="type">float</span> bonus = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">GetByNoRequest</span>&#123;</span><br><span class="line">  <span class="type">int32</span> no = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">GetAllRequest</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">AddPhotoRequest</span>&#123;</span><br><span class="line">  <span class="type">bytes</span> data = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">EmployeeRequest</span>&#123;</span><br><span class="line">  Employee employee = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">EmployeeResponse</span>&#123;</span><br><span class="line">  Employee employee = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">AddPhotoResponse</span>&#123;</span><br><span class="line">  <span class="type">bool</span> isOk = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">EmployeeService</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> GetByNo(GetByNoRequest) <span class="keyword">returns</span>(EmployeeResponse)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> GetAll(GetAllRequest) <span class="keyword">returns</span>(stream EmployeeResponse)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> AddPhoto(stream AddPhotoRequest) <span class="keyword">returns</span>(AddPhotoResponse)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Save(EmployeeRequest) <span class="keyword">returns</span>(EmployeeResponse)</span>;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SaveAll(stream EmployeeRequest) <span class="keyword">returns</span>(stream EmployeeResponse)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建protos-&gt;enums.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;./pb&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum </span><span class="title class_">EmployeeStatus</span> &#123;</span><br><span class="line">  NORMAL = <span class="number">0</span>;</span><br><span class="line">  ON_VACATION = <span class="number">1</span>;</span><br><span class="line">  RESIGNED = <span class="number">2</span>;</span><br><span class="line">  RETIRED = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加依赖"><a class="markdownIt-Anchor" href="#添加依赖"></a> 添加依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u google.golang.org/grpc </span><br></pre></td></tr></table></figure><h3 id="生成pb代码"><a class="markdownIt-Anchor" href="#生成pb代码"></a> 生成pb代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protoc ./protos/*.proto --go_out=./</span><br><span class="line">protoc ./protos/*.proto --go-grpc_out=./</span><br></pre></td></tr></table></figure><h3 id="编写go代码-2"><a class="markdownIt-Anchor" href="#编写go代码-2"></a> 编写go代码</h3><p>模拟数据库：data.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;google.golang.org/protobuf/types/known/timestamppb&quot;</span></span><br><span class="line"><span class="string">&quot;protobuf-server/pb&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> employees = []pb.Employee&#123;</span><br><span class="line">&#123;</span><br><span class="line">Id:        <span class="number">1</span>,</span><br><span class="line">No:        <span class="number">2001</span>,</span><br><span class="line">Firstname: <span class="string">&quot;Liao&quot;</span>,</span><br><span class="line">Lastname:  <span class="string">&quot;Jie&quot;</span>,</span><br><span class="line">MonthSalary: &amp;pb.MonthSalary&#123;</span><br><span class="line">Basic: <span class="number">1000</span>,</span><br><span class="line">Bonus: <span class="number">500</span>,</span><br><span class="line">&#125;,</span><br><span class="line">Status: pb.EmployeeStatus_NORMAL,</span><br><span class="line">LastModified: &amp;timestamppb.Timestamp&#123;</span><br><span class="line">Seconds: time.Now().Unix(),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">Id:        <span class="number">2</span>,</span><br><span class="line">No:        <span class="number">2002</span>,</span><br><span class="line">Firstname: <span class="string">&quot;Yang&quot;</span>,</span><br><span class="line">Lastname:  <span class="string">&quot;JingNi&quot;</span>,</span><br><span class="line">MonthSalary: &amp;pb.MonthSalary&#123;</span><br><span class="line">Basic: <span class="number">1000</span>,</span><br><span class="line">Bonus: <span class="number">500</span>,</span><br><span class="line">&#125;,</span><br><span class="line">Status: pb.EmployeeStatus_NORMAL,</span><br><span class="line">LastModified: &amp;timestamppb.Timestamp&#123;</span><br><span class="line">Seconds: time.Now().Unix(),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">Id:        <span class="number">3</span>,</span><br><span class="line">No:        <span class="number">2003</span>,</span><br><span class="line">Firstname: <span class="string">&quot;Yuan&quot;</span>,</span><br><span class="line">Lastname:  <span class="string">&quot;Yuan&quot;</span>,</span><br><span class="line">MonthSalary: &amp;pb.MonthSalary&#123;</span><br><span class="line">Basic: <span class="number">1000</span>,</span><br><span class="line">Bonus: <span class="number">500</span>,</span><br><span class="line">&#125;,</span><br><span class="line">Status: pb.EmployeeStatus_NORMAL,</span><br><span class="line">LastModified: &amp;timestamppb.Timestamp&#123;</span><br><span class="line">Seconds: time.Now().Unix(),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -newkey rsa:4096 -nodes -sha256 -keyout server_private.key -x509 -days 36500 -out server.pem -addext <span class="string">&quot;subjectAltName =DNS:www.yuanyuan.blog&quot;</span></span><br></pre></td></tr></table></figure><p>没安装openssl的可以使用 <code>sudo apt-get install openssl</code> 安装一下（ubuntu），其他平台自己搜素一下。</p><p>编写main.go：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;errors&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;golang.org/x/net/context&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/credentials&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/metadata&quot;</span></span><br><span class="line">    <span class="string">&quot;grpc-server/pb&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="string">&quot;:5001&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, port)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalln(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    creds, err := credentials.NewServerTLSFromFile(<span class="string">&quot;server.pem&quot;</span>, <span class="string">&quot;server_private.key&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalln(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    options := []grpc.ServerOption&#123;grpc.Creds(creds)&#125;</span><br><span class="line">    server := grpc.NewServer(options...)</span><br><span class="line">    pb.RegisterEmployeeServiceServer(server, <span class="built_in">new</span>(employeeService))</span><br><span class="line">    log.Println(<span class="string">&quot;Starting server on port &quot;</span> + port)</span><br><span class="line">    server.Serve(listen)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> employeeService <span class="keyword">struct</span> &#123;</span><br><span class="line">    pb.UnimplementedEmployeeServiceServer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *employeeService)</span></span> GetAll(req *pb.GetAllRequest, stream pb.EmployeeService_GetAllServer) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, e := <span class="keyword">range</span> employees &#123;</span><br><span class="line">       stream.Send(&amp;pb.EmployeeResponse&#123;</span><br><span class="line">          Employee: &amp;e,</span><br><span class="line">       &#125;)</span><br><span class="line">       time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *employeeService)</span></span> AddPhoto(stream pb.EmployeeService_AddPhotoServer) <span class="type">error</span> &#123;</span><br><span class="line">    md, ok := metadata.FromIncomingContext(stream.Context())</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">       fmt.Printf(<span class="string">&quot;Employee: %s\n&quot;</span>, md[<span class="string">&quot;no&quot;</span>][<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> img []<span class="type">byte</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">       data, err := stream.Recv()</span><br><span class="line">       <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">          fmt.Printf(<span class="string">&quot;File size: %d\n&quot;</span>, <span class="built_in">len</span>(img))</span><br><span class="line">          <span class="keyword">return</span> stream.SendAndClose(&amp;pb.AddPhotoResponse&#123;IsOk: <span class="literal">true</span>&#125;)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> err</span><br><span class="line">       &#125;</span><br><span class="line">       fmt.Printf(<span class="string">&quot;File received: %d\n&quot;</span>, <span class="built_in">len</span>(data.Data))</span><br><span class="line">       img = <span class="built_in">append</span>(img, data.Data...)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *employeeService)</span></span> Save(ctx context.Context, request *pb.EmployeeRequest) (*pb.EmployeeResponse, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">//TODO implement me</span></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;implement me&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *employeeService)</span></span> SaveAll(stream pb.EmployeeService_SaveAllServer) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">       emoReq, err := stream.Recv()</span><br><span class="line">       <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> err</span><br><span class="line">       &#125;</span><br><span class="line">       employees = <span class="built_in">append</span>(employees, *emoReq.Employee)</span><br><span class="line">       stream.Send(&amp;pb.EmployeeResponse&#123;</span><br><span class="line">          Employee: emoReq.Employee,</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, emp := <span class="keyword">range</span> employees &#123;</span><br><span class="line">       fmt.Println(emp)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *employeeService)</span></span> GetByNo(ctx context.Context,</span><br><span class="line">    req *pb.GetByNoRequest) (*pb.EmployeeResponse, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> _, e := <span class="keyword">range</span> employees &#123;</span><br><span class="line">       <span class="keyword">if</span> req.No == e.No &#123;</span><br><span class="line">          <span class="keyword">return</span> &amp;pb.EmployeeResponse&#123;</span><br><span class="line">             Employee: &amp;e,</span><br><span class="line">          &#125;, <span class="literal">nil</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;employee not found&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go-client"><a class="markdownIt-Anchor" href="#go-client"></a> go client</h2><p>创建项目，复制protos文件夹，证书文件，安装依赖，生成pb代码</p><p>编写main.go：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;golang.org/x/net/context&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/credentials&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/metadata&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/protobuf/types/known/timestamppb&quot;</span></span><br><span class="line">    <span class="string">&quot;grpc-client/pb&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="string">&quot;:5001&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    creds, err := credentials.NewClientTLSFromFile(<span class="string">&quot;server.pem&quot;</span>, <span class="string">&quot;www.yuanyuan.blog&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalln(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    options := []grpc.DialOption&#123;grpc.WithTransportCredentials(creds)&#125;</span><br><span class="line"></span><br><span class="line">    conn, err := grpc.Dial(<span class="string">&quot;localhost&quot;</span>+port, options...)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalln(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line">    client := pb.NewEmployeeServiceClient(conn)</span><br><span class="line">    <span class="comment">//getByNo(client)</span></span><br><span class="line">    <span class="comment">//getAll(client)</span></span><br><span class="line">    <span class="comment">//addPhoto(client)</span></span><br><span class="line">    saveAll(client)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveAll</span><span class="params">(client pb.EmployeeServiceClient)</span></span> &#123;</span><br><span class="line">    employees := []pb.Employee&#123;</span><br><span class="line">       pb.Employee&#123;</span><br><span class="line">          Id:        <span class="number">100</span>,</span><br><span class="line">          No:        <span class="number">1000</span>,</span><br><span class="line">          Firstname: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">          Lastname:  <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">          MonthSalary: &amp;pb.MonthSalary&#123;</span><br><span class="line">             Basic: <span class="number">10000</span>,</span><br><span class="line">             Bonus: <span class="number">2000</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          Status: pb.EmployeeStatus_NORMAL,</span><br><span class="line">          LastModified: &amp;timestamppb.Timestamp&#123;</span><br><span class="line">             Seconds: time.Now().Unix(),</span><br><span class="line">          &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">       pb.Employee&#123;</span><br><span class="line">          Id:        <span class="number">200</span>,</span><br><span class="line">          No:        <span class="number">2000</span>,</span><br><span class="line">          Firstname: <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">          Lastname:  <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">          MonthSalary: &amp;pb.MonthSalary&#123;</span><br><span class="line">             Basic: <span class="number">20000</span>,</span><br><span class="line">             Bonus: <span class="number">4000</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          Status: pb.EmployeeStatus_ON_VACATION,</span><br><span class="line">          LastModified: &amp;timestamppb.Timestamp&#123;</span><br><span class="line">             Seconds: time.Now().Unix(),</span><br><span class="line">          &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">       pb.Employee&#123;</span><br><span class="line">          Id:        <span class="number">300</span>,</span><br><span class="line">          No:        <span class="number">3000</span>,</span><br><span class="line">          Firstname: <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">          Lastname:  <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">          MonthSalary: &amp;pb.MonthSalary&#123;</span><br><span class="line">             Basic: <span class="number">30000</span>,</span><br><span class="line">             Bonus: <span class="number">6000</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          Status: pb.EmployeeStatus_ON_VACATION,</span><br><span class="line">          LastModified: &amp;timestamppb.Timestamp&#123;</span><br><span class="line">             Seconds: time.Now().Unix(),</span><br><span class="line">          &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stream, err := client.SaveAll(context.Background())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalln(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    finishChannel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       <span class="keyword">for</span> &#123;</span><br><span class="line">          res, err := stream.Recv()</span><br><span class="line">          <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">             finishChannel &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">             log.Fatalln(err.Error())</span><br><span class="line">          &#125;</span><br><span class="line">          fmt.Println(res.Employee)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">for</span> _, e := <span class="keyword">range</span> employees &#123;</span><br><span class="line">       err := stream.Send(&amp;pb.EmployeeRequest&#123;Employee: &amp;e&#125;)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          log.Fatalln(err.Error())</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stream.CloseSend()</span><br><span class="line">    &lt;-finishChannel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getByNo</span><span class="params">(client pb.EmployeeServiceClient)</span></span> &#123;</span><br><span class="line">    res, err := client.GetByNo(context.Background(), &amp;pb.GetByNoRequest&#123;No: <span class="number">2001</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalln(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(res.Employee)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAll</span><span class="params">(client pb.EmployeeServiceClient)</span></span> &#123;</span><br><span class="line">    stream, err := client.GetAll(context.Background(), &amp;pb.GetAllRequest&#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalln(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">       res, err := stream.Recv()</span><br><span class="line">       <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          log.Fatalln(err.Error())</span><br><span class="line">       &#125;</span><br><span class="line">       fmt.Println(res.Employee)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addPhoto</span><span class="params">(client pb.EmployeeServiceClient)</span></span> &#123;</span><br><span class="line">    imgFile, err := os.Open(<span class="string">&quot;avatar.png&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalln(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> imgFile.Close()</span><br><span class="line">    md := metadata.New(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;no&quot;</span>: <span class="string">&quot;2001&quot;</span>&#125;)</span><br><span class="line">    ctx := context.Background()</span><br><span class="line">    ctx = metadata.NewOutgoingContext(ctx, md)</span><br><span class="line"></span><br><span class="line">    stream, err := client.AddPhoto(ctx)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalln(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">       chunk := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">128</span>*<span class="number">1024</span>)</span><br><span class="line">       chunkSize, err := imgFile.Read(chunk)</span><br><span class="line">       <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          log.Fatalln(err.Error())</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> chunkSize &lt; <span class="built_in">len</span>(chunk) &#123;</span><br><span class="line">          chunk = chunk[:chunkSize]</span><br><span class="line">       &#125;</span><br><span class="line">       stream.Send(&amp;pb.AddPhotoRequest&#123;Data: chunk&#125;)</span><br><span class="line">       time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res, err := stream.CloseAndRecv()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       log.Fatalln(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(res.IsOk)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3><p>server：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240817191615.png" alt="image-20240817191615333" /></p><p>client：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240817191536.png" alt="image-20240817191536345" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;grpc&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#grpc&quot;&gt;&lt;/a&gt; gRPC&lt;/h2&gt;
&lt;h3 id=&quot;grpc入门&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#grpc入门&quot;&gt;&lt;/a&gt; gRPC</summary>
      
    
    
    
    <category term="编程进阶" scheme="https://www.yuanyuan.blog/categories/%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="gRPC" scheme="https://www.yuanyuan.blog/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>kotlin协程</title>
    <link href="https://www.yuanyuan.blog/posts/ba3d45fe.html"/>
    <id>https://www.yuanyuan.blog/posts/ba3d45fe.html</id>
    <published>2024-08-04T16:19:20.000Z</published>
    <updated>2025-02-22T12:17:28.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kotlin协程"><a class="markdownIt-Anchor" href="#kotlin协程"></a> Kotlin协程</h1><h2 id="协程是什么"><a class="markdownIt-Anchor" href="#协程是什么"></a> 协程是什么</h2><p>协程是一个与线程并列的概念，二者都是用来管理并发的，不过概念模型不太一样，有的编程语言用线程管理并发，有的使用协程，有的都用，所以kotlin的协程就是一个并发管理工具，定位和线程是一样的。因为kotlin是一门中间语言，它的代码最终还是要编译成Java字节码，这里讲都是<strong>Jvm上的协程</strong>，而Jvm提供的只有线程那一套，kotlin作为上层语言，是不可能绕过线程来创建新的并发实现的，那它是怎么办的呢？</p><p>实际上，kotlin协程的底层依然是通过Java的线程实现的，它把线程包起来，封装成一套新的API来让我们管理并发，它是一个用Java线程来实现的并发管理工具库。那问题就来了，我都有线程了，为什么要使用协程这个上层包装？</p><p>因为它包的好，虽然底层是线程，但协程比线程要好用。好用在哪呢？</p><p>协程有很多比线程好用的点，但其中最重要的一点就在于它能用线性的结构来写异步代码。</p><h3 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h3><h4 id="按调用栈分类"><a class="markdownIt-Anchor" href="#按调用栈分类"></a> 按调用栈分类</h4><p>通常我们提及调用栈，指的就是函数调用栈，是一种用来保保存函数调用时的状态信息的数据结构。</p><p>由于协程需要支持挂起、恢复，因此对于挂起点的状态保存就显得极其关键。类似地，线程会因为CPU调度权的切换而被中断，它的中断状态会保存在调用栈当中，因而协程的实现也可以按照是<br />否开辟相应的调用栈来分类</p><ul><li>有栈协程（Stackful Coroutine）：每一个协程都有自己的调用栈，有点类似于线程的调用栈，这种情况下的协程实现其实很大程度上接近线程，主要的不同体现在调度上。</li><li>无栈协程（Stackless Coroutine）：协程没有自己的调用栈，挂起点的状态通过状态机或者闭包等语法来实现。</li></ul><p>有栈协程的优点是可以在任意函数调用层级的任意位置挂起并转移调度权，例如Lua的协程。在这方面多数无栈协程就显得力不从心了，例如Python的Generator。通常，有栈协程总是会给协程开辟一块栈内存，因此内存开销也大大增加，而无栈协程在内存方面就比较有优势了。</p><p>当然也有反例。Go语言的goroutine可以认为是有栈协程的一个实现，不过Go运行时在这里做了大量优化，它的栈内存可以根据需要进行扩容和缩容，最小一般为内存页长4KB，比内核线程的栈空间（通常是MB级别）要小得多，可见它在内存方面相对轻量Kotlin的协程通常被认为是一种无栈协程的实现，它的控制流转依靠对协程体本身编译生成的状态机的状态流转来实现，变量保存也是通过闭包语法来实现的。不过，Kotlin的协程可以在挂起函数范围内的任意调用层次挂起，换句话说，我们启动一个Kotlin协程，可以在其中任意嵌套suspend函数，而这又恰恰是有栈协程最重要的特性之一。</p><p>Kotlin通过suspend函数嵌套调用的方式可以实现任意挂起函数调用层次的挂起。当然，想要在任意位置挂起，就需要对原有的函数进行增强。以Kotlin为例，这种情况下最终的协程实现就不需要挂起函数了，普通函数就相当于挂起函数。不过Kotlin的协程设计并没有采取这样的方案，其原因如下。</p><ul><li>实现这样的特性需要对普通函数的调用机制进行修改和增强，Kotlin所支持的所有运行环境（包括Java虚拟机、Node.js等）也都要提供相应的支持。这一点可以参考Java的协程项目Loom。</li><li>对于普通函数的增强调度切换协程很多时候变成了隐式的行为，至少不怎么明显，例如goroutine，一个API调用之后究竞会发生什么就成了运行时提供的“黑魔法”。</li><li>如果想要避免隐式调度，可以在设计API时保留基本的yield和resume作为协程转移调度权的手段供开发者调用，但这样又显得不够实用，需要进一步封装以达到易用的效果。</li></ul><p>Kotlin协程的实现很好地平衡了这一点，既避免了对运行环境的过分依赖，又能满足协程在任意挂起函数调用层次挂起的需求。</p><p>与开发者通过调用API显式地挂起协程相比，任意位置的挂起也可以用于运行时对协程执行的干预，这种挂起方式对于开发者不可见，因此是一种隐式的挂起操作。Go语言的goroutine可以通过对channel的读写来实现挂起和恢复。除了这种显式的调度权切换之外，Go运行时还会对长期占用调度权的goroutine进行隐式挂起并将调度权转移给其他goroutine，这实际上就是我们熟悉的抢占式调度了。</p><p>关于协程实现究竟属于有栈协程还是无栈协程的问题，实际上争论较多，争议点主要是调用栈本身的定义及协程实现形式上的差异。从狭义上讲，调用栈就是我们熟知的普通函数的调用栈；从广义上讲，只要是能够保存调用状态的栈都可以称为调用栈，因而有栈协程的定义也可以更加宽泛。本书中若无特别说明，调用栈均特指普通函数调用栈，并按照这个标准对协程进行分类。</p><h4 id="按调度方式分类"><a class="markdownIt-Anchor" href="#按调度方式分类"></a> 按调度方式分类</h4><p>调度过程中，根据协程调度权的转移目标的不同又可将协程分为<strong>对称协程</strong>和<strong>非对称协程</strong></p><ul><li>对称协程（Symmetric Coroutine）：任何一个协程都是相互独立且平等的，调度权可以在任意协程之间转移。</li><li>非对称协程（Asymmetric Coroutine）：协程出让调度权的目标只能是它的调用者，即协程之间存在调用和被调用关系。</li></ul><p>对称协程实际上已经非常接近线程的样子了，例如Go语言中的goroutine可以通过读写不同的channel来实现控制权的自由转移，而非对称协程的调用关系实际上更符合我们的思维方式。常见语言对协程的实现大多是非对称实现，例如Lua的协程中，当前协程调用yield总是会将调度权转移给之前调用它的协程；还有我们在前面提到的async/await，await时将调度权转移到异步调用中，异步调用返回结果或抛出异常时总是将调度权转移回await的位置。</p><p>从实现的角度来讲，非对称协程的实现更自然，也相对容易而我们只要对非对称协程稍作修改，即可实现对称协程的能力。在非对称协程的基础上，我们只需要添加一个中立的第三方作为协程调度权的分发中心，所有的协程在挂起时都将调度权转移给分发中心，分发中心根据参数来决定将调度权转移给哪个协程，例如Lua的第三方库coro (<a href="http://luapower.com/coro">http://luapower.com/coro</a>) 和Kotlin协程框架中基于Channel (<a href="https://kotlinlang.org/docs/channels.html">https://kotlinlang.org/docs/channels.html</a>) 的通信等。</p><h2 id="协程基础"><a class="markdownIt-Anchor" href="#协程基础"></a> 协程基础</h2><h3 id="切线程launch"><a class="markdownIt-Anchor" href="#切线程launch"></a> 切线程：launch()</h3><p>前面说到，对于Jvm上的kotlin协程就是个用线程来实现的并发管理库，而<strong>并发</strong>这个东西的内容十分复杂，大概分为三类：</p><ol><li>切线程（最基本）</li><li>在各个线程执行过程中等待别的线程，它属于线程之间在流程上的配合</li><li>互斥锁，它面对的是对于线程间的共享资源的保护，也就是所谓的线程安全</li></ol><p>我们为什么要切线程呢</p><p>最常见的原因就是我有代码要执行，但不希望它挡住我当前的线程，所以给它一个并行的线程来执行这段代码。可以切换到<strong>子线程</strong>或<strong>后台线程</strong>以及<strong>UI线程</strong>(Android或者swing)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java线程</span></span><br><span class="line">Thread &#123;</span><br><span class="line">&#125;.start()</span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line">thread &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程池</span></span><br><span class="line"><span class="keyword">val</span> executor = Executors.newCachedThreadPool()</span><br><span class="line">executor.execute &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们要使用协程，并需要引入协程依赖</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1&quot;</span>) <span class="comment">// Android</span></span><br><span class="line">implementation(<span class="string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>CoroutineScope</code> 的作用跟Executor在线程里的作用是类似的，不过CoroutineScope的功能范围更大一些，Executor本身就是一个线程池，而CoroutineScope里面也包含线程池，但线程池只是它功能的一部分，也是最重要的一部分。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> scope = CoroutineScope(EmptyCoroutineContext)</span><br><span class="line"><span class="comment">//启动协程</span></span><br><span class="line">scope.launch &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240804184300.png" alt="image-20240804184259881" /></p><p><code>CoroutineContext</code> 会提供启动协程会用到的上下文信息，比如线程池。调用launch方法启动协程，实际上就是切换线程。</p><p>execute是把代码装进一个Runnable对象，而协程是把代码装进一个函数类型的对象</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240804185002.png" alt="image-20240804185001706" /></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//线程池</span></span><br><span class="line">    println(<span class="string">&quot;Main thread: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> executor = Executors.newCachedThreadPool()</span><br><span class="line">    executor.execute &#123;</span><br><span class="line">        println(<span class="string">&quot;Executor thread: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> scope = CoroutineScope(EmptyCoroutineContext)</span><br><span class="line">    <span class="comment">//启动协程</span></span><br><span class="line">    scope.launch &#123;</span><br><span class="line">        println(<span class="string">&quot;Coroutine thread: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240804185526.png" alt="image-20240804185525897" /></p><p>其中<strong>管理任务执行的线程</strong>的工具叫 <code>ContinuationInterceptor</code> ，继续拦截器？，其实就是代码在往下执行之前先拦截住，做点别的操作再继续执行的意思，也就是<strong>拦截一下、做点别的工作、再继续执行</strong>，我们可以给出自己的实现类，但协程给我们提供了4个直接使用的实现类，放在了 <code>Dispatchers</code> 这个Object中：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240804201004.png" alt="image-20240804201004065" /></p><p>为什么叫Dispatchers，而不是叫Interceptors或者ContinuationInterceptors？</p><p>因为它们并不是直接实现ContinuationInterceptor，而是实现了它唯一的子类 <code> CoroutineDispatcher</code>,直译过来就是协程调度器，用来调度任务，也就是切线程。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240804201334.png" alt="image-20240804201334279" /></p><p>如果你没有指定任何ContinuationInterceptor，launch()启动的协程就会使用Default来调度任务，它提供一个全局的线程池来管理任务。跟它类似的还有一个叫IO，它也是提供后台线程的，但他俩的定位不一样。<code>Default</code>是来处理<strong>计算密集型</strong>任务的，<code>IO</code>是来处理<strong>IO密集型</strong>任务的。</p><p>Default：</p><ul><li>线程池大小：跟程序运行的设备的CPU可用核心数是相等的<ul><li>虽然线程数越多效率越高，但线程数超过CPU核心数时，效率就从升高变成降低了</li></ul></li></ul><p>IO：</p><ul><li>线程池大小：固定64线程<ul><li>当CPU核心数超过64时，就等于CPU核心数</li></ul></li></ul><div class="tip "><p>计算密集型：就是整个任务过程里，你的CPU是满负荷运转的，或者说，卡住你的执行流程的是你的CPU计算性能。比如：你在程序里用滤镜算法给图片加滤镜、图片压缩、媒体编解码，也包括普通工作，比如在内存里进行个字符串拼接之类的（不跟外界交互）。</p><p>IO密集型：与计算密集型相反，它指的是在整个任务里，CPU比较空闲，反而是IO工作（跟内存之外的世界进行数据交互：磁盘、网络）在耗时间。比如：读写磁盘、进行http请求</p></div><p>开启IO，默认为Default</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复用写法</span></span><br><span class="line"><span class="keyword">val</span> scope = CoroutineScope(Dispatchers.IO)</span><br><span class="line">scope.launch &#123;</span><br><span class="line">    println(<span class="string">&quot;Coroutine thread: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">// 每个launch指定</span></span><br><span class="line"><span class="keyword">val</span> scope = CoroutineScope(EmptyCoroutineContext)</span><br><span class="line">scope.launch(Dispatchers.IO) &#123;</span><br><span class="line">    println(<span class="string">&quot;Coroutine thread: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">scope.launch(Dispatchers.Default) &#123;</span><br><span class="line">    println(<span class="string">&quot;Coroutine thread: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main：在主线程执行（Android），swing会切换到事件分发线程，总之就是更新界面的线程。如果是Spring或者Ktor这种服务器程序，你填写Main就会在运行时报错，原因很简单，因为服务端框架不存在切到主线程的需求。</p><p>一般使用前面三个就行了，但如果你想自己创建线程池:</p><ol><li>使用newFixedThreadPoolContext</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> context = newFixedThreadPoolContext(<span class="number">20</span>, <span class="string">&quot;DIY&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> scope = CoroutineScope(context)</span><br><span class="line">scope.launch &#123;</span><br><span class="line">    println(<span class="string">&quot;Coroutine thread: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">context.close()</span><br></pre></td></tr></table></figure><p>该函数被标记为<code>@DelicateCoroutinesApi</code> 比较精细、容易出错，是因为它里面有一个线程池，而线程是比较耗资源的，我们在不使用时，记得及时把它关闭。关闭的方法也比较简单，因为它继承了 <code>ExecutorCoroutineDispatcher</code> 抽象类，而这个抽象类额外实现了 <code>Closeable</code> 接口，所以多了一个 <code>close</code> 函数。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240804205949.png" alt="image-20240804205949126" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240804210040.png" alt="image-20240804210040295" />可以使用 <code>@OptIn(DelicateCoroutinesApi::class)</code> 注解去除警告。<br />那为什么这个就需要关闭，而Default和IO就不需要关闭？</p><p>因为它们是全局的、永久存活的。而newFixedThreadPoolContext是我们自己创建的，需要我们自己管理生命周期。</p><ol start="2"><li>newSingleThreadContext单个线程</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> context = newSingleThreadContext(<span class="string">&quot;Single&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> scope = CoroutineScope(context)</span><br><span class="line">scope.launch &#123;</span><br><span class="line">    println(<span class="string">&quot;Coroutine thread: <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">context.close()</span><br></pre></td></tr></table></figure><p>内部其实是使用newFixedThreadPoolContext实现：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240804210951.png" alt="image-20240804210950934" /></p><p>而且它是实验性的，不建议使用。</p><p>此外系统还有一个ContinuationInterceptor：Unconfined，其实根本不会在实际开发中使用。就像名字一样，就是不进行限制的意思，用它启动协程，直接就执行里面代码，不切线程，而且它不适用于suspend挂起函数这种会自动切回原线程的方法。</p><h3 id="自动切回来挂起函数"><a class="markdownIt-Anchor" href="#自动切回来挂起函数"></a> 自动切回来：挂起函数</h3><p>我们在做界面开发时有个比较常见的场景需求是在UI线程去启动后台线程发起网络请求，请求结束后切回主线程刷新界面，如果不用协程也不难，只需要切换2次线程，2个回调就搞定了。而如果你用了网络请求库，你甚至可以只用一次回调就够了，因为网络库会帮你自动在后台进行请求，那么后台的这次回调那就不用自己写了，比如Java和Kotlin的HTTP库叫Retrofit，你只要把HTTP的API格式用接口的形式去声明出来</p><p>Retrofit简单使用</p><p>添加依赖：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;com.squareup.retrofit2:retrofit:2.11.0&quot;</span>)</span><br><span class="line">implementation(<span class="string">&quot;com.squareup.retrofit2:adapter-rxjava3:2.11.0&quot;</span>)</span><br><span class="line">implementation(<span class="string">&quot;com.squareup.retrofit2:converter-gson:2.11.0&quot;</span>)</span><br></pre></td></tr></table></figure><p>Api.kt</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> GITHUB_API = <span class="string">&quot;https://api.github.com/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Contributor</span>(</span><br><span class="line">    <span class="keyword">val</span> login: String,</span><br><span class="line">    <span class="keyword">val</span> contributions: <span class="built_in">Long</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GitHub</span>&#123;</span><br><span class="line">    <span class="meta">@GET(<span class="string">&quot;/repos/&#123;owner&#125;/&#123;repo&#125;/contributors&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">contributorsCall</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Path(<span class="string">&quot;owner&quot;</span>)</span> owner: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Path(<span class="string">&quot;repo&quot;</span>)</span> repo: <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: Call&lt;List&lt;Contributor&gt;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(<span class="string">&quot;/repos/&#123;owner&#125;/&#123;repo&#125;/contributors&quot;</span>)</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">contributors</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Path(<span class="string">&quot;owner&quot;</span>)</span> owner: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Path(<span class="string">&quot;repo&quot;</span>)</span> repo: <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: List&lt;Contributor&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(<span class="string">&quot;/repos/&#123;owner&#125;/&#123;repo&#125;/contributors&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">contributorsFuture</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Path(<span class="string">&quot;owner&quot;</span>)</span> owner: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Path(<span class="string">&quot;repo&quot;</span>)</span> repo: <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: CompletableFuture&lt;List&lt;Contributor&gt;&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> retrofit =</span><br><span class="line">    Retrofit.Builder().baseUrl(GITHUB_API)</span><br><span class="line">        .addCallAdapterFactory(RxJava3CallAdapterFactory.create())</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .build()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> gitHub: GitHub = retrofit.create(GitHub::<span class="keyword">class</span>.java)</span><br></pre></td></tr></table></figure><p>网络请求业务代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SuspendActivity</span> : <span class="type">ComponentActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> textView: TextView</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.suspend_layout)</span><br><span class="line">        textView = findViewById(R.id.suspendText)</span><br><span class="line">        callbackStyle()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">callbackStyle</span><span class="params">()</span></span> &#123;</span><br><span class="line">        gitHub.contributorsCall(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">            .enqueue(<span class="keyword">object</span> : Callback&lt;List&lt;Contributor&gt;&gt; &#123;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                    call: <span class="type">Call</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">                    response: <span class="type">Response</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">                )</span></span> &#123;</span><br><span class="line">                    showContributors(response.body()!!)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(p0: <span class="type">Call</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;, t: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">                    t.printStackTrace()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">coroutineStyle</span><span class="params">()</span></span> = CoroutineScope(Dispatchers.Main).launch &#123;</span><br><span class="line">        <span class="keyword">val</span> contributors = gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">        showContributors(contributors)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">showContributors</span><span class="params">(contributors: <span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;)</span></span> = contributors</span><br><span class="line">        .map &#123; <span class="string">&quot;<span class="subst">$&#123;it.login&#125;</span> (<span class="subst">$&#123;it.contributions&#125;</span>)&quot;</span> &#125;</span><br><span class="line">        .reduce &#123; acc, s -&gt; <span class="string">&quot;<span class="variable">$acc</span>\n<span class="variable">$s</span>&quot;</span> &#125;</span><br><span class="line">        .let &#123; textView.text = it &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240805111836.png" alt="image-20240805111835763" style="zoom:50%;" /><p>可以发现 <code>contributors</code> 函数我们给它标记上了 <code>suspend</code> 关键字，suspend意为挂起，那么这个函数就是一个挂起函数，那么什么是挂起函数呢？</p><p>挂起函数就是你在执行这个函数的时候，它所在的协程就被挂起了，或者说被暂停了。在kotlin里面，所谓协程被挂起，指的就是它不再占用它正在工作的线程，在这个例子里就是主线程，它的核心在于协程与线程的脱离，线程被让出了。同时，协程虽然被挂起了，但这个挂起函数并没有被挂起，或者说，其实就不存在<strong>挂起函数被挂起</strong>这个概念，协程里的挂起指的是挂起函数把协程给暂停了的意思，它会切换到指定的线程执行代码（这里是在后台线程执行网络请求），执行完后，协程恢复。所谓的协程恢复，其实就是协程继续回到自己的线程去执行挂起函数后面的代码。这么说来，挂起函数只有在协程(或者其他挂起函数)里面才有意义，不然它挂起谁呀，都没有对象。</p><p>这只是一个简单的例子，但也能看出协程的优势，一旦回调增多（容易发生<strong>回调地狱</strong>），协程的优点就更加明显。</p><p>除了我们这里使用的Retrofit支持协程，常用的还有Jetpack全家桶，比如：room、paging</p><h3 id="android项目里协程写法"><a class="markdownIt-Anchor" href="#android项目里协程写法"></a> Android项目里协程写法</h3><p>在Android应用的开发中，我们通常不用自己去创建这个CoroutineScope，而是使用Jetpack给我们提供的成品，Android的Jetpack库里有一些针对kotlin语言特性的扩展，也就是所谓的 <code>KTX</code> ，其中 <code> lifecycle</code> 这个库给我们提供了一个扩展属性 <code>lifecycleScope</code>  ，他是 <code>LifecycleOwner</code> 的扩展属性，而 <code>LifecycleOwner</code> 是一个接口，我们常用的 <code>ComponentActivity</code> 和 <code>Fragment</code> 都实现了这个接口。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240805112405.png" alt="image-20240805112405095" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240805112731.png" alt="image-20240805112731473" /></p><p>lifecycleScope:</p><ol><li>与当前组件声明周期绑定，你在Activity里调用它，它就与Activity生命周期绑定，就是在Activity调用onDestory时自动帮你取消整个CoroutineScope所包含的所有协程</li><li>有内置的ContinuationInterceptor，它内置的是主线程</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240805114512.png" alt="image-20240805114512193" /></p><p>这个 <code>immediate</code> 也是一个 <code>CoroutineDispatcher</code> 。它和Main一样，也是指定的主线程，不过Main启动的协程，不管当前线程是什么，都会把整个协程的代码块包起来，然后用 <code>Handler.post()</code> 抛到主线程去，而Main.immediate会先看一下是不是已经在主线程了，如果不在主线程，就用Handler.post()，如果已经在主线程了，那就直接执行协程的代码。一般情况下，immediate要比直接用Main好，因为它属于一个已经性能优化 的版本。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">coroutineStyle</span><span class="params">()</span></span> = lifecycleScope.launch &#123;</span><br><span class="line">    <span class="keyword">val</span> contributors = gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">    showContributors(contributors)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们不是在Activity或者Fragment中，而是用Jetpack里面的ViewModel组件</p><p>首先你需要引入它的KTX依赖</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyViewModel</span>:<span class="type">ViewModel</span>()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">viewModelTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        viewModelScope.launch &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240805120232.png" alt="image-20240805120231972" /></p><p><code>viewModelScope</code> 是ViewModel的扩展属性，内置的也是Main.immediate，用法与lifecycleScope一致。</p><h3 id="withcontext手动切线程"><a class="markdownIt-Anchor" href="#withcontext手动切线程"></a> withContext()：手动切线程</h3><p>？切线程不是讲过了吗，用launch呀。</p><p>launch()开启的是并行的切线程，但我们可能还需要串行的切线程。</p><p>并行：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CoroutineScope(Dispatchers.Main).launch &#123;</span><br><span class="line">    println(<span class="string">&quot;Test: 1 - launch + <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    launch(Dispatchers.IO) &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>) <span class="comment">// 模拟耗时，sleep()最准确</span></span><br><span class="line">        <span class="comment">//delay(2000)</span></span><br><span class="line">        println(<span class="string">&quot;Test: 2 - launch + <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Test: 3 - launch + <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240806100638.png" alt="image-20240806100638412" /></p><p>串行(withContext:它是用来临时切换CoroutineContext而不只是切线程)：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CoroutineScope(Dispatchers.Main).launch &#123;</span><br><span class="line">    println(<span class="string">&quot;Test: 1 - launch + <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    withContext(Dispatchers.IO) &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>) <span class="comment">// 模拟耗时，sleep()最准确</span></span><br><span class="line">        <span class="comment">//delay(2000)</span></span><br><span class="line">        println(<span class="string">&quot;Test: 2 - withContext + <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Test: 3 - launch + <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240806100513.png" alt="image-20240806100513037" /></p><p>下面我们看一个简单的业务逻辑</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CoroutineScope(Dispatchers.Main).launch &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span> = withContext(Dispatchers.IO) &#123;</span><br><span class="line">        <span class="comment">// 网络请求</span></span><br><span class="line">        <span class="string">&quot;data&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> processor = withContext(Dispatchers.Default) &#123;</span><br><span class="line">        <span class="comment">// 处理数据</span></span><br><span class="line">        <span class="string">&quot;processor&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 显示数据</span></span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$data</span> - <span class="variable">$processor</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看起来，好像还是挺复杂的呀，这就需要接下来讲的自定义挂起函数。</p><h3 id="自定义挂起函数"><a class="markdownIt-Anchor" href="#自定义挂起函数"></a> 自定义挂起函数</h3><p>首先，怎么写挂起函数呢？</p><p>其实很简单，只需要在普通函数前面加上 <code>suspend</code> 关键字就行了，函数的内容根据你的实际业务逻辑编写。</p><p>那么我们什么时候需要用到挂起函数呢？</p><p>当我们的函数中用到了挂起函数，我们就需要将该函数声明为挂起函数。声明为了挂起函数，那这个函数就只能在协程里或者其他挂起函数中使用。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getRetrofitContributors</span><span class="params">()</span></span>:List&lt;Contributor&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="挂起函数的性能优势"><a class="markdownIt-Anchor" href="#挂起函数的性能优势"></a> 挂起函数的性能优势</h3><p>我们首先思考一个问题，我们怎么把withContext内容抽离出来，下面有2个方式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WithContextActivity</span> : <span class="type">ComponentActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> textView: TextView</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.suspend_layout)</span><br><span class="line">        textView = findViewById(R.id.suspendText)</span><br><span class="line"></span><br><span class="line">        CoroutineScope(Dispatchers.Main).launch &#123;</span><br><span class="line">            println(<span class="string">&quot;Test: 1 - launch + <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">            launch(Dispatchers.IO) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>) <span class="comment">// 模拟耗时，sleep()最准确</span></span><br><span class="line">                <span class="comment">//delay(2000)</span></span><br><span class="line">                println(<span class="string">&quot;Test: 2 - launch + <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            println(<span class="string">&quot;Test: 3 - launch + <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CoroutineScope(Dispatchers.Main).launch &#123;</span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">data</span> = withContext(Dispatchers.IO) &#123;</span><br><span class="line">                <span class="comment">// 网络请求</span></span><br><span class="line">                <span class="string">&quot;data&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> processor = withContext(Dispatchers.Default) &#123;</span><br><span class="line">                <span class="comment">// 处理数据</span></span><br><span class="line">                <span class="string">&quot;processor - <span class="variable">$data</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> processor1 = withContext(Dispatchers.Default) &#123;</span><br><span class="line">                <span class="comment">// 处理数据</span></span><br><span class="line">                processData1(<span class="keyword">data</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> processor2 = processData2(<span class="keyword">data</span>)</span><br><span class="line">            <span class="comment">// 显示数据</span></span><br><span class="line">            println(<span class="string">&quot;<span class="variable">$data</span> - <span class="variable">$processor</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">processData2</span><span class="params">(<span class="keyword">data</span>: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        withContext(Dispatchers.Default) &#123;</span><br><span class="line">            <span class="comment">// 处理数据</span></span><br><span class="line">            <span class="string">&quot;processor - <span class="variable">$data</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">processData1</span><span class="params">(<span class="keyword">data</span>: <span class="type">String</span>)</span></span> = <span class="string">&quot;processor - <span class="variable">$data</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么会出现2种分离方法呢？</p><p>是因为withContext()并不是面向具体业务的，而是提供一个下层技术支持，用withContext包住一段业务代码，就能把这段代码放到指定的线程或者线程池去执行。那么，我想把数据处理的功能抽出来，就有2种选择：我可以只把数据处理的代码抽出来；也可以把外面的withContext一起抽出来。一般来说会将withContext一起抽出来，也就是下面这种方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">processData2</span><span class="params">(<span class="keyword">data</span>: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    withContext(Dispatchers.Default) &#123;</span><br><span class="line">        <span class="comment">// 处理数据</span></span><br><span class="line">        <span class="string">&quot;processor - <span class="variable">$data</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你在切换上下文的时候，它的CotinuationIntercepter并没有改变，那么它就不会真的去切线程，而是直接保持在原来的线程往下去执行代码，这样就没有额外线程切换成本了。现在看上面的代码就知道它的优势了吧。它限制的代码只能在Default里，这样我就不用在实际调用的时候都去包一层withContext了，也不用去记住业务代码的任务类型以及忘记包了。简言之，协程保证了我们可以百分百确保耗时的工作一定在正确的线程执行。</p><p>现在，我们就可以去优化之前的代码了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WithContextActivity</span> : <span class="type">ComponentActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> textView: TextView</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.suspend_layout)</span><br><span class="line">        textView = findViewById(R.id.suspendText)</span><br><span class="line"></span><br><span class="line">        CoroutineScope(Dispatchers.Main).launch &#123;</span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">data</span> = getData()</span><br><span class="line">            <span class="keyword">val</span> processor = processData(<span class="keyword">data</span>)</span><br><span class="line">            <span class="comment">// 显示数据</span></span><br><span class="line">            println(<span class="string">&quot;<span class="variable">$data</span> - <span class="variable">$processor</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getData</span><span class="params">()</span></span>: String = withContext(Dispatchers.IO) &#123;</span><br><span class="line">        <span class="comment">// 网络请求</span></span><br><span class="line">        <span class="string">&quot;data&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">processData</span><span class="params">(<span class="keyword">data</span>: <span class="type">String</span>)</span></span> = withContext(Dispatchers.Default) &#123;</span><br><span class="line">        <span class="comment">// 处理数据</span></span><br><span class="line">        <span class="string">&quot;processor - <span class="variable">$data</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="挂起函数为什么不卡线程"><a class="markdownIt-Anchor" href="#挂起函数为什么不卡线程"></a> 挂起函数为什么不卡线程</h3><p>首先Java的线程是不能指定线程的（可以指定线程池），也不能从子线程切换到主线程去执行某个任务，从主线程切换到某个（指定）子线程去执行。</p><p>Android工程师可能会说：不对呀，不是可以切换到主线程吗？</p><p>客户端项目（Android、swing）是可以切换到主线程去执行指定任务的，因为它们的UI线程是一个无线循环的线程，它其实是将任务扔到任务队列（确切说在Android里面叫消息队列）里面，然后主线程在循环过程中，每一轮都会去检查任务队列，如果有任务就把它们执行了，然后从队列里面移除，这就是所谓的切到主线程的实现方法。之前说过服务器程序是没法切到主线程的，因为服务器程序的主线程不具备这样的无限循环的反复检查和执行任务队列的性质。</p><p>Android中有一个HandlerThread继承自Thread，Android允许我们把任务扔给（切到）HandlerThread去执行，这是为什么呢？</p><p>因为它是一种特殊的线程，它一运性起来就会无限循环，在循环里不停的等待新任务，一旦有新任务就会去执行，因此它不能被当成普通线程使用，因为它的核心流程是不能被定制的，它是强制无限循环的。</p><p>回到协程，当我启动协程，其实就是把这个任务对象扔给ContinuationInterceptor去执行，具体怎么执行要看ContinuationInterceptor的实现。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240806114132.png" alt="default" /></p><p>底层依然是回调。其实协程对于挂起和恢复都是抽象出了一套状态机的机制，每次挂起函数调用前和调用后，协程都会做一次状态的切换。</p><p>那么挂起函数为什么不卡线程呢？</p><p>因为虽然网络请求在后台线程进行，可是这期间主线程在等着它，那为什么主线程没有被卡住呢，其实主线程并没有等着这个网络请求的结束，而是在无限循环，每一轮都会去检查任务队列，如果有任务就把它们执行了，然后从队列里面移除。</p><h3 id="轻量级线程delay"><a class="markdownIt-Anchor" href="#轻量级线程delay"></a> 轻量级线程：delay()</h3><p>它是Kotlin官方给协程打的比方。上一节我们介绍挂起函数为什么不卡线程，这节我们讲一下一个典型的不卡线程的挂起函数 <code>delay</code></p><p>我们看看官方给出的例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    repeat(<span class="number">50_000</span>) &#123;</span><br><span class="line">        launch &#123;</span><br><span class="line">            delay(<span class="number">5000L</span>)</span><br><span class="line">            print(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240806120322.png" alt="image-20240806120321835" /></p><p>上面代码虽然开了50000个协程，但它外面包的 <code>runBlocking()</code> ，它会提供一个单线程的ContinuationInterceptor，其实这5万个协程都是运行在同一个线程上，也就是主线程。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    repeat(<span class="number">50_000</span>) &#123;</span><br><span class="line">        thread &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000L</span>)</span><br><span class="line">            print(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240806120412.png" alt="image-20240806120411738" /></p><p>使用Thread的时，它就是老老实实开了5万个线程，runBlocking虽然给出的上下文是单线程的，但它只能管住它里面的协程代码，管不住线程代码。</p><p>你可能会觉得这不恰恰说明了协程比线程轻量吗？</p><p>该代码真正耗时的是等待5秒，打印是瞬时的，所以这是一个延时任务，而不是耗时任务。而传统的线程方案对于延时任务不是用线程的sleep()，而是用一个 <code>schedule()</code> 的方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> executor = Executors.newSingleThreadScheduledExecutor()</span><br><span class="line">    repeat(<span class="number">50_000</span>) &#123;</span><br><span class="line">        executor.schedule(&#123; print(<span class="string">&quot;.&quot;</span>) &#125;, <span class="number">5</span>, TimeUnit.SECONDS)</span><br><span class="line">    &#125;</span><br><span class="line">    executor.shutdown()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就不会溢出了，这才是协程等价的线程代码。</p><p>虽然线程代码让高手来写，也能写出像协程一样高性能的效果，但从实用的方面来看，协程随手一写就是高性能的，也是可以看成是比线程轻的。</p><h3 id="结构化并发"><a class="markdownIt-Anchor" href="#结构化并发"></a> 结构化并发</h3><p>用协程来写并发代码比线程更好写、也更好读，它面向的是并发任务的写法，而结构化并发面向的是并发任务的管理。</p><p>我们知道协程要用CoroutineScope来启动，为什么要用CoroutineScope？</p><ol><li>它提供一堆上下文信息给协程用，比如提供ContinuationInterceptor来做线程管理</li><li>它提供了取消的能力</li></ol><p>为什么要取消？因为我们的并发任务有可能在半路，在还没执行完成的时候就变得不被需要了。比如在网络请求还没完成时，用户就把页面关闭了，那这个网络请求以及后面的更新页面操作就没必要了，如果继续执行，就有点浪费资源（甚至造成内存泄漏）。还有个问题，由于界面关闭之后，界面里面的视图组件就从界面组件的结构中移除了，这时候，如果代码继续执行，取到网络数据，并尝试更新到界面的话，就会由于组件已经不存在了而造成程序的崩溃。</p><p>按道理来说，Java是有GC（垃圾回收机制）的，但为什么还是会内存泄漏呢？</p><p>GC其实就是扫描内存里面的每个对象，看看它有没有被几种类型的引用所执行，哪几种呢？第一种，就是<strong>静态变量</strong>，也就是用Java的static关键字所修饰的变量，它是永久存活的，GC就不会回收它。第二类是<strong>活跃的线程</strong>，也就是正在运行的线程。第三类，也就是<strong>Native对象</strong>，也就是来自JNI（Java Native Interface），因为它来自更下层的位置，它有用没用JVM判断不了。这三类对象都会被GC判定为有用的对象，另外，GC也会传递性地把被这三类对象所指（直接或间接）的对象也判定为有用的。而如果一个对象不符合任何有用的条件，它就会被GC在下一次垃圾回收的扫描里面被标记为没用，再接着就会被回收了。这就是GC自动回收的逻辑。</p><p>之前，Android内存泄漏问题通过弱引用来解决。后来，到了RxJava的时代，这个问题被解决得更好了，它实现了用链式调用来进行链式逻辑的写法，它可以使用 <code>.dispose()</code> 把RxJava流程取消，它的取消是把后续流程全都取消，它不仅省了Activity的内存，而且省了线程占用的内存和消耗的CPU。</p><p>协程也可以做类似的事情，每一个协程在启动之后都返回了一个 <code>Job</code> 对象，通过 <code>.cancel()</code> 取消协程。</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240806213014.png" alt="image-20240806213014267" style="zoom:67%;" /><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> job = lifecycleScope.launch &#123;</span><br><span class="line">    println(<span class="string">&quot;Coroutine started&quot;</span>)</span><br><span class="line">    delay(<span class="number">5000L</span>)</span><br><span class="line">    println(<span class="string">&quot;Coroutine finished&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">job.cancel()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240806213351.png" alt="image-20240806213350967" /></p><p>当然我们也能用CoroutineScope取消协程，它取消的是CoroutineScope所启动的所有协程：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy()</span><br><span class="line">    lifecycleScope.cancel()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上lifecycleScope.cancel()也不用写，lifecycleScope是Jetpack提供的一个自带的CoroutineScope，它已经注册了这个绑定了，它会自动在onDestroy()里调用cancel()。</p><p>上面的就是结构化并发，我调用lifecycleScope.cancel()，它就会取消所启动的所有协程，而不是简单的一对一，而是一对多，它还是一层对多层的。</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240806214420.png" alt="image-20240806214419924" style="zoom:80%;" /><p>大括号里面的this其实就是CoroutineScope，所以我们在里面可以直接写launch{}，而不用写前缀，this就是隐式的前缀。这不是重要的点，重点在于这个this并不是外面的这个lifecycleScope的CoroutineScope，但它受外面这个CoroutineScope管理，每个协程大括号里面都有一个CoroutineScope的this，里面的launch()就是由这个this启动的，它们就形成了父子关系。而cancel()函数不仅会取消父协程，而且会连锁性的取消这些协程的子协程，子子协程，等等。</p><h3 id="并行协程的启动和交互"><a class="markdownIt-Anchor" href="#并行协程的启动和交互"></a> 并行协程的启动和交互</h3><p>挂起函数：串行，不同线程间可以交互（前一个线程结果给后一个线程用）</p><p>launch：并行</p><p>那我怎么让并行的流程之间进行交互呢？比如：我想同时执行2个请求，在它们都返回后，把它们结果合并，把合并的结果显示到页面上。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">coroutineStyle</span><span class="params">()</span></span> = lifecycleScope.launch &#123;</span><br><span class="line">    <span class="keyword">val</span> contributors1 = gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> contributors2 = gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">    showContributors(contributors1 + contributors2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写貌似也行，但是它们不是2个并行的请求，而是串行的。也就是说，它是先进行第一个网络请求，然后再进行第二个请求，再合并结果，这样虽然结果不会错，但两个没有依赖关系的请求却做成了串行的，那不是网络耗时就翻倍了吗！！那怎么写呢？</p><p>协程给我们的方案是综合起来，先并行，然后转串行，这是就需要另一个开启协程的函数 <code>async</code> 了，async和launch的内部逻辑都是一样的，只不过async的大括号就可以有返回值了。</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240807100502.png" alt="image-20240807100501735" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240807100718.png" alt="image-20240807100717871" style="zoom:67%;" /><p>我们使用 <code>await()</code> 就可以拿到返回值:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> deferred = lifecycleScope.async &#123;</span><br><span class="line">    gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>) <span class="comment">// 返回值</span></span><br><span class="line">&#125;</span><br><span class="line">lifecycleScope.launch &#123;</span><br><span class="line">    <span class="keyword">val</span> contributors1 = gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;okhttp&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> contributors2 = deferred.await() <span class="comment">// 拿到上一个协程返回值</span></span><br><span class="line">    showContributors(contributors1 + contributors2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以把两个协程代码都写到async里面：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> deferred1 = lifecycleScope.async &#123;</span><br><span class="line">    gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;okhttp&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> deferred2 = lifecycleScope.async &#123;</span><br><span class="line">    gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>) <span class="comment">// 返回值</span></span><br><span class="line">&#125;</span><br><span class="line">lifecycleScope.launch &#123;</span><br><span class="line">    <span class="keyword">val</span> contributors1 = deferred1.await()</span><br><span class="line">    <span class="keyword">val</span> contributors2 = deferred2.await() <span class="comment">// 拿到上一个协程返回值</span></span><br><span class="line">    showContributors(contributors1 + contributors2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们甚至可以这样写，为什么可以这样写，我们在结构化并发中已经讲过了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lifecycleScope.launch &#123;</span><br><span class="line">    <span class="keyword">val</span> deferred1 = async &#123; gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;okhttp&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">val</span> deferred2 = async &#123; gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>) &#125;</span><br><span class="line">    showContributors(deferred1.await() + deferred2.await())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实，通常我们最好是在它们外面再包一层：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lifecycleScope.launch &#123;</span><br><span class="line">    <span class="keyword">val</span> contributors = coroutineScope &#123;</span><br><span class="line">        <span class="keyword">val</span> deferred1 = async &#123;</span><br><span class="line">            gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;okhttp&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> deferred2 = async &#123;</span><br><span class="line">            gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>) <span class="comment">// 返回值</span></span><br><span class="line">        &#125;</span><br><span class="line">        deferred1.await() + deferred2.await()</span><br><span class="line">    &#125;</span><br><span class="line">    showContributors(contributors) <span class="comment">//也可以放里面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包上这个coroutineScope之后，对于协程的异常的结构化管理可以提供很大的方便。这个功能传统Java也能实现，通过使用 <code>CompletableFuture</code> 。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> handler = Handler(Looper.getMainLooper())</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">completableFutureStyleMerge</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> future1 = gitHub.contributorsFuture(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> future2 = gitHub.contributorsFuture(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;okhttp&quot;</span>)</span><br><span class="line">    future1.thenCombine(future2) &#123; contributors1, contributors2 -&gt;</span><br><span class="line">        contributors1 + contributors2</span><br><span class="line">    &#125;.thenAccept &#123; mergedContributors -&gt;</span><br><span class="line">        handler.post &#123;</span><br><span class="line">            showContributors(mergedContributors)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个并行流程在顺序上有某种依赖，而不依赖结果，可以直接使用 <code>join()</code> 函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lifecycleScope.launch &#123;</span><br><span class="line">    <span class="keyword">val</span> initJob = launch &#123;</span><br><span class="line">        <span class="comment">// init() 初始化工作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> contributors = gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">    initJob.join() <span class="comment">// 等待 init() 完成，但不关心协程返回值</span></span><br><span class="line">    <span class="comment">//processData() 依赖初始化工作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连接线程世界和回调型api合作"><a class="markdownIt-Anchor" href="#连接线程世界和回调型api合作"></a> 连接线程世界：和回调型API合作</h3><p>现实生活中，就算你用协程了，开始要完全避免跟传统的线程API做交互，其实也不是很容易，因为很多项目是有大量的老代码的，你的老代码没有用协程，大概率还是基于线程的API的，也就是回调的写法，还有某些外部库，它们提供的API也可能是回调的写法。</p><p>对于回调的API，协程有一个专门的函数 <code>suspendCoroutine</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lifecycleScope.launch &#123;</span><br><span class="line">    suspendCoroutine &#123;</span><br><span class="line">        callbackStyle() <span class="comment">// 把回调函数转换为挂起函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样回调函数就可以在协程中启动了，但光是启动还不够，我们还需要它在挂起函数里面返回:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">lifecycleScope.launch &#123;</span><br><span class="line">    <span class="keyword">val</span> contributors = suspendCoroutine &#123;</span><br><span class="line">        gitHub.contributorsCall(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">            .enqueue(<span class="keyword">object</span> : Callback&lt;List&lt;Contributor&gt;&gt; &#123;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                    call: <span class="type">Call</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">                    response: <span class="type">Response</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">                )</span></span> &#123;</span><br><span class="line">                    <span class="comment">//showContributors(response.body()!!)</span></span><br><span class="line">                    it.resume(response.body()!!)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(p0: <span class="type">Call</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;, t: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">                    it.resumeWithException(t) <span class="comment">// 抛出异常</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    showContributors(contributors)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以把它抽成函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">callbackToSuspend</span><span class="params">()</span></span> =</span><br><span class="line">    suspendCoroutine &#123;</span><br><span class="line">        gitHub.contributorsCall(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">            .enqueue(<span class="keyword">object</span> : Callback&lt;List&lt;Contributor&gt;&gt; &#123;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                    call: <span class="type">Call</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">                    response: <span class="type">Response</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">                )</span></span> &#123;</span><br><span class="line">                    <span class="comment">//showContributors(response.body()!!)</span></span><br><span class="line">                    it.resume(response.body()!!)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(p0: <span class="type">Call</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;, t: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">                    it.resumeWithException(t) <span class="comment">// 抛出异常</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们可以使用try-catch处理异常，也可以让它自然的丢给更外面的协程去结构化地处理。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CallbackActivity</span> : <span class="type">ComponentActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> textView: TextView</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.suspend_layout)</span><br><span class="line">        textView = findViewById(R.id.suspendText)</span><br><span class="line"></span><br><span class="line">        lifecycleScope.launch &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">val</span> contributors = callbackToSuspend()</span><br><span class="line">                showContributors(contributors)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">                textView.text = e.message</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">callbackToSuspend</span><span class="params">()</span></span> =</span><br><span class="line">        suspendCoroutine &#123;</span><br><span class="line">            gitHub.contributorsCall(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">                .enqueue(<span class="keyword">object</span> : Callback&lt;List&lt;Contributor&gt;&gt; &#123;</span><br><span class="line">                    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                        call: <span class="type">Call</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">                        response: <span class="type">Response</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">                    )</span></span> &#123;</span><br><span class="line">                        <span class="comment">//showContributors(response.body()!!)</span></span><br><span class="line">                        it.resume(response.body()!!)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(p0: <span class="type">Call</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;, t: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">                        it.resumeWithException(t) <span class="comment">// 抛出异常</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">showContributors</span><span class="params">(contributors: <span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;)</span></span> = contributors</span><br><span class="line">        .map &#123; <span class="string">&quot;<span class="subst">$&#123;it.login&#125;</span> (<span class="subst">$&#123;it.contributions&#125;</span>)&quot;</span> &#125;</span><br><span class="line">        .reduce &#123; acc, s -&gt; <span class="string">&quot;<span class="variable">$acc</span>\n<span class="variable">$s</span>&quot;</span> &#125;</span><br><span class="line">        .let &#123; textView.text = it &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这样是捕获不到异常的：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    launch &#123;</span><br><span class="line">        <span class="keyword">val</span> contributors = callbackToSuspend()</span><br><span class="line">        showContributors(contributors)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    textView.text = e.message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在launch启动时，try-catch就已经结束了。</p><p>除了suspendCoroutine之外，还有一个叫 <code>suspendCancellableCoroutine</code> ，它跟suspendCoroutine非常像，只不过suspendCoroutine支持取消：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">val job = lifecycleScope.launch &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        val contributors = callbackToSuspend()</span><br><span class="line">        showContributors(contributors)</span><br><span class="line">    &#125; catch (e: Exception) &#123;</span><br><span class="line">        textView.text = e.message</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">lifecycleScope.launch &#123;</span><br><span class="line">    delay(200)</span><br><span class="line">    job.cancel()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，发现页面还是显示了，说明它不配合协程的取消，那如果换成suspendCancellableCoroutine：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改val contributors = callbackToSuspend() 为 val contributors = callbackToCancellableSuspend()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">callbackToCancellableSuspend</span><span class="params">()</span></span> =</span><br><span class="line">    suspendCancellableCoroutine &#123;</span><br><span class="line">        gitHub.contributorsCall(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">            .enqueue(<span class="keyword">object</span> : Callback&lt;List&lt;Contributor&gt;&gt; &#123;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                    call: <span class="type">Call</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">                    response: <span class="type">Response</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">                )</span></span> &#123;</span><br><span class="line">                    <span class="comment">//showContributors(response.body()!!)</span></span><br><span class="line">                    it.resume(response.body()!!)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(p0: <span class="type">Call</span>&lt;<span class="type">List</span>&lt;<span class="type">Contributor</span>&gt;&gt;, t: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">                    it.resumeWithException(t) <span class="comment">// 抛出异常</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240807111143.png" alt="image-20240807111142890" /></p><div class="tip info"><p>我们一般都会使用suspendCancellableCoroutine，除非你有什么特殊的需求。</p></div><p>此外suspendCancellableCoroutine还有一点，你可以在它里面注册一个取消的回调，来方便做一些收尾工作:</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240807111800.png" alt="image-20240807111759648" style="zoom:67%;" /><h3 id="回到线程世界runblocking"><a class="markdownIt-Anchor" href="#回到线程世界runblocking"></a> 回到线程世界：runBlocking()</h3><p>除了之前讲的launch和async，其实协程还有一个自带的启动协程的函数，叫 <code>runBlocking</code> ，这是一个特殊的协程启动函数，特殊在于：</p><ol><li>它不需要CoroutineScope</li><li>它会阻塞线程</li></ol><p>为什么会这样呢？</p><p>它的定位是把挂起函数转换为阻塞式代码，它虽然可以启动协程，但它的作用并不是启动协程本身，而是把协程的代码块封装起来变成阻塞式的，变成阻塞式的干嘛？</p><p>去让传统的、线程写法的API使用。比如：你用到一个库，它可以通过注册回调的方式来在某些事件发生的时候去帮你做指定的事，假设你让它做的事已经通过挂起函数实现了，只有把它封装进协程里面才能在线程的世界去使用它，如果你将它封装在launch或者async里面，它就是并行的，但如果你希望它是串行的，或者是阻塞式的，那launch和async就不好使了，这就是runBlocking存在的价值所在：从协程世界回到阻塞的线程世界。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">blockingContributors</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>) <span class="comment">// 这样就变成阻塞式的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器写法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> contributors = gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然你也可以直接添加suspend关键字：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> contributors = gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">    <span class="comment">// launch &#123; &#125; 报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>suspend只提供了挂起函数的环境，没有提供一个CoroutineScope类型的隐式receiver，也就是this，也就是你不能在它里面直接启动协程。也不是没有解决方法，你可以套一层coroutineScope：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = coroutineScope&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> contributors = gitHub.contributors(<span class="string">&quot;square&quot;</span>, <span class="string">&quot;retrofit&quot;</span>)</span><br><span class="line">    launch &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>runBlocking还有一个比较常用的地方就是测试代码，有时候我们不想写太复杂的测试代码，就想在一个函数里面把某个挂起函数的逻辑给运行完之后返回，那你可以用runBlocking包一下。</p><h2 id="其他语言协程"><a class="markdownIt-Anchor" href="#其他语言协程"></a> 其他语言协程</h2><h3 id="python"><a class="markdownIt-Anchor" href="#python"></a> python</h3><p>Python的Generator是一个典型的无栈协程的实现。可以在任意Python函数中调用yield来实现当前函数调用的挂起，yield的参数作为对下一次next（gen）调用的返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numbers</span>():</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> (i)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_generator = numbers()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[0] <span class="subst">&#123;<span class="built_in">next</span>(num_generator)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[1] <span class="subst">&#123;<span class="built_in">next</span>(num_generator)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> num_generator:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[Loop] <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240906181440.png" alt="image-20240906181439916" /></p><h3 id="lua"><a class="markdownIt-Anchor" href="#lua"></a> Lua</h3><p>Lua的协程实它提供了几个API，允许开发者灵活控制协程的执行。</p><ul><li>coroutine.create：创建协程，参数为函数类型，作为协程的执行体，返回协程实例。</li><li>coroutine.yield：挂起协程，第一个参数为被挂起的协程实例，后面的参数则作为之前外部调用当前协程时对应的resume函数的返回值，而它的返回值则又是外部下一次调用resume时传的参数。</li><li>coroutine.resume：恢复协程，第一个参数为被继续的协程实例，后面的参数则作为协程内部yield时的返回值，返回值为协程内部下一次yield时传出的参数；如果是第一次对该协程实例执行resume，参数会作为协程体的参数传入。</li></ul><p>Lua的协程也有几个状态：创建（CREATED）、挂起(SUSPENDED）、运行（RUNNING）、结束（DEAD）。其中，调用yied之后的协程处于挂起态；获得执行权而正在运行的协程则处于运行态；协程体运行结束后，协程处于结束态。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">producer</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">0</span>, <span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;send&quot;</span>..i)</span><br><span class="line">        <span class="comment">-- coroutine.yield(i)</span></span><br><span class="line">        yield_here(i)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End Producer&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yield_here</span><span class="params">(i)</span></span> <span class="comment">-- 注意在python中使用函数时不行的</span></span><br><span class="line">    <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consumer</span><span class="params">(value)</span></span></span><br><span class="line">    <span class="keyword">repeat</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;receive&quot;</span>..value)</span><br><span class="line">        value = <span class="built_in">coroutine</span>.<span class="built_in">yield</span>()</span><br><span class="line">    <span class="keyword">until</span>(<span class="keyword">not</span> value)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End Consumer&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">producerCoroutine = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(producer)</span><br><span class="line">consumerCoroutine = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(consumer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    <span class="built_in">status</span>, product = <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(producerCoroutine)</span><br><span class="line">    <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(consumerCoroutine, product)</span><br><span class="line"><span class="keyword">until</span>(<span class="keyword">not</span> <span class="built_in">status</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240906182849.png" alt="image-20240906182848973" /></p><p>协程第一次被resume时，从创建状态转入运行态，后续再次resume则从挂起状态恢复到运行态；而每次调用yield会将自已从运行态转入挂起状态。</p><p>协程包括以下部分:</p><ul><li><strong>协程的执行体</strong>，即我们常提到的协程体，主要是指启动协程时对应的函数。</li><li><strong>协程的控制实例</strong>，我们可以通过协程创建时返回的实例控制协程的调用流转，我们将该对象的类型称为<strong>协程的描述类</strong></li><li><strong>协程的状态</strong>，在调用流程转移前后，协程的状态会发生相应的变化。</li></ul><h3 id="go"><a class="markdownIt-Anchor" href="#go"></a> go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">var</span> readChannel &lt;- <span class="keyword">chan</span> <span class="type">int</span> = channel</span><br><span class="line"><span class="keyword">var</span> writeChannel <span class="keyword">chan</span> &lt;- <span class="type">int</span> = channel</span><br><span class="line"></span><br><span class="line"><span class="comment">// reader</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;wait for read&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> readChannel &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;read&quot;</span>,i)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;read over&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// writer</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;write&quot;</span>,i)</span><br><span class="line">writeChannel &lt;- i</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(writeChannel)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240906184440.png" alt="image-20240906184440044" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;kotlin协程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#kotlin协程&quot;&gt;&lt;/a&gt; Kotlin协程&lt;/h1&gt;
&lt;h2 id=&quot;协程是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#协程是什么&quot;</summary>
      
    
    
    
    <category term="编程进阶" scheme="https://www.yuanyuan.blog/categories/%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="kotlin" scheme="https://www.yuanyuan.blog/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Java响应式编程-1.Reactor核心</title>
    <link href="https://www.yuanyuan.blog/posts/2b4da000.html"/>
    <id>https://www.yuanyuan.blog/posts/2b4da000.html</id>
    <published>2024-07-27T16:52:53.000Z</published>
    <updated>2025-02-22T12:17:28.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="reactor核心"><a class="markdownIt-Anchor" href="#reactor核心"></a> Reactor核心</h1><h2 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h2><h3 id="lambda"><a class="markdownIt-Anchor" href="#lambda"></a> Lambda</h3><p>Java8<strong>语法糖</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数式接口；只要是函数式接口就可以用Lambda表达式简化</span></span><br><span class="line"><span class="comment">//函数式接口： 接口中有且只有一个未实现的方法，这个接口就叫函数式接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyHaha</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">haha</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">int</span> <span class="title function_">heihei</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//默认实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">My666</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">aaa</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">int</span> k)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">//检查注解，帮我们快速检查我们写的接口是否函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyHehe</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">hehe</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、自己写实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//声明一个函数</span></span><br><span class="line">        BiConsumer&lt;String,String&gt; consumer = (a,b)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;哈哈：&quot;</span>+a+<span class="string">&quot;；呵呵：&quot;</span>+b);</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer.accept(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="comment">//声明一个函数</span></span><br><span class="line">        Function&lt;String,Integer&gt; function = (String x) -&gt; Integer.parseInt(x);</span><br><span class="line">        System.out.println(function.apply(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        Supplier&lt;String&gt; supplier = ()-&gt; UUID.randomUUID().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> supplier.get();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        BiFunction&lt;String,Integer,Long&gt; biFunction = (a,b)-&gt; <span class="number">888L</span>;</span><br><span class="line">        Predicate&lt;Integer&gt; even = (t)-&gt; t%<span class="number">2</span> ==<span class="number">0</span>;</span><br><span class="line"><span class="comment">//        even.test()//正向判断</span></span><br><span class="line"><span class="comment">//        even.negate().test(2) //反向判断</span></span><br><span class="line">        System.out.println(even.negate().test(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bbbbb</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">names</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        names.add(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;David&quot;</span>);</span><br><span class="line">        <span class="comment">//比较器</span></span><br><span class="line"><span class="comment">//        Collections.sort(names, new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(String o1, String o2) &#123;</span></span><br><span class="line"><span class="comment">//                return o2.compareTo(o1);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        <span class="comment">//直接写函数式接口就方便   (o1,o2)-&gt;o1.compareTo(o2)</span></span><br><span class="line"><span class="comment">//        Collections.sort(names,(o1,o2)-&gt;o1.compareTo(o2));</span></span><br><span class="line">        System.out.println(names);</span><br><span class="line">        <span class="comment">// 类::方法； 引用类中的实例方法； 忽略lambda的完整写法</span></span><br><span class="line">        Collections.sort(names,String::compareTo);</span><br><span class="line">        System.out.println(names);</span><br><span class="line">        <span class="keyword">new</span>  <span class="title class_">Thread</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;哈哈啊&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        ).start();</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable).start();</span><br><span class="line">        <span class="comment">//最佳实战：</span></span><br><span class="line">        <span class="comment">//1、以后调用某个方法传入参数，这个参数实例是一个接口对象，且只定义了一个方法，就直接用lambda简化写法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * lambda简化函数式接口实例创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">aaaa</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、自己创建实现类对象</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterfaceImpl</span>();</span><br><span class="line">        System.out.println(myInterface.sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、创建匿名实现类</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterface</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> i * i + j * j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//        System.out.println(myInterface1.sum(2, 3));</span></span><br><span class="line">        <span class="comment">//冗余写法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、lambda表达式:语法糖  参数列表  + 箭头 + 方法体</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface2</span> <span class="operator">=</span> (x, y) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> x * x + y * y;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(myInterface2.sum(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        <span class="comment">//参数位置最少情况</span></span><br><span class="line">        <span class="type">MyHaha</span> <span class="variable">myHaha</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyHehe</span> <span class="variable">myHehe</span> <span class="operator">=</span> y -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> y * y;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">MyHehe</span> <span class="variable">hehe2</span> <span class="operator">=</span> y -&gt; y - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//完整写法如上：</span></span><br><span class="line">        <span class="comment">//简化写法：</span></span><br><span class="line">        <span class="comment">//1)、参数类型可以不写，只写(参数名)，参数变量名随意定义;</span></span><br><span class="line">        <span class="comment">//    参数表最少可以只有一个 ()，或者只有一个参数名；</span></span><br><span class="line">        <span class="comment">//2、方法体如果只有一句话，&#123;&#125; 可以省略</span></span><br><span class="line">        <span class="type">MyHehe</span> <span class="variable">hehe3</span> <span class="operator">=</span> y -&gt; y + <span class="number">1</span>;</span><br><span class="line">        System.out.println(hehe3.hehe(<span class="number">7</span>));</span><br><span class="line">        <span class="comment">//以上Lambda表达式简化了实例的创建。</span></span><br><span class="line">        <span class="comment">//总结：</span></span><br><span class="line">        <span class="comment">// 1、Lambda表达式： (参数表) -&gt; &#123;方法体&#125;</span></span><br><span class="line">        <span class="comment">// 2、分辨出你的接口是否函数式接口。 函数式接口就可以lambda简化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="function"><a class="markdownIt-Anchor" href="#function"></a> Function</h3><p>函数式接口的出入参定义：</p><ol><li>有入参，无出参【消费者】：  function.accept</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BiConsumer&lt;String,String&gt; function = (a,b)-&gt;&#123; <span class="comment">//能接受两个入参</span></span><br><span class="line">    System.out.println(<span class="string">&quot;哈哈：&quot;</span>+a+<span class="string">&quot;；呵呵：&quot;</span>+b);</span><br><span class="line">&#125;;</span><br><span class="line">function.accept(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>有入参，有出参【<strong>多功能函数</strong>】：   function.apply</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String,Integer&gt; function = (String x) -&gt; Integer.parseInt(x);</span><br><span class="line">System.out.println(function.apply(<span class="string">&quot;2&quot;</span>));</span><br></pre></td></tr></table></figure><ol start="3"><li>无入参，无出参【<strong>普通函数</strong>】：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(runnable).start();</span><br></pre></td></tr></table></figure><ol start="4"><li>无入参 ，有出参【<strong>提供者</strong>】：  supplier.get()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;String&gt; supplier = ()-&gt; UUID.randomUUID().toString();</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> supplier.get();</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure><p>java.util.function包下的所有function定义：</p><ul><li>Consumer： 消费者</li><li>Supplier： 提供者</li><li>Predicate： 断言</li></ul><div class='tag-link-1'><a class="tag-Link" target="_blank" href="https://blog.csdn.net/TianKongShuLovey/article/details/144897367">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url('https://t3.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=https://blog.csdn.net/TianKongShuLovey/article/details/144897367&size=60'); border-radius: 50%; width: 60px; height: 60px;"></div>        <div class="tag-link-right">            <div class="tag-link-title">get/test/apply/accept调用的函数方法</div>            <div class="tag-link-sitename">https://blog.csdn.net/TianKongShuLovey/article/details/144897367</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><h3 id="streamapi"><a class="markdownIt-Anchor" href="#streamapi"></a> StreamAPI</h3><p>最佳实战：以后凡是你写for循环处理数据的统一全部用StreamAPI进行替换；</p><p>Stream所有数据和操作被组合成流管道流管道组成：</p><ul><li>一个数据源（可以是一个数组、集合、生成器函数、I/O管道）</li><li>零或多个中间操作（将一个流变形成另一个流）</li><li>一个终止操作（产生最终结果）</li></ul><p><strong>中间操作：Intermediate Operations</strong></p><ul><li><p>filter：过滤；  挑出我们用的元素</p></li><li><p>map： 映射： 一一映射，a 变成 b</p></li><li><ul><li>mapToInt、mapToLong、mapToDouble</li></ul></li><li><p>flatMap：打散、散列、展开、扩维：一对多映射</p></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filter、</span><br><span class="line">map、mapToInt、mapToLong、mapToDouble</span><br><span class="line">flatMap、flatMapToInt、flatMapToLong、flatMapToDouble</span><br><span class="line">mapMulti、mapMultiToInt、mapMultiToLong、mapMultiToDouble、</span><br><span class="line">parallel、unordered、onClose、sequential</span><br><span class="line">distinct、sorted、peek、limit、skip、takeWhile、dropWhile、</span><br></pre></td></tr></table></figure><p><strong>终止操作：Terminal Operation</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">forEach、forEachOrdered、toArray、reduce、collect、toList、min、</span><br><span class="line">max、count、anyMatch、allMatch、noneMatch、findFirst、findAny、iterator</span><br></pre></td></tr></table></figure><h3 id="reactive-stream"><a class="markdownIt-Anchor" href="#reactive-stream"></a> Reactive-Stream</h3><p>Reactive Streams是JVM面向流的库的标准和规范 。</p><ol><li>处理可能无限数量的元素</li><li>有序</li><li>在组件之间异步传递元素</li><li>强制性非阻塞，背压模式</li></ol><p>推荐阅读：</p><p><a href="https://www.reactivemanifesto.org/zh-CN">响应式宣言</a></p><p><a href="https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.4/README.md">ReactiveStream</a></p><p><strong>响应式系统</strong>:基于<strong>异步</strong>、<strong>消息驱动</strong>的全事件回调系统</p><p><strong>API Components</strong></p><p><strong>Publisher</strong>：</p><p>​发布者:产生数据流</p><p><strong>Subscriber</strong>：</p><p>​订阅者:消费数据流</p><p><strong>Subscription</strong>：</p><p>​订阅关系；:订阅关系是发布者和订阅者之间的关键接口。订阅者通过订阅来表示对发布者产生的数据的兴趣。订阅者可以请求一定数量的元素，也可以取消订阅。</p><p><strong>Processor</strong>：</p><p>​处理器: 处理器是同时实现了发布者和订阅者接口的组件。它可以接收来自一个发布者的数据，进行处理，并将结果发布给下一个订阅者。处理器在Reactor中充当中间环节，代表一个处理阶段，允许你在数据流中进行转换、过滤和其他操作。</p><p><strong>响应式编程</strong>：</p><ol><li>底层：基于数据缓冲队列 + 消息驱动模型 + 异步回调机制</li><li>编码：流式编程 + 链式调用 + 声明式API</li><li>效果：优雅全异步 + 消息实时处理 + 高吞吐量 + 占用少量资源</li></ol><h2 id="reactor"><a class="markdownIt-Anchor" href="#reactor"></a> Reactor</h2><h3 id="快速上手"><a class="markdownIt-Anchor" href="#快速上手"></a> 快速上手</h3><h4 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h4><p>Reactor 是一个用于JVM的完全非阻塞的响应式编程框架，具备高效的需求管理（即对 “背压（backpressure）”的控制）能力。它与 Java 8 函数式 API 直接集成，比如 <code>CompletableFuture</code>，<code> Stream</code>， 以及 <code>Duration</code>。它提供了异步序列 API: <code>Flux</code>（用于[N]个元素）和 <code>Mono</code>（用于 [0|1]个元素），并完全遵循和实现了“响应式扩展规范”（Reactive Extensions Specification）。</p><p>Reactor 的 <code>reactor-ipc</code> 组件还支持非阻塞的进程间通信（inter-process communication, IPC）。 Reactor IPC 为 HTTP（包括 Websockets）、TCP 和 UDP 提供了支持背压的网络引擎，从而适合 应用于微服务架构。并且完整支持响应式编解码（reactive encoding and decoding）。</p><h4 id="依赖"><a class="markdownIt-Anchor" href="#依赖"></a> 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2023.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="响应式编程"><a class="markdownIt-Anchor" href="#响应式编程"></a> 响应式编程</h3><blockquote><p>响应式编程是一种关注于<strong>数据流（data streams）<strong>和</strong>变化传递（propagation of change）<strong>的</strong>异步编程</strong>方式。 这意味着它可以用既有的编程语言表达静态（如数组）或动态（如事件源）的数据流。</p></blockquote><p>了解历史：</p><ul><li>在响应式编程方面，微软跨出了第一步，它在 .NET 生态中创建了响应式扩展库（Reactive Extensions library, Rx）。接着 RxJava 在JVM上实现了响应式编程。后来，在 JVM 平台出现了一套标准的响应式 编程规范，它定义了一系列标准接口和交互规范。并整合到 Java 9 中（使用 Flow 类）。</li><li>响应式编程通常作为面向对象编程中的“观察者模式”（Observer design pattern）的一种扩展。 响应式流（reactive streams）与“迭代子模式”（Iterator design pattern）也有相通之处， 因为其中也有 <code>Iterable</code>-<code>Iterator</code> 这样的对应关系。主要的区别在于，Iterator 是基于 “拉取”（pull）方式的，而响应式流是基于“推送”（push）方式的。</li><li>使用 iterator 是一种“命令式”（imperative）编程范式，即使访问元素的方法是 <code>Iterable</code> 的唯一职责。关键在于，什么时候执行 <code>next()</code> 获取元素取决于开发者。在响应式流中，相对应的 角色是 <code>Publisher</code>-<code>Subscriber</code>，但是 <em>当有新的值到来的时候</em> ，却反过来由发布者（Publisher） 通知订阅者（Subscriber），这种“推送”模式是响应式的关键。此外，对推送来的数据的操作 是通过一种声明式（declaratively）而不是命令式（imperatively）的方式表达的：开发者通过 描述“控制流程”来定义对数据流的处理逻辑。</li><li>除了数据推送，对错误处理（error handling）和完成（completion）信号的定义也很完善。 一个 <code>Publisher</code>可以推送新的值到它的 <code>Subscriber</code>（调用 <code>onNext</code>方法）， 同样也可以推送错误（调用 <code>onError</code>方法）和完成（调用 <code>onComplete</code> 方法）信号。 错误和完成信号都可以终止响应式流。可以用下边的表达式描述：</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onNext x <span class="number">0.</span>.N <span class="punctuation">[</span>onError <span class="operator">|</span> onComplete<span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h4 id="阻塞是对资源的浪费"><a class="markdownIt-Anchor" href="#阻塞是对资源的浪费"></a> 阻塞是对资源的浪费</h4><p>现代应用需要<strong>应对大量的并发用户</strong>，而且即使现代硬件的处理能力飞速发展，<strong>软件性能仍然是关键因素</strong>。</p><p>广义来说我们有两种思路来提升程序性能：</p><ol><li><strong>并行化（parallelize）</strong> ：使用更多的线程和硬件资源。[异步]</li><li>基于现有的资源来 <strong>提高执行效率</strong> 。</li></ol><p>通常，Java开发者使用阻塞式（blocking）编写代码。这没有问题，在出现性能瓶颈后， 我们可以增加处理线程，线程中同样是阻塞的代码。但是这种使用资源的方式会迅速面临 资源竞争和并发问题。</p><p>更糟糕的是，阻塞会浪费资源。具体来说，比如当一个程序面临延迟（通常是I/O方面， 比如数据库读写请求或网络调用），所在线程需要进入 idle 状态等待数据，从而浪费资源。</p><p>所以，并行化方式并非银弹。这是挖掘硬件潜力的方式，但是却带来了复杂性，而且容易造成浪费。</p><h4 id="异步可以解决问题吗"><a class="markdownIt-Anchor" href="#异步可以解决问题吗"></a> 异步可以解决问题吗？</h4><p>第二种思路——提高执行效率——可以解决资源浪费问题。通过编写 <em>异步非阻塞</em> 的代码， （任务发起异步调用后）执行过程会切换到另一个 <strong>使用同样底层资源</strong> 的活跃任务，然后等 异步调用返回结果再去处理。</p><p>但是在 JVM 上如何编写异步代码呢？Java 提供了两种异步编程方式：</p><ul><li><strong>回调（Callbacks）</strong> ：异步方法没有返回值，而是采用一个 <code>callback</code> 作为参数（lambda 或匿名类），当结果出来后回调这个 <code>callback</code>。常见的例子比如 Swings 的 <code>EventListener</code>。</li><li><strong>Futures</strong> ：异步方法 <strong>立即</strong> 返回一个 <code>Future&lt;T&gt;</code>，该异步方法要返回结果的是 <code>T</code> 类型，通过 <code>Future</code>封装。这个结果并不是 <em>立刻</em> 可以拿到，而是等实际处理结束才可用。比如， <code>ExecutorService</code> 执行 <code>Callable&lt;T&gt;</code> 任务时会返回 <code>Future</code> 对象。</li></ul><p>这些技术够用吗？并非对于每个用例都是如此，两种方式都有局限性。</p><p>回调很难组合起来，因为很快就会导致代码难以理解和维护（即所谓的“回调地狱（callback hell）”）。</p><p>考虑这样一种情景：</p><ul><li>在用户界面上显示用户的5个收藏，或者如果没有任何收藏提供5个建议。</li><li>这需要3个 服务（一个提供收藏的ID列表，第二个服务获取收藏内容，第三个提供建议内容）：</li></ul><p>回调地狱（Callback Hell）的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">userService.getFavorites(userId, <span class="keyword">new</span> <span class="title class_">Callback</span>&lt;List&lt;String&gt;&gt;() &#123; </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(List&lt;String&gt; list)</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (list.isEmpty()) &#123; </span><br><span class="line">      suggestionService.getSuggestions(<span class="keyword">new</span> <span class="title class_">Callback</span>&lt;List&lt;Favorite&gt;&gt;() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(List&lt;Favorite&gt; list)</span> &#123; </span><br><span class="line">          UiUtils.submitOnUiThread(() -&gt; &#123; </span><br><span class="line">            list.stream()</span><br><span class="line">                .limit(<span class="number">5</span>)</span><br><span class="line">                .forEach(uiList::show); </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable error)</span> &#123; </span><br><span class="line">          UiUtils.errorPopup(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      list.stream() </span><br><span class="line">          .limit(<span class="number">5</span>)</span><br><span class="line">          .forEach(favId -&gt; favoriteService.getDetails(favId, </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Callback</span>&lt;Favorite&gt;() &#123;</span><br><span class="line">              <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(Favorite details)</span> &#123;</span><br><span class="line">                UiUtils.submitOnUiThread(() -&gt; uiList.show(details));</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable error)</span> &#123;</span><br><span class="line">                UiUtils.errorPopup(error);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable error)</span> &#123;</span><br><span class="line">    UiUtils.errorPopup(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Reactor改造后为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">userService.getFavorites(userId) </span><br><span class="line">           .flatMap(favoriteService::getDetails) </span><br><span class="line">           .switchIfEmpty(suggestionService.getSuggestions()) </span><br><span class="line">           .take(<span class="number">5</span>) </span><br><span class="line">           .publishOn(UiUtils.uiThreadScheduler()) </span><br><span class="line">           .subscribe(uiList::show, UiUtils::errorPopup); </span><br></pre></td></tr></table></figure><p>如果你想确保“收藏的ID”的数据在800ms内获得（如果超时，从缓存中获取）呢？在基于回调的代码中， 会比较复杂。但 Reactor 中就很简单，在处理链中增加一个 <code>timeout</code> 的操作符即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">userService.getFavorites(userId)</span><br><span class="line">           .timeout(Duration.ofMillis(<span class="number">800</span>)) </span><br><span class="line">           .onErrorResume(cacheService.cachedFavoritesFor(userId)) </span><br><span class="line">           .flatMap(favoriteService::getDetails) </span><br><span class="line">           .switchIfEmpty(suggestionService.getSuggestions())</span><br><span class="line">           .take(<span class="number">5</span>)</span><br><span class="line">           .publishOn(UiUtils.uiThreadScheduler())</span><br><span class="line">           .subscribe(uiList::show, UiUtils::errorPopup);</span><br></pre></td></tr></table></figure><blockquote><p>额外扩展：</p><p>Futures 比回调要好一点，但即使在 Java 8 引入了 <code>CompletableFuture</code>，它对于多个处理的组合仍不够好用。 编排多个 Futures 是可行的，但却不易。此外，<code>Future</code> 还有一个问题：当对 <code>Future</code> 对象最终调用 <code>get()</code> 方法时，仍然会导致阻塞，并且缺乏对多个值以及更进一步对错误的处理。</p><p>考虑另外一个例子，我们首先得到 ID 的列表，然后通过它进一步获取到“对应的 name 和 statistics” 为元素的列表，整个过程用异步方式来实现。<code>CompletableFuture</code> 处理组合的例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;List&lt;String&gt;&gt; ids = ifhIds(); </span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;List&lt;String&gt;&gt; result = ids.thenComposeAsync(l -&gt; &#123; </span><br><span class="line">        Stream&lt;CompletableFuture&lt;String&gt;&gt; zip =</span><br><span class="line">                        l.stream().map(i -&gt; &#123; </span><br><span class="line">                                                 CompletableFuture&lt;String&gt; nameTask = ifhName(i); </span><br><span class="line">                                                 CompletableFuture&lt;Integer&gt; statTask = ifhStat(i); </span><br><span class="line">                                                 <span class="keyword">return</span> nameTask.thenCombineAsync(statTask, (name, stat) -&gt; <span class="string">&quot;Name &quot;</span> + name + <span class="string">&quot; has stats &quot;</span> + stat); </span><br><span class="line">                                         &#125;);</span><br><span class="line">        List&lt;CompletableFuture&lt;String&gt;&gt; combinationList = zip.collect(Collectors.toList()); </span><br><span class="line">        CompletableFuture&lt;String&gt;[] combinationArray = combinationList.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[combinationList.size()]);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Void&gt; allDone = CompletableFuture.allOf(combinationArray); </span><br><span class="line">        <span class="keyword">return</span> allDone.thenApply(v -&gt; combinationList.stream()</span><br><span class="line">                                                     .map(CompletableFuture::join) </span><br><span class="line">                                                     .collect(Collectors.toList()));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; results = result.join(); </span><br><span class="line">assertThat(results).contains(</span><br><span class="line">                                <span class="string">&quot;Name NameJoe has stats 103&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;Name NameBart has stats 104&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;Name NameHenry has stats 105&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;Name NameNicole has stats 106&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;Name NameABSLAJNFOAJNFOANFANSF has stats 121&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="从命令式编程到响应式编程"><a class="markdownIt-Anchor" href="#从命令式编程到响应式编程"></a> 从命令式编程到响应式编程</h4><p>类似 Reactor 这样的响应式库的目标就是要弥补上述“经典”的 JVM 异步方式所带来的不足， 此外还会关注一下几个方面：</p><ul><li><strong>可编排性（Composability）</strong> 以及 <strong>可读性（Readability）</strong></li><li>使用丰富的 <strong>操作符</strong> 来处理形如 <strong>流</strong> 的数据</li><li>在 <strong>订阅（subscribe）</strong> 之前什么都不会发生</li><li><strong>背压（backpressure）</strong> 具体来说即 <em>消费者能够反向告知生产者生产内容的速度的能力</em></li><li><strong>高层次</strong> （同时也是有高价值的）的抽象，从而达到 <em>并发无关</em> 的效果</li></ul><p><strong>可编排性与可读性</strong></p><p>可编排性，指的是编排多个异步任务的能力。比如我们将前一个任务的结果传递给后一个任务作为输入， 或者将多个任务以分解再汇总（fork-join）的形式执行，或者将异步的任务作为离散的组件在系统中 进行重用。</p><p>这种编排任务的能力与代码的可读性和可维护性是紧密相关的。随着异步处理任务数量和复杂度 的提高，编写和阅读代码都变得越来越困难。就像我们刚才看到的，回调模式是简单的，但是缺点 是在复杂的处理逻辑中，回调中会层层嵌入回调，导致 <strong>回调地狱（Callback Hell）</strong> 。你能猜到 （或有过这种痛苦经历），这样的代码是难以阅读和分析的。</p><p>Reactor 提供了丰富的编排操作，从而代码直观反映了处理流程，并且所有的操作保持在同一层次 （尽量避免了嵌套）。</p><p><strong>就像装配流水线</strong></p><p>你可以想象数据在响应式应用中的处理，就像流过一条装配流水线。Reactor 既是传送带， 又是一个个的装配工或机器人。原材料从源头（最初的 Publisher）流出，最终被加工为成品， 等待被推送到消费者（或者说 Subscriber）。</p><p>原材料会经过不同的中间处理过程，或者作为半成品与其他半成品进行组装。如果某处有齿轮卡住， 或者某件产品的包装过程花费了太久时间，相应的工位就可以向上游发出信号来限制或停止发出原材料。</p><p><strong>操作符（Operators）</strong></p><p>在 Reactor 中，操作符（operator）就像装配线中的工位（操作员或装配机器人）。**每一个操作符 对 Publisher 进行相应的处理，然后将 Publisher 包装为一个新的 Publisher。**就像一个链条， 数据源自第一个 Publisher，然后顺链条而下，在每个环节进行相应的处理。<strong>最终，一个订阅者 (Subscriber）终结这个过程</strong>。请记住，<strong>在订阅者（Subscriber）订阅（subscribe）到一个 发布者（Publisher）之前，什么都不会发生。</strong></p><blockquote><p><strong>理解了操作符会创建新的</strong> <strong>Publisher</strong> <strong>实例这一点，能够帮助你避免一个常见的问题， 这种问题会让你觉得处理链上的某个操作符没有起作用。</strong></p></blockquote><p>虽然响应式流规范（Reactive Streams specification）没有规定任何操作符， 类似 Reactor 这样的响应式库所带来的最大附加价值之一就是提供丰富的操作符。包括基础的转换操作， 到过滤操作，甚至复杂的编排和错误处理操作。</p><p><strong>subscribe() 之前什么都不会发生</strong></p><p>在 Reactor 中，当你创建了一条 Publisher 处理链，数据还不会开始生成。事实上，你是创建了 一种抽象的对于异步处理流程的描述（从而方便重用和组装）。</p><p>当真正“订阅（subscrib）”的时候，你需要将 Publisher 关联到一个 Subscriber 上，然后 才会触发整个链的流动。这时候，Subscriber 会向上游发送一个 request 信号，一直到达源头 的 Publisher。</p><p><strong>背压</strong></p><p>向上游传递信号这一点也被用于实现 <strong>背压</strong> ，就像在装配线上，某个工位的处理速度如果慢于流水线 速度，会对上游发送反馈信号一样。</p><p>在响应式流规范中实际定义的机制同刚才的类比非常接近：订阅者可以无限接受数据并让它的源头 “满负荷”推送所有的数据，也可以通过使用 <code>request</code> 机制来告知源头它一次最多能够处理 <code>n</code> 个元素。</p><p>中间环节的操作也可以影响 <code>request</code>。想象一个能够将每10个元素分批打包的缓存（<code>buffer</code>）操作。 如果订阅者请求一个元素，那么对于源头来说可以生成10个元素。此外预取策略也可以使用了， 比如在订阅前预先生成元素。</p><p><strong>这样能够将“推送”模式转换为“推送+拉取”混合的模式，如果下游准备好了，可以从上游拉取 n 个元素；但是如果上游元素还没有准备好，下游还是要等待上游的推送。</strong></p><p><strong>热（Hot） vs 冷（Cold）</strong></p><p>在 Rx 家族的响应式库中，响应式流分为“热”和“冷”两种类型，区别主要在于响应式流如何 对订阅者进行响应：</p><ul><li>一个“冷”的序列，指对于每一个 <code>Subscriber</code>，都会收到从头开始所有的数据。如果源头 生成了一个 HTTP 请求，对于每一个订阅都会创建一个新的 HTTP 请求。</li><li>一个“热”的序列，指对于一个 <code>Subscriber</code>，只能获取从它开始 订阅 <em>之后</em> 发出的数据。不过注意，有些“热”的响应式流可以缓存部分或全部历史数据。 通常意义上来说，一个“热”的响应式流，甚至在即使没有订阅者接收数据的情况下，也可以 发出数据（这一点同 “<code>Subscribe()</code>之前什么都不会发生”的规则有冲突）。</li></ul><h3 id="核心特性"><a class="markdownIt-Anchor" href="#核心特性"></a> 核心特性</h3><h4 id="mono和flux"><a class="markdownIt-Anchor" href="#mono和flux"></a> Mono和Flux</h4><p>Mono: 0|1 数据流</p><p>Flux: N数据流</p><p>响应式流：元素（内容） + 信号（完成/异常）</p><h4 id="subscribe"><a class="markdownIt-Anchor" href="#subscribe"></a> subscribe()</h4><blockquote><p>自定义流的信号感知回调</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flux.subscribe(</span><br><span class="line">        v-&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v), <span class="comment">//流元素消费</span></span><br><span class="line">        throwable -&gt; System.out.println(<span class="string">&quot;throwable = &quot;</span> + throwable), <span class="comment">//感知异常结束</span></span><br><span class="line">        ()-&gt; System.out.println(<span class="string">&quot;流结束了...&quot;</span>) <span class="comment">//感知正常结束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>自定义消费者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">flux.subscribe(<span class="keyword">new</span> <span class="title class_">BaseSubscriber</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="comment">// 生命周期钩子1： 订阅关系绑定的时候触发</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnSubscribe</span><span class="params">(Subscription subscription)</span> &#123;</span><br><span class="line">                <span class="comment">// 流被订阅的时候触发</span></span><br><span class="line">                System.out.println(<span class="string">&quot;绑定了...&quot;</span>+subscription);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//找发布者要数据</span></span><br><span class="line">                request(<span class="number">1</span>); <span class="comment">//要1个数据</span></span><br><span class="line"><span class="comment">//                requestUnbounded(); //要无限数据</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnNext</span><span class="params">(String value)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数据到达，正在处理：&quot;</span>+value);</span><br><span class="line">                request(<span class="number">1</span>); <span class="comment">//要1个数据</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  hookOnComplete、hookOnError 二选一执行</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnComplete</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;流正常结束...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnError</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;流异常...&quot;</span>+throwable);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnCancel</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;流被取消...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookFinally</span><span class="params">(SignalType type)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;最终回调...一定会被执行&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h4 id="流的取消"><a class="markdownIt-Anchor" href="#流的取消"></a> 流的取消</h4><blockquote><p>消费者调用 cancle() 取消流的订阅</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">        Flux&lt;String&gt; flux = Flux.range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">                .map(i -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;map...&quot;</span>+i);</span><br><span class="line">                    <span class="keyword">if</span>(i==<span class="number">9</span>) &#123;</span><br><span class="line">                        i = <span class="number">10</span>/(<span class="number">9</span>-i); <span class="comment">//数学运算异常;  doOnXxx</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;哈哈：&quot;</span> + i;</span><br><span class="line">                &#125;); <span class="comment">//流错误的时候，把错误吃掉，转为正常信号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        flux.subscribe(); //流被订阅; 默认订阅；</span></span><br><span class="line"><span class="comment">//        flux.subscribe(v-&gt; System.out.println(&quot;v = &quot; + v));//指定订阅规则： 正常消费者：只消费正常元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        flux.subscribe(</span></span><br><span class="line"><span class="comment">//                v-&gt; System.out.println(&quot;v = &quot; + v), //流元素消费</span></span><br><span class="line"><span class="comment">//                throwable -&gt; System.out.println(&quot;throwable = &quot; + throwable), //感知异常结束</span></span><br><span class="line"><span class="comment">//                ()-&gt; System.out.println(&quot;流结束了...&quot;) //感知正常结束</span></span><br><span class="line"><span class="comment">//        );</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 流的生命周期钩子可以传播给订阅者。</span></span><br><span class="line">        <span class="comment">//  a() &#123;</span></span><br><span class="line">        <span class="comment">//      data = b();</span></span><br><span class="line">        <span class="comment">//  &#125;</span></span><br><span class="line">        flux.subscribe(<span class="keyword">new</span> <span class="title class_">BaseSubscriber</span>&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生命周期钩子1： 订阅关系绑定的时候触发</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnSubscribe</span><span class="params">(Subscription subscription)</span> &#123;</span><br><span class="line">                <span class="comment">// 流被订阅的时候触发</span></span><br><span class="line">                System.out.println(<span class="string">&quot;绑定了...&quot;</span>+subscription);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//找发布者要数据</span></span><br><span class="line">                request(<span class="number">1</span>); <span class="comment">//要1个数据</span></span><br><span class="line"><span class="comment">//                requestUnbounded(); //要无限数据</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnNext</span><span class="params">(String value)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数据到达，正在处理：&quot;</span>+value);</span><br><span class="line">                <span class="keyword">if</span>(value.equals(<span class="string">&quot;哈哈：5&quot;</span>))&#123;</span><br><span class="line">                    cancel(); <span class="comment">//取消流</span></span><br><span class="line">                &#125;</span><br><span class="line">                request(<span class="number">1</span>); <span class="comment">//要1个数据</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//  hookOnComplete、hookOnError 二选一执行</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnComplete</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;流正常结束...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnError</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;流异常...&quot;</span>+throwable);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnCancel</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;流被取消...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookFinally</span><span class="params">(SignalType type)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;最终回调...一定会被执行&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h4 id="basesubscriber"><a class="markdownIt-Anchor" href="#basesubscriber"></a> BaseSubscriber</h4><p>自定义消费者，推荐直接编写 <strong>BaseSubscriber 的逻辑</strong></p><h4 id="背压backpressure-和请求重塑reshape-requests"><a class="markdownIt-Anchor" href="#背压backpressure-和请求重塑reshape-requests"></a> 背压（Backpressure ）和请求重塑（Reshape Requests）</h4><ol><li><strong>buffer：缓冲</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Flux&lt;List&lt;Integer&gt;&gt; flux = Flux.range(<span class="number">1</span>, <span class="number">10</span>)  <span class="comment">//原始流10个</span></span><br><span class="line">        .buffer(<span class="number">3</span>)</span><br><span class="line">        .log();<span class="comment">//缓冲区：缓冲3个元素: 消费一次最多可以拿到三个元素； 凑满数批量发给消费者</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //一次发一个，一个一个发；</span></span><br><span class="line"><span class="comment">// 10元素，buffer(3)；消费者请求4次，数据消费完成</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>limit：限流</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Flux.range(<span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">    .log()</span><br><span class="line">    <span class="comment">//限流触发，看上游是怎么限流获取数据的</span></span><br><span class="line">    .limitRate(<span class="number">100</span>) <span class="comment">//一次预取30个元素； 第一次 request(100)，以后request(75)</span></span><br><span class="line">    .subscribe();</span><br></pre></td></tr></table></figure><h4 id="以编程方式创建序列-sink"><a class="markdownIt-Anchor" href="#以编程方式创建序列-sink"></a> 以编程方式创建序列-Sink</h4><blockquote><p>Sink.next</p><p>Sink.complete</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo/images/image.png" alt="image" /></p><ol><li><p><strong>同步环境-generate</strong></p></li><li><p><strong>多线程-create</strong></p></li></ol><h4 id="handle"><a class="markdownIt-Anchor" href="#handle"></a> handle()</h4><blockquote><p>自定义流中元素处理规则</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">     Flux.range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">             .handle((value,sink)-&gt;&#123;</span><br><span class="line">                 System.out.println(<span class="string">&quot;拿到的值：&quot;</span>+value);</span><br><span class="line">                 sink.next(<span class="string">&quot;张三：&quot;</span>+value); <span class="comment">//可以向下发送数据的通道</span></span><br><span class="line">             &#125;)</span><br><span class="line">             .log() <span class="comment">//日志</span></span><br><span class="line">             .subscribe();</span><br></pre></td></tr></table></figure><h4 id="自定义线程调度"><a class="markdownIt-Anchor" href="#自定义线程调度"></a> 自定义线程调度</h4><blockquote><p>响应式：响应式编程： 全异步、消息、事件回调</p><p>默认还是用当前线程，生成整个流、发布流、流操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">thread1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Scheduler</span> <span class="variable">s</span> <span class="operator">=</span> Schedulers.newParallel(<span class="string">&quot;parallel-scheduler&quot;</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Flux&lt;String&gt; flux = Flux</span><br><span class="line">            .range(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">            .map(i -&gt; <span class="number">10</span> + i)</span><br><span class="line">            .log()</span><br><span class="line">            .publishOn(s)</span><br><span class="line">            .map(i -&gt; <span class="string">&quot;value &quot;</span> + i)</span><br><span class="line">            ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只要不指定线程池，默认发布者用的线程就是订阅者的线程；</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; flux.subscribe(System.out::println)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="错误处理"><a class="markdownIt-Anchor" href="#错误处理"></a> 错误处理</h4><p>命令式编程：常见的错误处理方式</p><ol><li>Catch and return a static default value. 捕获异常返回一个静态默认值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> doSomethingDangerous(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable error) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;RECOVERED&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>onErrorReturn: 实现上面效果，错误的时候返回一个值</p><ul><li>1、吃掉异常，消费者无异常感知</li><li>2、返回一个兜底默认值</li><li>3、流正常完成</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">        .map(i -&gt; <span class="string">&quot;100 / &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (<span class="number">100</span> / i))</span><br><span class="line">        .onErrorReturn(NullPointerException.class,<span class="string">&quot;哈哈-6666&quot;</span>)</span><br><span class="line">        .subscribe(v-&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v),</span><br><span class="line">                err -&gt; System.out.println(<span class="string">&quot;err = &quot;</span> + err),</span><br><span class="line">                ()-&gt; System.out.println(<span class="string">&quot;流结束&quot;</span>)); <span class="comment">// error handling example</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Catch and execute an alternative path with a fallback method</li></ol><p>吃掉异常，执行一个兜底方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> doSomethingDangerous(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable error) &#123;</span><br><span class="line">  <span class="keyword">return</span> doOtherthing(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>onErrorResume</p><ul><li>1、吃掉异常，消费者无异常感知</li><li>2、调用一个兜底方法</li><li>3、流正常完成</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">        .map(i -&gt; <span class="string">&quot;100 / &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (<span class="number">100</span> / i)).onErrorResume(err -&gt; Mono.just(<span class="string">&quot;哈哈-777&quot;</span>))</span><br><span class="line">        .subscribe(v -&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v),</span><br><span class="line">                err -&gt; System.out.println(<span class="string">&quot;err = &quot;</span> + err),</span><br><span class="line">                () -&gt; System.out.println(<span class="string">&quot;流结束&quot;</span>));</span><br></pre></td></tr></table></figure><ol start="3"><li>Catch and dynamically compute a fallback value. 捕获并动态计算一个返回值</li></ol><p>根据错误返回一个新值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="type">Value</span> <span class="variable">v</span> <span class="operator">=</span> erroringMethod();</span><br><span class="line">  <span class="keyword">return</span> MyWrapper.fromValue(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable error) &#123;</span><br><span class="line">  <span class="keyword">return</span> MyWrapper.fromError(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>1、吃掉异常，消费者有感知</li><li>2、调用一个自定义方法</li><li>3、流异常完成</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.onErrorResume(err -&gt; Flux.error(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(err.getMessage()+<span class="string">&quot;：炸了&quot;</span>)))</span><br></pre></td></tr></table></figure><ol start="4"><li>Catch, wrap to a BusinessException, and re-throw</li></ol><p>捕获并包装成一个业务异常，并重新抛出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> callExternalService(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable error) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;oops, SLA exceeded&quot;</span>, error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>包装重新抛出异常:  推荐用  .onErrorMap</p><ul><li>1、吃掉异常，消费者有感知</li><li>2、抛新异常</li><li>3、流异常完成</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.onErrorResume(err -&gt; Flux.error(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(err.getMessage()+<span class="string">&quot;：炸了&quot;</span>)))</span><br><span class="line"></span><br><span class="line">        Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">                .map(i -&gt; <span class="string">&quot;100 / &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (<span class="number">100</span> / i))</span><br><span class="line">                .onErrorMap(err-&gt; <span class="keyword">new</span> <span class="title class_">BusinessException</span>(err.getMessage()+<span class="string">&quot;: 又炸了...&quot;</span>))</span><br><span class="line">                .subscribe(v -&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v),</span><br><span class="line">                        err -&gt; System.out.println(<span class="string">&quot;err = &quot;</span> + err),</span><br><span class="line">                        () -&gt; System.out.println(<span class="string">&quot;流结束&quot;</span>));</span><br></pre></td></tr></table></figure><ol start="5"><li>Catch, log an error-specific message, and re-throw</li></ol><p>捕获异常，记录特殊的错误日志，重新抛出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> callExternalService(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException error) &#123;</span><br><span class="line">  <span class="comment">//make a record of the error</span></span><br><span class="line">  log(<span class="string">&quot;uh oh, falling back, service failed for key &quot;</span> + k);</span><br><span class="line">  <span class="keyword">throw</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>异常被捕获、做自己的事情</li><li>不影响异常继续顺着流水线传播</li><li>不吃掉异常，只在异常发生的时候做一件事，消费者有感知</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">        .map(i -&gt; <span class="string">&quot;100 / &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (<span class="number">100</span> / i))</span><br><span class="line">        .doOnError(err -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;err已被记录 = &quot;</span> + err);</span><br><span class="line">        &#125;).subscribe(v -&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v),</span><br><span class="line">                err -&gt; System.out.println(<span class="string">&quot;err = &quot;</span> + err),</span><br><span class="line">                () -&gt; System.out.println(<span class="string">&quot;流结束&quot;</span>));</span><br></pre></td></tr></table></figure><ol start="6"><li>Use the finally block to clean up resources or a Java 7 “try-with-resource” construct</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">        .map(i -&gt; <span class="string">&quot;100 / &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (<span class="number">100</span> / i))</span><br><span class="line">        .doOnError(err -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;err已被记录 = &quot;</span> + err);</span><br><span class="line">        &#125;)</span><br><span class="line">        .doFinally(signalType -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;流信号：&quot;</span>+signalType);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><ol start="7"><li>忽略当前异常，仅通知记录，继续推进</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">        .map(i-&gt;<span class="number">10</span>/i)</span><br><span class="line">        .onErrorContinue((err,val)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;err = &quot;</span> + err);</span><br><span class="line">            System.out.println(<span class="string">&quot;val = &quot;</span> + val);</span><br><span class="line">            System.out.println(<span class="string">&quot;发现&quot;</span>+val+<span class="string">&quot;有问题了，继续执行其他的，我会记录这个问题&quot;</span>);</span><br><span class="line">        &#125;) <span class="comment">//发生</span></span><br><span class="line">        .subscribe(v-&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v),</span><br><span class="line">                err-&gt; System.out.println(<span class="string">&quot;err = &quot;</span> + err));</span><br></pre></td></tr></table></figure><h4 id="常用操作"><a class="markdownIt-Anchor" href="#常用操作"></a> 常用操作</h4><p>filter、flatMap、concatMap、flatMapMany、transform、defaultIfEmpty、switchIfEmpty、concat、concatWith、merge、mergeWith、mergeSequential、zip、zipWith…</p><ul><li><p><strong>常用操作</strong></p></li><li><p><strong>错误处理</strong></p></li><li><p><strong>超时与重试</strong></p></li><li><p><strong>Sinks工具类</strong></p></li><li><ul><li><strong>单播</strong></li><li><strong>多播</strong></li><li><strong>重放</strong></li><li><strong>背压</strong></li><li><strong>缓存</strong></li></ul></li><li><p><strong>阻塞式API</strong></p></li><li><ul><li><strong>block</strong></li></ul></li><li><p><strong>Context-API</strong>：响应式中的ThreadLocal</p></li><li><ul><li>ThreadLocal机制失效</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">        .transformDeferredContextual((flux,context)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;flux = &quot;</span> + flux);</span><br><span class="line">            System.out.println(<span class="string">&quot;context = &quot;</span> + context);</span><br><span class="line">            <span class="keyword">return</span> flux.map(i-&gt;i+<span class="string">&quot;==&gt;&quot;</span>+context.get(<span class="string">&quot;prefix&quot;</span>));</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//上游能拿到下游的最近一次数据</span></span><br><span class="line">        .contextWrite(Context.of(<span class="string">&quot;prefix&quot;</span>,<span class="string">&quot;哈哈&quot;</span>))</span><br><span class="line">        <span class="comment">//ThreadLocal共享了数据，上游的所有人能看到; Context由下游传播给上游</span></span><br><span class="line">        .subscribe(v-&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v));</span><br></pre></td></tr></table></figure><ul><li><p><strong>ParallelFlux</strong>：</p></li><li><ul><li>并发流</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Flux.range(<span class="number">1</span>,<span class="number">1000000</span>)</span><br><span class="line">.buffer(<span class="number">100</span>)</span><br><span class="line">.parallel(<span class="number">8</span>)</span><br><span class="line">.runOn(Schedulers.newParallel(<span class="string">&quot;yy&quot;</span>))</span><br><span class="line">.log()</span><br><span class="line">.subscribe();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;reactor核心&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#reactor核心&quot;&gt;&lt;/a&gt; Reactor核心&lt;/h1&gt;
&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前置知识</summary>
      
    
    
    
    <category term="编程进阶" scheme="https://www.yuanyuan.blog/categories/%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="Java" scheme="https://www.yuanyuan.blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin-Flow</title>
    <link href="https://www.yuanyuan.blog/posts/523e7d6c.html"/>
    <id>https://www.yuanyuan.blog/posts/523e7d6c.html</id>
    <published>2024-07-27T16:52:18.000Z</published>
    <updated>2025-02-22T12:17:28.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kotlin-flow"><a class="markdownIt-Anchor" href="#kotlin-flow"></a> Kotlin-Flow</h1><p>在学习Kotlin Flow之前，我们先举一个例子，循环调用10次网络请求，获取的结果平方，然后过滤掉奇数，最后取前2个，然后打印。</p><p>请先在 <code>build.gradle.kts</code> 中添加协程依赖项</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.delay</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.flow.*</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.runBlocking</span><br><span class="line"><span class="keyword">import</span> kotlin.random.Random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="comment">//    notUseFlow()</span></span><br><span class="line">    useFlow()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">useFlow</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> flow = flow &#123;</span><br><span class="line">        repeat(<span class="number">10</span>) &#123;</span><br><span class="line">            emit(request())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flow.map &#123; it * it &#125;</span><br><span class="line">        .filter &#123; it % <span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line">        .take(<span class="number">2</span>)</span><br><span class="line">        .onEach &#123; println(it) &#125;</span><br><span class="line">        .collect()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">notUseFlow</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">    repeat(<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> res = request().let &#123; it * it &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span><span class="symbol">@repeat</span></span><br><span class="line">        ++count</span><br><span class="line">        println(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">notUseFlow2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> resList = (<span class="number">0</span> until <span class="number">10</span>).map &#123; request() &#125;</span><br><span class="line">    resList.map &#123; it * it &#125;</span><br><span class="line">        .filter &#123; it % <span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line">        .take(<span class="number">2</span>)</span><br><span class="line">        .onEach &#123; println(it) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟网络请求</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">request</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    delay(Random.nextLong(<span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">return</span> Random.nextInt(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>notUseFlow</code> 和 <code>notUseFlow2</code> 两个函数是不使用 Flow 的方式，<code>useFlow</code> 是使用 Flow 的方式。<br /><code>notUseFlow</code> 是一种常规写法，但是代码较冗余，不易阅读，简单场景可以使用。<code>notUseFlow2</code> 是采用链式操作，代码简单，易读，但是因为 <code>request</code> 是一个阻塞的方法，会阻塞在 <code>.map</code> 操作，导致代码时间消耗高。而 <code>useFlow</code> 是采用 <code>Flow</code> 的方式，代码简单，可读性强，不会阻塞。</p><h2 id="冷流"><a class="markdownIt-Anchor" href="#冷流"></a> 冷流</h2><p>首先我们看一下创建流的几种方式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    (<span class="number">1.</span><span class="number">.10</span>).asFlow()</span><br><span class="line">    listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).asFlow()</span><br><span class="line">    flowOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>asFlow</code> , <code>flowOf</code>都是通过flow高阶函数进行创建的</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240727184933.png" alt="image-20240727184933188" /></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.flow.*</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.runBlocking</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="comment">//生产者 流的上游</span></span><br><span class="line">    <span class="keyword">val</span> flow = flow &#123;</span><br><span class="line">        repeat(<span class="number">10</span>) &#123;</span><br><span class="line">            emit(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费者</span></span><br><span class="line">    flow.map &#123; it * it &#125;</span><br><span class="line">        .filter &#123; it % <span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line">        .take(<span class="number">2</span>)</span><br><span class="line">        .onEach &#123; println(it) &#125;</span><br><span class="line">        .collect()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>emit()</code> 和 <code>.collect()</code> 为suspend挂起函数，需要在协程中执行， <code>emit()</code> 为生产者，<code>collect()</code> 为消费者。<br />Flow的扩展函数 <code>.map()</code> 和 <code>.filter()</code> 是实现的<strong>transform</strong>高阶函数，实际上，我们的流操作可以通过transform来实现。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240727184658.png" alt="image-20240727184658042" /></p><p>下面代码和上面代码实现的功能完全一样：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.flow.*</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.runBlocking</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="comment">//生产者 流的上游</span></span><br><span class="line">    <span class="keyword">val</span> flow = flow &#123;</span><br><span class="line">        repeat(<span class="number">10</span>) &#123;</span><br><span class="line">            emit(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费者</span></span><br><span class="line">    flow.transform &#123; num -&gt;</span><br><span class="line">        <span class="keyword">val</span> newNum = num * num</span><br><span class="line">        <span class="keyword">if</span> (newNum % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            emit(newNum)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.take(<span class="number">2</span>)</span><br><span class="line">        .onEach &#123; println(it) &#125;</span><br><span class="line">        .collect()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="热流"><a class="markdownIt-Anchor" href="#热流"></a> 热流</h2><h3 id="sharedflow共享数据流"><a class="markdownIt-Anchor" href="#sharedflow共享数据流"></a> SharedFlow(共享数据流)</h3><p>它是通过 <code>MutableSharedFlow</code> 创建</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.flow.MutableSharedFlow</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.flow.collect</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.flow.onEach</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.runBlocking</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> sharedFlow = MutableSharedFlow&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    repeat(<span class="number">10</span>) &#123;</span><br><span class="line">        sharedFlow.emit(it)</span><br><span class="line">    &#125;</span><br><span class="line">    sharedFlow.onEach &#123;</span><br><span class="line">        println(it)</span><br><span class="line">    &#125;.collect()</span><br><span class="line">    println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，我们发现它没有任何输出，没有输出就对了，因为它是自己生产自己的，不管消费者是否订阅。而且不会打印 <strong>end</strong> 信息，因为消费者不知道流是什么时候结束的，所以它会一直订阅，因为它是挂起的，所以会阻塞这一行。这是我们会使用 <code>.launchIn(this)</code> 把它开到新的协程作用域里面，此时它就不会阻塞我们了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.flow.MutableSharedFlow</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.flow.launchIn</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.flow.onEach</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.runBlocking</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> sharedFlow = MutableSharedFlow&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    repeat(<span class="number">10</span>) &#123;</span><br><span class="line">        sharedFlow.emit(it)</span><br><span class="line">    &#125;</span><br><span class="line">    sharedFlow.onEach &#123;</span><br><span class="line">        println(it)</span><br><span class="line">    &#125;.launchIn(<span class="keyword">this</span>)</span><br><span class="line">    println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240727190521.png" alt="image-20240727190520907" /></p><p>MutableSharedFlow函数的参数</p><ol><li>replay</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> sharedFlow = MutableSharedFlow&lt;<span class="built_in">Int</span>&gt;(</span><br><span class="line">        replay = <span class="number">3</span>, <span class="comment">//把最近期的，我们设置的重播缓冲区的大小的那几个值存储起来，如果有订阅者就直接发送给它</span></span><br><span class="line">    )</span><br><span class="line">    repeat(<span class="number">10</span>) &#123;</span><br><span class="line">        sharedFlow.emit(it)</span><br><span class="line">    &#125;</span><br><span class="line">    sharedFlow.onEach &#123;</span><br><span class="line">        println(it)</span><br><span class="line">    &#125;.launchIn(<span class="keyword">this</span>)</span><br><span class="line">    println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240727191015.png" alt="image-20240727191015461" /></p><ol start="2"><li>extraBufferCapacity</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> sharedFlow = MutableSharedFlow&lt;<span class="built_in">Int</span>&gt;(</span><br><span class="line">        extraBufferCapacity = <span class="number">1</span>, <span class="comment">//缓冲区的大小</span></span><br><span class="line">    )</span><br><span class="line">    sharedFlow.onEach &#123;</span><br><span class="line">        println(<span class="string">&quot;收到数据<span class="variable">$it</span>&quot;</span>)</span><br><span class="line">        delay(<span class="number">1000</span>)</span><br><span class="line">    &#125;.launchIn(<span class="keyword">this</span>)</span><br><span class="line">    delay(<span class="number">1000</span>) <span class="comment">// 休眠，避免开协程作用域没有emit快</span></span><br><span class="line">    repeat(<span class="number">10</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;发送次数<span class="subst">$&#123;it + <span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line">        sharedFlow.emit(it)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240727191732.png" alt="image-20240727191732415" style="zoom:50%;" /><p>注意replay和extraBufferCapacity一起使用，缓冲区容量等于它们之和</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> sharedFlow = MutableSharedFlow&lt;<span class="built_in">Int</span>&gt;(</span><br><span class="line">        replay = <span class="number">3</span>, <span class="comment">//把最近期的，我们设置的重播缓冲区的大小的那几个值存储起来，如果有订阅者就直接发送给它</span></span><br><span class="line">        extraBufferCapacity = <span class="number">1</span>, <span class="comment">//缓冲区的大小</span></span><br><span class="line">    )</span><br><span class="line">    sharedFlow.onEach &#123;</span><br><span class="line">        println(<span class="string">&quot;收到数据<span class="variable">$it</span>&quot;</span>)</span><br><span class="line">        delay(<span class="number">1000</span>)</span><br><span class="line">    &#125;.launchIn(<span class="keyword">this</span>)</span><br><span class="line">    delay(<span class="number">1000</span>) <span class="comment">// 休眠，避免开协程作用域没有emit快</span></span><br><span class="line">    repeat(<span class="number">10</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;发送次数<span class="subst">$&#123;it + <span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line">        sharedFlow.emit(it)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240727192149.png" alt="image-20240727192149107" style="zoom:50%;" /><p>从MutableSharedFlow源码中也可以看出：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240727192010.png" alt="image-20240727192010037" /></p><ol start="3"><li>onBufferOverflow</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> sharedFlow = MutableSharedFlow&lt;<span class="built_in">Int</span>&gt;(</span><br><span class="line">        replay = <span class="number">3</span>,</span><br><span class="line">        extraBufferCapacity = <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 缓冲区（队列）溢出操作</span></span><br><span class="line">        <span class="comment">// SUSPEND :如果缓冲区满了，就挂起</span></span><br><span class="line">        <span class="comment">// DROP_OLDEST :如果缓冲区满了，就丢掉最老的那个</span></span><br><span class="line">        <span class="comment">// DROP_LATEST :如果缓冲区满了，就丢掉最新的那个</span></span><br><span class="line">        onBufferOverflow = BufferOverflow.DROP_LATEST</span><br><span class="line">    )</span><br><span class="line">    sharedFlow.onEach &#123;</span><br><span class="line">        delay(<span class="number">1000</span>)</span><br><span class="line">        println(it)</span><br><span class="line">    &#125;.launchIn(<span class="keyword">this</span>)</span><br><span class="line">    delay(<span class="number">1000</span>) <span class="comment">// 休眠，避免开协程作用域没有emit快</span></span><br><span class="line">    repeat(<span class="number">10</span>) &#123;</span><br><span class="line">        sharedFlow.emit(it)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240727192629.png" alt="DROP_OLDEST" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240727192724.png" alt="DROP_LATEST" style="zoom:67%;" /><h3 id="stateflow状态数据流"><a class="markdownIt-Anchor" href="#stateflow状态数据流"></a> StateFlow(状态数据流)</h3><p>这是一个常用到的东西，跟Android中的 <code>LiveData</code> 是一样的效果，主要是对某一个状态进行响应式监听和改变。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.flow.MutableStateFlow</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.launch</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.runBlocking</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> stateFlow = MutableStateFlow(<span class="number">1</span>) <span class="comment">// 只会发一个值，并不会发很多值</span></span><br><span class="line">    stateFlow.emit(<span class="number">2</span>)</span><br><span class="line">    launch &#123; <span class="comment">// 避免阻塞</span></span><br><span class="line">        stateFlow.collect &#123;</span><br><span class="line">            println(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stateFlow.emit(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240727201552.png" alt="image-20240727201552379" style="zoom: 80%;" /><p>接下来写一个Android的例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.delay</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.flow.MutableStateFlow</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.flow.asStateFlow</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.isActive</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.launch</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.runBlocking</span><br><span class="line"><span class="keyword">import</span> kotlin.random.Random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> viewModel = ViewModel()</span><br><span class="line">    launch &#123;</span><br><span class="line">        viewModel.age.collect &#123;</span><br><span class="line">            println(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    launch &#123;</span><br><span class="line">        <span class="keyword">while</span> (isActive) &#123;</span><br><span class="line">            viewModel.updateAge()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewModel</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> _age = MutableStateFlow(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> age = _age.asStateFlow() <span class="comment">//改为不可更新，只能监听的状态</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateAge</span><span class="params">()</span></span> &#123;</span><br><span class="line">        _age.emit(ageRequest())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">ageRequest</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    delay(Random.nextLong(<span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">return</span> Random.nextInt(<span class="number">20</span>, <span class="number">60</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240727203013.png" alt="image-20240727203013255" style="zoom:50%;" /><p>这里将 <code>_age</code> 设计为私有的，而只是把只能监听的状态 <code>age</code> 暴露出去，是因为在架构设计中，<strong>viewmodel</strong>本身就是为了把数据和页面分离开，页面只管监听数据的改变进行更新就行了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;kotlin-flow&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#kotlin-flow&quot;&gt;&lt;/a&gt; Kotlin-Flow&lt;/h1&gt;
&lt;p&gt;在学习Kotlin Flow之前，我们先举一个例子，循环调用10次网络请求，获取的结果平方</summary>
      
    
    
    
    <category term="编程进阶" scheme="https://www.yuanyuan.blog/categories/%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="kotlin" scheme="https://www.yuanyuan.blog/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>curl</title>
    <link href="https://www.yuanyuan.blog/posts/3e01b4d.html"/>
    <id>https://www.yuanyuan.blog/posts/3e01b4d.html</id>
    <published>2024-07-16T17:30:56.000Z</published>
    <updated>2025-02-22T12:17:28.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http常见请求"><a class="markdownIt-Anchor" href="#http常见请求"></a> HTTP常见请求</h2><table><thead><tr><th>命令</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>curl URL</td><td>测试与目标是否能正常连接，对api进行请求，可以返回api请求的数据（默认GET请求）</td><td>curl <a href="http://localhost:3000/getAllUsers">http://localhost:3000/getAllUsers</a></td></tr><tr><td>curl -X -POST URL -d 数据（等同于curl -XPOST URL -d 数据）</td><td>POST请求</td><td>curl -XPOST <a href="http://localhost:3000/addUser">http://localhost:3000/addUser</a> -d ‘{“name”: “zhangsan”}’</td></tr><tr><td>curl -X -PUT URL -d 数据（等同于curl -XPUT URL -d 数据）</td><td>PUT请求，更新数据</td><td>curl -XPUT <a href="http://localhost:3000/updateUser/1">http://localhost:3000/updateUser/1</a> -d ‘{“name”: “lisi”}’</td></tr><tr><td>curl -X -DELETE URL（等同于curl -XDELETE URL）</td><td>DELETE请求，删除数据</td><td>curl -XDELETE <a href="http://localhost:3000/deleteUser/1">http://localhost:3000/deleteUser/1</a></td></tr><tr><td>curl URL -H 首部</td><td>添加首部信息</td><td>curl -XPOST <a href="http://localhost:3000/addUser">http://localhost:3000/addUser</a> -H ‘Content-Type: application/json’ -H ‘cache-control: no-cache’ -d ‘{“name”: “zhangsan”}’</td></tr><tr><td>curl -I URL</td><td>获取响应的所有首部</td><td>curl -I <a href="http://localhost:3000/getAllUsers">http://localhost:3000/getAllUsers</a></td></tr><tr><td>curl -O URL</td><td>下载到当前文件夹</td><td>curl -O <a href="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/202301141212847.png">https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/202301141212847.png</a></td></tr><tr><td>curl -o 文件名  URL</td><td>以指定文件名下载到当前文件夹</td><td>curl -o avatar.png <a href="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/202301141212847.png">https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/202301141212847.png</a></td></tr><tr><td>curl --limit-rate 速度 URL</td><td>下载大文件时，限制下载速度(单位默认为字节)</td><td>curl --limit-rate 100k -o ubuntu.iso <a href="https://mirrors.xjtu.edu.cn/ubuntu-releases/24.04/ubuntu-24.04-desktop-amd64.iso">https://mirrors.xjtu.edu.cn/ubuntu-releases/24.04/ubuntu-24.04-desktop-amd64.iso</a></td></tr><tr><td>curl -C - URL</td><td>恢复大文件下载进展</td><td>curl --C - -o ubuntu.iso <a href="https://mirrors.xjtu.edu.cn/ubuntu-releases/24.04/ubuntu-24.04-desktop-amd64.iso">https://mirrors.xjtu.edu.cn/ubuntu-releases/24.04/ubuntu-24.04-desktop-amd64.iso</a></td></tr><tr><td>curl URL -L</td><td>开启重定向</td><td>curl <a href="https://www.bilibili.com">https://www.bilibili.com</a> -L</td></tr><tr><td>curl -v URL</td><td>会把底层连接的信息都显示出来，比如握手信息，请求和响应首部信息</td><td>curl -v -L <a href="https://www.bilibili.com">https://www.bilibili.com</a></td></tr><tr><td>curl --proxy 协议://用户名:密码@代理地址:端口 URL</td><td>通过代理访问网络地址</td><td>curl --proxy <a href="http://liaojie1314:123456@127.0.0.1:1234">http://liaojie1314:123456@127.0.0.1:1234</a> URL</td></tr><tr><td>curl -u 用户名:密码 -O URL</td><td>ftp下载文件，也可以使用-o</td><td>curl -u liaojie1314:123456 -O <a href="ftp://server/a.avi">ftp://server/a.avi</a></td></tr><tr><td>curl -u 用户名:密码 -T 文件 URL</td><td>ftp上传文件，注意文件为当前文件夹中文件</td><td>curl -u liaojie1314:123456 -T b.avi <a href="ftp://server/">ftp://server/</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;http常见请求&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#http常见请求&quot;&gt;&lt;/a&gt; HTTP常见请求&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
</summary>
      
    
    
    
    <category term="命令" scheme="https://www.yuanyuan.blog/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="curl" scheme="https://www.yuanyuan.blog/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>vim</title>
    <link href="https://www.yuanyuan.blog/posts/280100fb.html"/>
    <id>https://www.yuanyuan.blog/posts/280100fb.html</id>
    <published>2024-07-08T21:56:44.000Z</published>
    <updated>2025-02-22T12:17:28.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim"><a class="markdownIt-Anchor" href="#vim"></a> vim</h1><p>大家好，今天我们来讲解一下vim。有人可能要问我们为什么要学习vim呢，我们不是都有文本编辑软件了吗，因为我们在使用服务器时或者搭建虚拟机（不要图形化界面，节省空间，并且使用终端可以让别人认为你很nb）时，都是没有图形界面的，给我们的都是一个黑乎乎的命令行终端。有的同学可能会说，我一般都是使用服务器建站之类的，使用服务器商提供的一键建站或者使用宝塔之类的，也不会使用什么vim，平时也使用不到。好像说的有点道理，那这期就不讲了？怎么可能，就算你现在使用不到，你以后工作时也会使用的，而且你也可以跟比人装13说你vim用得贼六。而且，当你完全掌握了vim之后，你就可以不使用鼠标了，这样可以大大提升你的开发效率。</p><h2 id="模式"><a class="markdownIt-Anchor" href="#模式"></a> 模式</h2><p>在学习vim之前，我们需要知道vim的三种模式（或者说是四种模式，加一个视觉模式）：</p><ul><li>正常模式</li><li>编辑模式</li><li>命令行模式</li></ul><p>首先我们需要下载vim，在linux系统中，vim的下载十分简单，这里以ubuntu为例，输入<code>sudo apt-get install vim -y</code>，等待安装完成即可。</p><div class="tip warning"><p>vim操作严格区分大小写，更不要使用中文符号</p></div><p>首先我们使用vim打开一个文件：<strong>vim ab.c</strong>，如果文件不存在，vim会自动帮我们创建。进入vim以后，我们所处的就是正常模式，点击 <strong>小写i</strong> 进入编辑模式，点击 <strong>esc</strong> 即可退出编辑模式，回到正常模式，输入 <strong>:</strong> 进入命令行模式。</p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><p>查看vim配置文件位置：输入<strong>vim --version</strong></p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240716190333.png" alt="image-20240716190332851" style="zoom:80%;" /><p>进入vim配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim $HOME/.vimrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">=================添加如下内容===================</span></span><br><span class="line">set number # 添加行号</span><br><span class="line">set relativenumber # 添加相对行号</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">===================保存退出=====================</span></span><br></pre></td></tr></table></figure><h2 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>i</strong></td><td>从正常模式进入编辑模式(光标左侧)</td></tr><tr><td><strong>esc</strong></td><td>从编辑模式回到正常模式</td></tr><tr><td><strong>:</strong></td><td>从正常模式进入命令行模式</td></tr><tr><td><strong>:q</strong></td><td>仅退出，若文件有修改，则无法退出。若文件为vim新建，则文件也会消失</td></tr><tr><td><strong>:q!</strong></td><td>修改文件后，不保存退出。若文件为vim新建，则文件也会消失</td></tr><tr><td><strong>:wq</strong></td><td>保存修改文件后退出</td></tr><tr><td><strong>h、j、k、l(小写L)</strong></td><td>左、下、上、右(正常模式)，可以输入<strong>数字 h/j/k/l</strong>，比如5 j，向下移动5行</td></tr><tr><td><strong>a</strong></td><td>从正常模式进入编辑模式(光标右侧)</td></tr><tr><td><strong>I(大写i)或者shift+i</strong></td><td>插在当行最前面</td></tr><tr><td><strong>A或者shift+a</strong></td><td>插在当行最后面</td></tr><tr><td><strong>o</strong></td><td>新增下一行并进入编辑模式</td></tr><tr><td><strong>O或者shift+o</strong></td><td>新增上一行并进入编辑模式</td></tr><tr><td><strong>G</strong></td><td>到最后一行</td></tr><tr><td><strong>gg</strong></td><td>到第一行</td></tr><tr><td><strong>yy</strong></td><td>复制当前行</td></tr><tr><td><strong>p</strong></td><td>粘贴，可以使用<strong>数字 p</strong>粘贴多次</td></tr><tr><td><strong>dd</strong></td><td>删除当前行</td></tr><tr><td><strong>.</strong></td><td>重复当前操作</td></tr><tr><td><strong>u</strong></td><td>撤销操作</td></tr><tr><td><strong>ctrl+r</strong></td><td>恢复当前撤销操作</td></tr><tr><td><strong>dw</strong></td><td>删除单词</td></tr><tr><td><strong>cw</strong></td><td>改变单词</td></tr><tr><td><strong>w</strong></td><td>跳到下一个单词首部</td></tr><tr><td><strong>e</strong></td><td>跳到下一个单词尾部</td></tr><tr><td><strong>b</strong></td><td>跳到上一个单词首部</td></tr><tr><td><strong>/</strong></td><td>搜索内容，比如**/app**，搜索含app的内容，按回车跳到匹配的字符</td></tr><tr><td><strong>:%s/旧字符/新字符/g</strong></td><td>全局替换旧字符为新字符</td></tr><tr><td><strong>yw</strong></td><td>复制一个单词</td></tr><tr><td><strong>ci{</strong></td><td>删除{}里内容，()与[]同理</td></tr><tr><td><strong>ctrl+v</strong></td><td>进入视觉模式，可视化块，按d可删除选中内容</td></tr><tr><td><strong>shift+v</strong></td><td>进入视觉模式，可视化行，按d可删除选中行</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vim&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#vim&quot;&gt;&lt;/a&gt; vim&lt;/h1&gt;
&lt;p&gt;大家好，今天我们来讲解一下vim。有人可能要问我们为什么要学习vim呢，我们不是都有文本编辑软件了吗，因为我们在使用服务器时或者搭建虚拟机</summary>
      
    
    
    
    <category term="命令" scheme="https://www.yuanyuan.blog/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="vim" scheme="https://www.yuanyuan.blog/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://www.yuanyuan.blog/posts/518e617c.html"/>
    <id>https://www.yuanyuan.blog/posts/518e617c.html</id>
    <published>2024-07-04T17:09:01.000Z</published>
    <updated>2025-02-22T12:17:28.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git"><a class="markdownIt-Anchor" href="#git"></a> git</h1><h2 id="工作流"><a class="markdownIt-Anchor" href="#工作流"></a> 工作流</h2><p>首先我们看一下git版本控制的基本流程：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728180809.png" alt="image-20240728180808754" /></p><p>一般我们会把项目放到远程仓库（github，gitee等）里，所有人都以这个远程仓库的文件作为最新版本（正本），。个人都有自己的工作区，这个工作区也就是自己本地电脑里的一个文件夹，每个人都可以用 <code>clone</code> 把最新版本的文件复制到本地，在自己电脑里操作文件就不会影响远程仓库，而且每个人都可以负责不同的板块。假设现在我们更新了一些文件想要提交到远程仓库，比如新增的4个文件里，我们只有2个文件需要添加到远程仓库，这个时候就可以把这2个文件添加到暂存区，也就是 <code>add</code> 。如果暂存区我们也觉得没有问题了，可以提交到本地仓库，也就是 <code>commit</code> ，本地仓库其实也就是本地版本区。如果本地仓库可以去更新远程仓库了，我们就可以用 <code>push</code> 把内容推过去。这里有几个状态要特别注意，如果文件还在工作区里，那文件就是 <strong>Untracked</strong> -未追踪状态，也可以用<strong>Unstage</strong>表示，已追踪状态用<strong>stage</strong>表示。如果远程仓库有更新内容，我们可以使用 <code>pull</code> 来进行更新，pull会直接更新到工作区，把你工作区的内容更新掉。所以，我们可以用 <code>fetch</code> 先更新到本地版本库，接着用 <code>diff</code> 对比区别，没问题再合并过来。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728183348.png" alt="image-20240728183348117" /></p><h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h2><ul><li>git config 配置基本信息<ul><li>git config --global <a href="http://user.name">user.name</a> 用户名</li><li>git config --global user.email 邮箱</li><li>git config --global init.defaultBranch main<ul><li>将初始化分支改为main</li></ul></li></ul></li></ul><p>新建并进入一个空白文件夹作为工作区</p><ul><li><p>git init 初始化</p><ul><li><p>输入后会发现多了一个 <code>.git</code> 隐藏文件夹</p></li><li><p>git所有记录都会在这个文件夹里</p></li><li><p>一般来说我们不需要去研究里面文件的具体作用</p></li><li><p>初始化后会处于 <code>master/main</code> 主分支</p> <img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728184458.png" alt="image-20240728184457819" style="zoom:67%;" /></li></ul></li></ul><p>现在我们随便新建一个文件，随便写点内容</p><ul><li><p>git status 查看文件状态</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728184827.png" alt="image-20240728184827337" style="zoom:67%;" /></li><li><p>git add 添加文件到缓存区</p><ul><li>git add 文件名<ul><li>添加指定文件</li></ul></li><li>git add .<ul><li>添加所有未追踪文件</li></ul></li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728185217.png" alt="image-20240728185217117" style="zoom:67%;" /><ul><li><p>git commit 提交</p><ul><li>git commit<ul><li>进入vim编辑器，输入提交信息</li></ul></li><li>git commit -m “信息”<ul><li>可以在信息中加入 <strong>#数字</strong> 用来指定解决的issue</li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728185634.png" alt="image-20240728185633825" style="zoom:67%;" /></li><li><p>git log 查看版本(按q退出)</p></li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728185727.png" alt="image-20240728185727179" style="zoom:67%;" /><p>我们可以使用 <code>.gitingore</code> 文件忽略我们不想上传的文件，详情参考我的另一篇博客。</p><div class='tag-link-1'><a class="tag-Link" target="_blank" href="/posts/843cc845.html">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url('https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/202301141212847.png'); border-radius: 50%; width: 60px; height: 60px;"></div>        <div class="tag-link-right">            <div class="tag-link-title">gitignore文件</div>            <div class="tag-link-sitename">/posts/843cc845.html</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><ul><li><p>git branch 创建分支</p><ul><li>git branch 分支名<ul><li>创建分支</li></ul></li><li>git branch -d 分支名<ul><li>删除分支（会提示需要合并）</li></ul></li><li>git branch -D 分支名<ul><li>强制删除</li></ul></li><li>git branch<ul><li>查看所有分支</li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728190928.png" alt="image-20240728190928401" style="zoom:80%;" /></li><li><p>git checkout 切换分支</p><ul><li>git checkout 分支名/commit的id</li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728191516.png" alt="image-20240728191516204" style="zoom:80%;" /><ul><li>git checkout -b 分支名<ul><li>创建并切换分支</li></ul></li></ul></li><li><p>git merge 合并分支</p><ul><li>git merge 分支名<ul><li>把分支名合并到当前分支</li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728192359.png" alt="image-20240728192359468" style="zoom: 67%;" /></li></ul><p>如果我们2个分支都修改了内容，合并时就会发生冲突</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728193119.png" alt="image-20240728193118707" style="zoom: 80%;" /><p>我们可以进入文件进行修改，手动合并就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728193332.png" alt="image-20240728193331755" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728193352.png" alt="image-20240728193352161" style="zoom:80%;" /></p><p>记得修改完后提交 <code>git commit -am &quot;deal confict&quot;</code></p><p>接下来去github创建一个项目</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728193854.png" alt="image-20240728193854344" /></p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728212452.png" alt="image-20240728212452214" /></p><p>这里的 <code>git branch -M master</code> 是把分支强制改为master，-m没有强制执行</p><ul><li><p>git remote 远程仓库连接</p><ul><li>git remote add origin 远程仓库地址<ul><li>origin:远程仓库别名，可以自己随便起</li><li>添加远程仓库地址</li></ul></li><li>git remote set-url origin 新远程仓库地址<ul><li>修改远程仓库地址</li></ul></li><li>git remote -v<ul><li>可以不加-v，-v可以看到远程仓库地址</li><li>查看远程仓库地址</li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728220453.png" alt="image-20240728220453619" style="zoom:80%;" /></li><li><p>git push 上传到远程仓库</p><ul><li>git push -u origin master<ul><li>-u:指定默认同步远程仓库地址和分支名，以后可以直接使用git push</li><li>会提示我们要输入用户名密码，如果我们直接输入密码，会出现下面的错误，这是因为github在2021年已经不支持直接通过账号密码的形式进行push代码了，需要我们生成个人访问token</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728213700.png" alt="image-20240728213659784" /></p></li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728214041.png" alt="image-20240728214040889" style="zoom:50%;" /><p>找到<strong>Developer Settings</strong></p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728214146.png" alt="image-20240728214146123" style="zoom: 80%;" /><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728214628.png" alt="image-20240728214628578" style="zoom:67%;" /><p>输入一个名字，把所有权限勾选上点击创建。</p><div class="tip warning"><p>生成的token只会出现一次，记得复制妥善保存</p></div><p>此时再次尝试push，密码使用刚才生成的token。</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728215556.png" alt="image-20240728215556010" style="zoom: 80%;" /><p>我们尝试在github对文件进行更新：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728220023.png" alt="image-20240728220023556" style="zoom:67%;" /><ul><li>git fetch 拉到本地版本库</li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728220747.png" alt="image-20240728220747317" style="zoom:67%;" /><ul><li>git diff 比较远程和本地版本库<ul><li>git diff 远程仓库名(eg:origin/master)</li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728220559.png" alt="image-20240728220559239" style="zoom:67%;" /><ul><li><p>git pull 把远程仓库内容放工作区</p><ul><li><p>git pull 远程仓库别名 本地分支</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728220720.png" alt="image-20240728220720400" style="zoom:67%;" /></li><li><p>git pull --rebase 远程仓库别名 本地分支</p><ul><li>它会把本地commit变成最新的，远程的变成老的那条</li></ul></li></ul></li></ul><p>当你再次push代码时，你仍然需要输入用户名和密码，我们需要修改远程仓库地址为ssh地址</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728222829.png" alt="image-20240728222829553" style="zoom: 67%;" /><p>这样就不需要输入密码了。</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240728222730.png" alt="image-20240728222729978" style="zoom:67%;" /><ul><li>git switch -c 分支名<ul><li>创建并切换到该分支</li></ul></li><li>git tag 标签<ul><li>git tag<ul><li>查看标签</li></ul></li><li>git tag -a 版本号 -m “信息”<ul><li>-a:annotation，注解</li><li>eg:git tag -a v1.0.0 -m “v1.0.0”</li><li>可以使用<strong>git push origin v1.0.0</strong> 把标签推送到远程仓库</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#git&quot;&gt;&lt;/a&gt; git&lt;/h1&gt;
&lt;h2 id=&quot;工作流&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#工作流&quot;&gt;&lt;/a&gt; 工作流&lt;/h2&gt;
&lt;p&gt;首</summary>
      
    
    
    
    <category term="运维" scheme="https://www.yuanyuan.blog/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="git" scheme="https://www.yuanyuan.blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Gradle依赖管理-基于KotlinDSL</title>
    <link href="https://www.yuanyuan.blog/posts/691cd060.html"/>
    <id>https://www.yuanyuan.blog/posts/691cd060.html</id>
    <published>2024-07-03T20:10:47.000Z</published>
    <updated>2025-02-22T12:17:28.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gradle依赖管理基于kotlin-dsl"><a class="markdownIt-Anchor" href="#gradle依赖管理基于kotlin-dsl"></a> Gradle依赖管理（基于Kotlin DSL）</h1><p>Gradle构建工具是一个快速、可靠和适应性强的开源构建自动化工具，具有优雅和可扩展的声明性构建语言，Gradle包含许多优势：</p><ul><li>Gradle是JVM平台最受欢迎的构建系统，也是Android和Kotlin多平台项目的默认选择，它拥有丰富的社区插件生态系统。</li><li>Gradle可以使用其内置函数、第三方插件或自定义构建逻辑自动执行各种软件构建场景。</li><li>Gradle提供了一种高级、声明式和富有表现力的构建语言，使阅读和编写构建逻辑变得很轻松。</li><li>Gradle快速、可扩展，可以构建任意规模和复杂度的项目。</li><li>Gradle产生可靠的结果，同时受益于增量构建、构建缓存和并行执行等优化。</li></ul><p>Gradle支持Android、Java、Kotlin Multiplatform、Groovy、Scala、Javascript和C/C++等热门语言的构建工作：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703201427.png" alt="image-20240703201427177" /></p><h2 id="hello-gradle"><a class="markdownIt-Anchor" href="#hello-gradle"></a> Hello Gradle</h2><p>首先，我们来学习Gradle的安装和初始化。</p><h3 id="安装gradle环境"><a class="markdownIt-Anchor" href="#安装gradle环境"></a> 安装Gradle环境</h3><p>在使用Gradle之前，我们先来看看如何安装，这里演示Ubuntu环境下如何进行安装，其他平台请参考官方文档：<a href="https://docs.gradle.org/current/userguide/installation.html#installation">https://docs.gradle.org/current/userguide/installation.html#installation</a></p><p>在开始安装之前，首先确保您已经安装好Java环境（使用<code>java --version</code>命令进行查看）版本不能低于Java 8，本教程使用的是Java 17版本：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703201649.png" alt="image-20240703201649511" style="zoom:80%;" /><p>确认无误后，我们进入到<a href="https://gradle.org">Gradle官网</a></p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703201914.png" alt="image-20240703201914126" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703202149.png" alt="image-20240703202149239" style="zoom:50%;" /><p>这里我们选择直接下载已经编译好的二进制文件：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703202249.png" alt="image-20240703202249641" style="zoom:50%;" /><div class="tip warning"><p>本教程教学采用的是8.8版本，如果各位小伙伴在学习时官方已经推出了新的版本，请务必选择跟教程相同的版本，因为Gradle的版本兼容性很差，不同版本出现特性变化的情况很常见，容易出现不兼容的情况。</p></div><p>下载完成后解压，然后将解压得到的目录拖到你想要安装的位置，本教程就放到<code>/home/liaojie1314/env/gradle</code>目录下，然后添加环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">=================#添加如下内容#==============</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gradle</span></span><br><span class="line">export PATH=/home/liaojie1314/env/gradle/gradle-8.8/bin:$PATH # 其中/home/liaojie1314/env/gradle/为你的安装目录</span><br><span class="line">===========================================</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使环境变量生效</span></span><br><span class="line">source ~/.bashrc </span><br></pre></td></tr></table></figure><p>添加完成后，我们打开一个新的命令窗口，输入<code>gradle -v</code>命令查看是否配置生效：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703203227.png" alt="image-20240703203227169" style="zoom:67%;" /><h3 id="初始化gradle项目"><a class="markdownIt-Anchor" href="#初始化gradle项目"></a> 初始化Gradle项目</h3><p>安装完成Gradle之后，我们就可以开始正式进行学习了，首先我们还是来尝试创建一个Gradle项目。</p><p>我们在当前目录打开CMD窗口，并执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle init</span><br></pre></td></tr></table></figure><p>出现以下内容，让我们选择当前项目的类型，这里我们选择<code>Application</code>应用类型，默认就是<code>1: Application</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Select <span class="built_in">type</span> of build to generate:</span><br><span class="line">  1: Application</span><br><span class="line">  2: Library</span><br><span class="line">  3: Gradle plugin</span><br><span class="line">  4: Basic (build structure only)</span><br><span class="line">Enter selection (default: Application) [1..4]</span><br></pre></td></tr></table></figure><p>接着是选择我们程序使用的语言类型，本教程统一使用Java语言讲解，选择<code>Java</code>，默认就是<code>1: Java</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Select implementation language:</span><br><span class="line">  1: Java</span><br><span class="line">  2: Kotlin</span><br><span class="line">  3: Groovy</span><br><span class="line">  4: Scala</span><br><span class="line">  5: C++</span><br><span class="line">  6: Swift</span><br><span class="line">Enter selection (default: Java) [1..6]</span><br></pre></td></tr></table></figure><p>采用的Java版本，因为这里我们安装的是Java17，所以直接输入17即可，还有是否选择使用新特性直接<code>no</code>就好了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter target Java version (min: 7, default: 21): 17</span><br></pre></td></tr></table></figure><p>当前项目的名称，默认就是当前目录名字，这个自己根据情况选择吧，我这里输入<code>gradle-kotlin</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Project name (default: gradle-kotlin):</span><br></pre></td></tr></table></figure><p>选择项目的结构，默认单应用就行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Select application structure:</span><br><span class="line">  1: Single application project</span><br><span class="line">  2: Application and library project</span><br><span class="line">Enter selection (default: Single application project) [1..2] </span><br></pre></td></tr></table></figure><p>接着是编写Gradle脚本采用的语言，目前Gradle支持Kotlin和Groovy两种，且目前官方推荐的是Kotlin语言，所以这里默认就行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Select build script DSL:</span><br><span class="line">  1: Kotlin</span><br><span class="line">  2: Groovy</span><br><span class="line">Enter selection (default: Kotlin) [1..2]</span><br></pre></td></tr></table></figure><p>Gradle还需要配置一个测试使用的框架，这里我们选择默认的就行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Select <span class="built_in">test</span> framework:</span><br><span class="line">  1: JUnit 4</span><br><span class="line">  2: TestNG</span><br><span class="line">  3: Spock</span><br><span class="line">  4: JUnit Jupiter</span><br><span class="line">Enter selection (default: JUnit Jupiter) [1..4] </span><br></pre></td></tr></table></figure><p>接着是当前项目的名称以及包名，默认就是当前目录名字，这个自己根据情况选择吧：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Project name (default: Test):</span><br></pre></td></tr></table></figure><p>最后是采用的Java版本，因为这里我们安装的是Java17，所以直接输入17即可，还有是否选择使用新特性直接<code>no</code>就好了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter target version of Java (min. 7) (default: 17): 17</span><br><span class="line"></span><br><span class="line">Generate build using new APIs and behavior (some features may change <span class="keyword">in</span> the next minor release)? (default: no) [<span class="built_in">yes</span>, no]</span><br></pre></td></tr></table></figure><p>接着我们可以看到项目成功完成了初始化操作：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703204830.png" alt="image-20240703204830551" style="zoom:50%;" /><p>可以发现gradle给我们生成了许多文件：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703205223.png" alt="image-20240703205223394" style="zoom:50%;" /><div class="tip warning"><p>不同版本的Gradle对我们使用的IDEA版本同样存在兼容性问题，这里推荐使用<code>IntelliJ IDEA 2024.x</code>或更高版本，旧版本的IDEA可能会不支持当前的Gradle 8.8版本。</p></div><p>我们可以直接在IDEA中打开这个项目，打开后正常情况下会自动开始初始化，初始化过程中会下载很多东西，包括Gradle当前版本本身，以及它所需要的所有依赖包以及Kotlin相关库。</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703205555.png" alt="image-20240703205554868" /></p><p>不对啊，我们本地不是已经安装了Gradle吗，怎么初始化项目的时候又要下载一次呢？这是因为Gradle Wrapper的作用，由于Gradle的跨版本兼容性很差，因此它指定了当前项目中使用的Gradle版本，使得不同的开发人员或CI/CD系统都能使用相同的Gradle版本来构建项目，从而提高项目的一致性和可移植性。Gradle Wrapper的另一个好处是，它可以自动下载和使用正确版本的Gradle，无需手动安装或配置Gradle，使得项目的维护和协作更加方便，后续别人拿到我们这个项目的时候，不需要自己在系统中部署Gradle环境。</p><p>这个过程中可能会很卡，因为服务器在国外（建议挂梯）直到出现<code>BUILD SUCCESSFUL</code>之后，表示初始化完成：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703205629.png" alt="image-20240703205629033" style="zoom: 67%;" /><p>我们来依次介绍一下这些内容分别代表什么以及有什么作用：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703205746.png" alt="image-20240703205746383" style="zoom:67%;" /><ul><li><code>.gradle</code>：Gradle自动生成的项目缓存目录。</li><li><code>app</code>：存放整个项目的源代码、测试等，这里面就是我们写代码的地方了。<ul><li><code>build.gradle.kts</code>：项目的gradle构建脚本。</li><li><code>src</code>：存放源代码和测试代码。<ul><li><code>main</code>：编写所有项目核心代码。</li><li><code>test</code>：编写项目测试代码。</li></ul></li></ul></li><li><code>gradle</code>：包含JAR文件和Gradle Wrapper的配置。</li><li><code>gradlew</code>：适用于macOS和Linux的使用Gradle Wrapper执行构建的脚本（这里的版本就是GradleWrapper指定的版本）</li><li><code>gradlew.bat</code>：适用于Windows的使用Gradle Wrapper执行构建的脚本。</li><li><code>settings.gradle.kts</code>：定义子项目列表的项目配置文件，也是最关键的设置文件。</li></ul><p>除了以上文件以外的其他文件，一般都是一些额外的Git文件，例如<code>.gitignore</code>，不属于Gradle的范畴，无视掉就可以了。</p><p>Gradle项目在生成时默认为我们创建了一个测试的主类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This source file was generated by the Gradle &#x27;init&#x27; task</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGreeting</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">App</span>().getGreeting());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在IDEA中尝试直接运行：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703205947.png" alt="image-20240703205947307" style="zoom: 50%;" /><p>这样，咱们的第一个Gradle项目就成功创建并运行了。</p><p>当然你也可以使用idea创建gradle项目。</p><h3 id="idea创建gradle项目"><a class="markdownIt-Anchor" href="#idea创建gradle项目"></a> IDEA创建Gradle项目</h3><p>项目配置：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703211301.png" alt="image-20240703211301106" style="zoom:50%;" /><p>下面内容讲解基于IDEA创建的项目，与使用gradle init创建的项目文件略有不同。</p><h3 id="gradle常用命令"><a class="markdownIt-Anchor" href="#gradle常用命令"></a> Gradle常用命令</h3><p>我们在一开始就说了，Gradle最主要的目的就是为了构建大型项目，其中构建项目的常用命令非常关键，我们就来学习一下。</p><p>首先我们可以查看一下所有Gradle支持的任务，这里我们使用GradleWapper提供的<code>gradlew</code>进行操作，使用方式其实和<code>gradle</code>命令是一样的，只是这里用的是生成的（注意Windows平台下需要使用gradlew.bat来运行）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew task</span><br></pre></td></tr></table></figure><p>其中包含了大量的命令操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :tasks</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Tasks runnable from root project &#x27;gradle-kotlin&#x27;</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Application tasks</span><br><span class="line">-----------------</span><br><span class="line">run - Runs this project as a JVM application</span><br><span class="line"></span><br><span class="line">Build tasks</span><br><span class="line">-----------</span><br><span class="line">assemble - Assembles the outputs of this project.</span><br><span class="line">build - Assembles and tests this project.</span><br><span class="line">buildDependents - Assembles and tests this project and all projects that depend on it.</span><br><span class="line">buildNeeded - Assembles and tests this project and all projects it depends on.</span><br><span class="line">classes - Assembles main classes.</span><br><span class="line">clean - Deletes the build directory.</span><br><span class="line">jar - Assembles a jar archive containing the classes of the &#x27;main&#x27; feature.</span><br><span class="line">testClasses - Assembles test classes.</span><br><span class="line"></span><br><span class="line">Build Setup tasks</span><br><span class="line">-----------------</span><br><span class="line">init - Initializes a new Gradle build.</span><br><span class="line">updateDaemonJvm - Generates or updates the Gradle Daemon JVM criteria.</span><br><span class="line">wrapper - Generates Gradle wrapper files.</span><br><span class="line"></span><br><span class="line">Distribution tasks</span><br><span class="line">------------------</span><br><span class="line">assembleDist - Assembles the main distributions</span><br><span class="line">distTar - Bundles the project as a distribution.</span><br><span class="line">distZip - Bundles the project as a distribution.</span><br><span class="line">installDist - Installs the project as a distribution as-is.</span><br><span class="line"></span><br><span class="line">Documentation tasks</span><br><span class="line">-------------------</span><br><span class="line">javadoc - Generates Javadoc API documentation for the &#x27;main&#x27; feature.</span><br><span class="line"></span><br><span class="line">Help tasks</span><br><span class="line">----------</span><br><span class="line">buildEnvironment - Displays all buildscript dependencies declared in root project &#x27;gradle-kotlin&#x27;.</span><br><span class="line">dependencies - Displays all dependencies declared in root project &#x27;gradle-kotlin&#x27;.</span><br><span class="line">dependencyInsight - Displays the insight into a specific dependency in root project &#x27;gradle-kotlin&#x27;.</span><br><span class="line">help - Displays a help message.</span><br><span class="line">javaToolchains - Displays the detected java toolchains.</span><br><span class="line">kotlinDslAccessorsReport - Prints the Kotlin code for accessing the currently available project extensions and conventions.</span><br><span class="line">outgoingVariants - Displays the outgoing variants of root project &#x27;gradle-kotlin&#x27;.</span><br><span class="line">projects - Displays the sub-projects of root project &#x27;gradle-kotlin&#x27;.</span><br><span class="line">properties - Displays the properties of root project &#x27;gradle-kotlin&#x27;.</span><br><span class="line">resolvableConfigurations - Displays the configurations that can be resolved in root project &#x27;gradle-kotlin&#x27;.</span><br><span class="line">tasks - Displays the tasks runnable from root project &#x27;gradle-kotlin&#x27; (some of the displayed tasks may belong to subprojects).</span><br><span class="line"></span><br><span class="line">Verification tasks</span><br><span class="line">------------------</span><br><span class="line">check - Runs all checks.</span><br><span class="line">test - Runs the test suite.</span><br><span class="line"></span><br><span class="line">To see all tasks and more detail, run gradlew tasks --all</span><br><span class="line"></span><br><span class="line">To see more detail about a task, run gradlew help --task &lt;task&gt;</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 548ms</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure><p>比如第一个<code>run</code>命令就可以将当前项目以JVM应用程序的形式运行：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703211605.png" alt="image-20240703211604670" style="zoom:80%;" /><p>这个命令会自动编译并运行我们的项目，我们也可以手动执行其中的每一步，现在就来尝试一下吧，首先先执行一次清理命令，将整个项目目录进行一次清理，主要清理掉的就是构建出来的文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew clean</span><br></pre></td></tr></table></figure><p>我们在编写好一个Java项目之后，第一步就是编译成class文件，然后才能开始运行，所以，我们可以使用以下命令来编译代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./gradlew classes</span><br><span class="line">./gradlew classes -q  <span class="comment">#安静模式，只执行，不打印日志</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703211859.png" alt="image-20240703211859574" style="zoom: 80%;" /><p>执行完成之后，如果出现<code>BUILD SUCCESSFUL</code>表示编译成功，此时在app目录下会生成一个新的build目录，此目录中存放的就是编译之后的相关文件了，其中classes目录存放的就是所有编译之后的class文件：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703211928.png" alt="image-20240703211927940" style="zoom:50%;" /><p>有些时候我们的项目可能需要在编译之后运行一些测试用例，来快速查看是否存在一些问题，这在开发过程中非常常见，我们可以看到Gradle默认情况下为我们生成了一个简易的测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This source file was generated by the Gradle &#x27;init&#x27; task</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span> <span class="keyword">void</span> <span class="title function_">appHasAGreeting</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">App</span> <span class="variable">classUnderTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">App</span>();</span><br><span class="line">        assertNotNull(classUnderTest.getGreeting(), <span class="string">&quot;app should have a greeting&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以将App类中的getGreeting方法的返回值设置为null试试看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGreeting</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用以下命令来执行测试：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703212312.png" alt="image-20240703212312046" /></p><p>可以看到测试失败了，并且Gradle还自动为我们生成了一个错误报告，其中明确指出了我们出现错误的测试用例：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703212348.png" alt="image-20240703212347869" style="zoom:50%;" /><p>我们也可以快速执行一个完整的编译+测试流程来构建整个项目，并得到打包好的jar等文件，使用以下命令来完成：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure><p>如果某些时候我们不想执行测试，只想构建整个项目，也可以添加参数跳过：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build -x <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>只不过这样去敲命令实在是太累了，在IDEA中已经自动帮助我们继承了Gradle插件，我们可以直接展开右侧工具栏，双击就能使用Gradle命令了，非常方便：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703212555.png" alt="image-20240703212554940" style="zoom:50%;" /><h2 id="项目配置"><a class="markdownIt-Anchor" href="#项目配置"></a> 项目配置</h2><p>前面我们介绍了Gradle项目的搭建与使用，我们先来看一下整个Gradle项目构建的流程：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703212645.png" alt="image-20240114000012919" /></p><p>大概清楚构建流程后，我们接着就来了解一下Gradle项目是如何进行配置的。</p><h3 id="配置文件介绍"><a class="markdownIt-Anchor" href="#配置文件介绍"></a> 配置文件介绍</h3><p>设置文件<code>settings.gradle</code>是整个Gradle项目的入口点：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240703212809.png" alt="image-20240703212809101" /></p><p><em>设置文件</em>用于定义所有的子项目，并让它们参与到构建中，Gradle支持单项目和多项目的构建：</p><ul><li>对于单个项目构建，设置文件是可选的。</li><li>对于多项目构建，设置文件必须存在，并在其中定义所有子项目。</li></ul><p>设置文件可以使用Groovy语言（名称为<code>settings.gradle</code>）或是Kotlin语言（名称为<code>settings.gradle.kts</code>）编写，本教程一律采用Kotlin语言进行讲解，设置文件通常位于项目的根目录中：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704110831.png" alt="image-20240704110830942" style="zoom:50%;" /><p>一个标准的Gradle设置文件按照以下样式进行编写，这里使用Kotlin语言介绍：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rootProject.name = <span class="string">&quot;root-project&quot;</span>   <span class="comment">//rootProject对象代表当前这个项目，其name属性就是当前项目的名称</span></span><br><span class="line"></span><br><span class="line">include(<span class="string">&quot;sub-project-a&quot;</span>)     <span class="comment">//所有的子项目使用include()函数进行添加，如果没有子项目可以不写</span></span><br><span class="line">include(<span class="string">&quot;sub-project-b&quot;</span>)</span><br><span class="line">include(<span class="string">&quot;sub-project-c&quot;</span>)</span><br></pre></td></tr></table></figure><p>接着我们来看针对于单个项目的构建文件，其中<code>gradle.build</code>文件就是对应的构建配置，这里我们使用的是Kotlin语言，因此项目中会存在一个<code>gradle.build.kts</code>文件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">&quot;java&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">&quot;blog.yuanyuan&quot;</span></span><br><span class="line">version = <span class="string">&quot;1.0-SNAPSHOT&quot;</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation(platform(<span class="string">&quot;org.junit:junit-bom:5.10.0&quot;</span>))</span><br><span class="line">    testImplementation(<span class="string">&quot;org.junit.jupiter:junit-jupiter&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在这个配置文件中存在大量的Lambda语句，这也使得整个配置文件写起来更加简介美观，所以说虽然Gradle依赖于JVM平台，但是仅支持Kotlin和Groovy，它们相比Java在语法上存在更大的优势，更适合编写这种类似脚本一样的配置文件。</p><p>我们首先来看最顶上的plugins函数，后面的Lambda中编写了当前项目需要使用到的插件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">&quot;java&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>id()</code>函数指定需要使用的插件，这里使用的是<code>java</code>插件，<code>java</code>插件将Java编译以及测试和捆绑功能添加到项目中，为建任何类型的 Java 项目提供支持。</p><p>当然，除了java插件之外，我们如果需要构建其他类型的项目，也可以使用多种多样的插件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">&quot;cpp-application&quot;</span>)   <span class="comment">//用于构建C++应用程序  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">&quot;swift-application&quot;</span>)   <span class="comment">//用于在MacOS构建Swift应用程序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">&quot;org.jetbrains.kotlin.jvm&quot;</span>) version <span class="string">&quot;1.9.0&quot;</span>  <span class="comment">//使用version中缀函数为id指定的插件添加版本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有关插件相关的内容，我们会在后面的部分深入为大家介绍，不同的插件会为Gradle添加不同的任务。</p><p>这里的group和version分别设置了当前项目所属的组名称和版本：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">group = <span class="string">&quot;blog.yuanyuan&quot;</span></span><br><span class="line">version = <span class="string">&quot;1.0-SNAPSHOT&quot;</span></span><br></pre></td></tr></table></figure><p>接着是所有依赖的仓库配置，默认使用的是Maven中心仓库：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是所有的依赖列表，这里默认为我们导入了JUnit相关依赖用于测试：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation(platform(<span class="string">&quot;org.junit:junit-bom:5.10.0&quot;</span>))</span><br><span class="line">    testImplementation(<span class="string">&quot;org.junit.jupiter:junit-jupiter&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是任务相关配置，这里对<code>test</code>任务进行了相关配置：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasks.test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写设置文件"><a class="markdownIt-Anchor" href="#编写设置文件"></a> 编写设置文件</h3><p>我们前面介绍了Gradle构建的大致流程和配置文件各个部分，而设置文件<code>settings.gradle.kts</code>则是整个构建的入口点，在Gradle构建生命周期的早期，初始化阶段会在项目根目录中找到设置文件。</p><p>当找到设置文件<code>settings.gradle(.kts)</code>时，Gradle会实例化一个<a href="https://docs.gradle.org/current/dsl/org.gradle.api.initialization.Settings.html"><code>Settings</code></a>对象，我们可以通过此对象来声明要包含在构建中的所有项目，包括我们项目名称的声明也是通过它来完成：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">settings.rootProject.name = <span class="string">&quot;gradle-kotlin&quot;</span></span><br></pre></td></tr></table></figure><p>我们也可以省略掉settings直接使用其提供的属性：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rootProject.name = <span class="string">&quot;gradle-kotlin&quot;</span></span><br></pre></td></tr></table></figure><p>其中，Settings对象包含以下常用属性：</p><table><thead><tr><th style="text-align:left">姓名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>buildCache</code></td><td style="text-align:left">项目构建所用缓存配置。</td></tr><tr><td style="text-align:left"><code>plugins</code></td><td style="text-align:left">用于设置的插件。</td></tr><tr><td style="text-align:left"><code>rootDir</code></td><td style="text-align:left">项目构建的根目录，根目录是整个项目目录最外层。</td></tr><tr><td style="text-align:left"><code>rootProject</code></td><td style="text-align:left">构建的根项目。</td></tr><tr><td style="text-align:left"><code>settings</code></td><td style="text-align:left">返回设置对象。</td></tr></tbody></table><p>Settings对象也包含以下方法可供调用：</p><table><thead><tr><th style="text-align:left">姓名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>include()</code></td><td style="text-align:left">将指定名称的项目添加到构建列表中。</td></tr><tr><td style="text-align:left"><code>includeBuild()</code></td><td style="text-align:left">添加指定路径上的其他Gradle项目到构建列表中。</td></tr></tbody></table><p>我们在编写配置文件时，本质上是对Gradle API的一系列方法调用，结合Groovy或Kotlin的<code>&#123;...&#125;</code>语法（在Groovy中称作闭包，Kotlin中称为Lambda）能够轻松编写非常简洁的配置，比如配置插件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rootProject.name = <span class="string">&quot;gradle-kotlin&quot;</span></span><br><span class="line"></span><br><span class="line">plugins &#123;  <span class="comment">//使用plugins函数配置插件，结合Lambda表达式可以使用简洁语法完成配置</span></span><br><span class="line">    id(<span class="string">&quot;test&quot;</span>)   <span class="comment">//瞎写的一个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中定义的语句，Gradle会一行一行地向下执行，就像一个脚本那样。实际上，我们编写的配置文件在执行Gradle构建时会编译为对应的class文件加载执行，这些文件存放在Gradle的缓存目录中。</p><p>因此，我们直接在Gradle配置中编写的自定义语句也可以执行：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704111701.png" alt="image-20240704111701033" style="zoom:50%;" /><p>这里我们执行了自定义的打印语句，包括可以通过<code>rootProject</code>对象拿到当前的项目文件File对象等。</p><p>在Gradle中，和Maven一样也分为插件和依赖，我们可以在<code>settings.gradle.kt</code>中可以为所有的项目进行统一配置，比如要修改获取插件的仓库位置：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pluginManagement &#123;   <span class="comment">//使用pluginManagement函数配置插件仓库列表</span></span><br><span class="line">    repositories &#123;   <span class="comment">//在repositories函数中配置需要用的仓库</span></span><br><span class="line">        gradlePluginPortal()   <span class="comment">//Gradle插件仓库</span></span><br><span class="line">        google()    <span class="comment">//Google插件仓库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以修改为国内的阿里云镜像：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">      <span class="comment">//手动指定maven仓库地址，修改URL地址</span></span><br><span class="line">        maven &#123;</span><br><span class="line">            setUrl(<span class="string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，对于所有的依赖，也可以直接配置为国内的阿里云镜像仓库：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencyResolutionManagement &#123;   <span class="comment">//依赖解析管理中可以配置全局依赖仓库</span></span><br><span class="line">    repositories &#123;  <span class="comment">//只不过这种方式目前还在孵化阶段，可能会在未来某个版本移除</span></span><br><span class="line">        maven &#123;</span><br><span class="line">            setUrl(<span class="string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，除了在<code>settings.gradle.kts</code>中配置三方仓库之外，我们更推荐在之后学习的<code>build.gradle.kts</code>中对仓库进行配置。</p><p>与Maven一样，Gradle插件可以帮助我们在构建过程中实现各种各样的高级功能，它是用于增加和扩展任务（tasks）或构建逻辑的一种特殊类型的模块，在<code>settings.gradle.kts</code>中可以配置插件，只不通常被用于需要对多个项目进行操作的插件，或者需要在构建开始之前进行一些配置的情况：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;   <span class="comment">//使用id明确插件名称，使用version中缀函数明确插件版本</span></span><br><span class="line">    id(<span class="string">&quot;org.gradle.toolchains.fake&quot;</span>) version <span class="string">&quot;0.6.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般很少见有项目在这里配置插件。</p><p>对于多个子项目的大型项目而言，我们还需要在这里添加所有的子项目：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">include(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">include(<span class="string">&quot;business-logic&quot;</span>)</span><br><span class="line">include(<span class="string">&quot;data-model&quot;</span>)</span><br></pre></td></tr></table></figure><p>有关多项目的详细介绍，我们会放在下一个章节，本章节主要以单项目为主。</p><p>除了以上提到的内容，<code>Settings</code>对象上还有更多属性和方法，您可以使用它们来配置构建。不过，虽然许多Gradle脚本通常以简短的Groovy或Kotlin语法编写，但设置脚本中的每个操作都是在<code>Settings</code>对象上调用方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">settings.include(<span class="string">&quot;app&quot;</span>)   <span class="comment">//实际上是这样的，只是说settings可以省掉</span></span><br></pre></td></tr></table></figure><h3 id="编写构建脚本"><a class="markdownIt-Anchor" href="#编写构建脚本"></a> 编写构建脚本</h3><p>前面我们介绍了设置文件的编写，它是我们整个项目的构建起点，包含了所有基本内容的配置。</p><p>我们接着来看针对于我们每一个项目的构建脚本<code>build.gradle.kts</code>文件：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704112155.png" alt="image-20240704112154667" /></p><p>对于设置文件中包含的每个项目，Gradle都会为其创建一个<code>Project</code>实例对象，我们可以直接在<code>build.gradle.kts</code>中使用，跟之前一样，可以省略：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">group = <span class="string">&quot;blog.yuanyuan&quot;</span></span><br><span class="line">version = <span class="string">&quot;1.0-SNAPSHOT&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">project.group = <span class="string">&quot;blog.yuanyuan&quot;</span>   <span class="comment">//本质上就是project的属性</span></span><br><span class="line">project.version = <span class="string">&quot;1.0-SNAPSHOT&quot;</span></span><br></pre></td></tr></table></figure><p>在此对象中，包含以下常见属性：</p><table><thead><tr><th style="text-align:left">姓名</th><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>name</code></td><td style="text-align:left"><code>String</code></td><td style="text-align:left">项目目录的名称。</td></tr><tr><td style="text-align:left"><code>path</code></td><td style="text-align:left"><code>String</code></td><td style="text-align:left">该项目的完全限定名称。</td></tr><tr><td style="text-align:left"><code>description</code></td><td style="text-align:left"><code>String</code></td><td style="text-align:left">该项目的描述。</td></tr><tr><td style="text-align:left"><code>dependencies</code></td><td style="text-align:left"><code>DependencyHandler</code></td><td style="text-align:left">配置项目的依赖列表。</td></tr><tr><td style="text-align:left"><code>repositories</code></td><td style="text-align:left"><code>RepositoryHandler</code></td><td style="text-align:left">配置项目的依赖仓库。</td></tr><tr><td style="text-align:left"><code>layout</code></td><td style="text-align:left"><code>ProjectLayout</code></td><td style="text-align:left">通过此对象来访问项目中的关键位置。</td></tr><tr><td style="text-align:left"><code>group</code></td><td style="text-align:left"><code>Object</code></td><td style="text-align:left">项目的组。</td></tr><tr><td style="text-align:left"><code>version</code></td><td style="text-align:left"><code>Object</code></td><td style="text-align:left">项目的版本。</td></tr></tbody></table><p>我们依次来看每个部分是如何进行编写的。</p><p>首先是整个项目所采用的插件，我们可以像下面这样编写：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">&quot;org.jetbrains.kotlin.jvm&quot;</span>) version <span class="string">&quot;1.9.0&quot;</span></span><br><span class="line">    id(<span class="string">&quot;application&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，插件<code>application</code>是由官方内置的插件，可以直接使用<code>id()</code>函数来选择，而上面的<code>org.jetbrains.kotlin.jvm</code>插件没有被官方内置，需要我们手动使用<code>version</code>中缀函数指定其版本，这样Gradle才能在仓库中正确找到它。</p><p>一般情况下，我们普通的Java项目可以直接使用<code>java</code>插件，它能够直接完成编译和打包Java代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">&quot;java&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以对这个插件进行一些配置，比如我们要生成目标的Java版本等：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configure&lt;JavaPluginExtension&gt; &#123;</span><br><span class="line">    targetCompatibility = JavaVersion.VERSION_17    <span class="comment">//编译目标版本</span></span><br><span class="line">    sourceCompatibility = JavaVersion.VERSION_17    <span class="comment">//源代码版本（会导致只能使用对应版本具有的特性，如果使用更高版本的特性或语法将无法通过编译）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704112831.png" alt="image-20240704112830627" style="zoom:50%;" /><p>如果我们需要将项目打包为一个可执行的文件，也可以使用<code>application</code>插件，它包含<code>java</code>插件的全部功能，同样支持编译和打包Java代码，并且支持生成可执行的应用程序：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">&quot;application&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">java &#123;   <span class="comment">//configure&lt;JavaApplication&gt; 也可以直接写成 java 这个扩展函数，效果一样</span></span><br><span class="line">    targetCompatibility = JavaVersion.VERSION_17</span><br><span class="line">    sourceCompatibility = JavaVersion.VERSION_17</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">application &#123;   <span class="comment">//同configure&lt;JavaApplication&gt;</span></span><br><span class="line">    mainClass = <span class="string">&quot;com.test.Main&quot;</span>  <span class="comment">//配置主类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后，我们直接执行<code>build</code>构建项目，生成以下文件：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704113520.png" alt="image-20240704113520441" style="zoom:50%;" /><p>可以看到这里生成的压缩包的形式，我们可以直接解压，得到一系列文件。可以看到，在bin目录中已经生成了用于运行我们Java项目的脚本（Mac/Linux是项目名称的脚本，Windows是bat脚本）然后在lib目录中是已经帮我们打包好的项目jar文件，如果我们项目中还存在其他的依赖，也会包含在这个lib中。我们可以直接运行：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704113839.png" alt="image-20240704113838698" style="zoom:67%;" /><p>这跟我们前面学习的Maven其实非常相似，同样可以通过插件实现打包，只不过这里是采用编程的形式配置，而Maven统一采用XML形式进行配置。</p><p>接着我们来看如何配置项目中的依赖项，首先是对于依赖仓库的选择，默认情况下生成的代码选择的是Maven中心仓库：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()  <span class="comment">//Maven中心仓库</span></span><br><span class="line">    google()   <span class="comment">//谷歌仓库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以自己定义，比如只使用本地仓库中的包：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    mavenLocal()   <span class="comment">//只使用Maven本地仓库中的软件包</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过<code>maven</code>函数来直接指定第三方仓库：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">      <span class="comment">//修改其url属性来指定一个第三方仓库地址</span></span><br><span class="line">        setUrl(<span class="string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好仓库地址后，我们就可以开始添加需要的依赖了，在<code>dependencies</code>中进行编写，默认情况下添加了一些测试相关的依赖：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation(platform(<span class="string">&quot;org.junit:junit-bom:5.10.0&quot;</span>))</span><br><span class="line">    testImplementation(<span class="string">&quot;org.junit.jupiter:junit-jupiter&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们可以使用两种不同的函数导入依赖：</p><ul><li><code>implementation</code>导入依赖，用于编译和运行<em>生产</em>代码。</li><li><code>testImplementation</code>导入依赖，用于编译和运行<em>测试</em>代码。</li></ul><p>其中填写的字符串就是我们依赖的组、名称以及其对应的版本号：</p><ul><li><code>org.junit:junit-bom:5.10.0</code>对应的组为<code>org.junit</code>，依赖名称为：<code>junit-bom</code>，版本号为：<code>5.10.0</code></li></ul><p>我们可以尝试一下添加自己需要的依赖，比如这里我们添加一个Spring框架的核心依赖，首先我们可以在这里找到需要的包：<a href="https://central.sonatype.com">https://central.sonatype.com</a>，找到后选择：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704114322.png" alt="image-20240704114321693" style="zoom:50%;" /><p>然后直接粘贴到依赖列表里面即可：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用implementation来添加依赖</span></span><br><span class="line">implementation(<span class="string">&quot;org.springframework:spring-context:6.1.10&quot;</span>)</span><br></pre></td></tr></table></figure><p>更新后，就可以直接使用了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">string</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Main.class);</span><br><span class="line">        System.out.println(context.getBean(String.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用起来跟Maven其实差别不是很大。</p><p>当然，除了像这样写在一起之外，我们也可以分开进行编写，把组、名称和版本填写为三个参数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;org.springframework&quot;</span>, <span class="string">&quot;spring-context&quot;</span>, <span class="string">&quot;6.1.10&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们有些时候希望一直使用最新版本的依赖，也可以直接将版本设置为<code>+</code>来始终使用最新版本：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;org.springframework:spring-context:+&quot;</span>)  </span><br><span class="line"><span class="comment">//生产环境下不推荐这样写，万一新版改了啥东西导致项目出大问题就得不偿失了</span></span><br></pre></td></tr></table></figure><h3 id="深入依赖配置"><a class="markdownIt-Anchor" href="#深入依赖配置"></a> 深入依赖配置</h3><p>上一部分我们介绍了如何导入依赖，我们接着来看导入依赖之后的更多操作。</p><p>除了通过直接编写Maven坐标的形式来引入仓库中的依赖之外，我们也可以直接将一个本地的Jar包引入到项目中，这里我们在项目根目录下新建一个<code>lib</code>目录，用于存放我们需要引用的Jar包。</p><p>接着我们在依赖中编写引入的语句：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  <span class="comment">//使用files方法来指定一个文件进行导入</span></span><br><span class="line">    implementation(files(<span class="string">&quot;lib/spring-context-6.1.10.jar&quot;</span>, </span><br><span class="line">        <span class="string">&quot;lib/spring-core-6.1.10.jar&quot;</span>, <span class="string">&quot;lib/spring-beans-6.1.10.jar&quot;</span>, <span class="string">&quot;lib/spring-jcl-6.1.10.jar&quot;</span>))</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们一个目录下的jar包太多，需要全部导入，像上面这样一个一个写太累了，我们可以直接使用fileTree方法来统一获取：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(fileTree(<span class="string">&quot;lib&quot;</span>))  <span class="comment">//直接引入lib下全部jar包</span></span><br></pre></td></tr></table></figure><p>效果和上面一个一个导入一样。</p><p>我们接着来看依赖的排除，在之前Maven的学习中我们知道，一个依赖的内部可能又会存在多个依赖，在使用一些依赖时，我们可能希望排除其中某些不需要的依赖或是与其他依赖冲突的依赖，我们可以对依赖进行排除操作：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;org.springframework:spring-context:6.1.10&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">//在Lambda中使用exclude来排除不需要的依赖</span></span><br><span class="line">    exclude(<span class="string">&quot;org.springframework&quot;</span>, <span class="string">&quot;spring-aop&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们在引入<code>spring-context</code>之后，不需要其中的AOP模块，因此我们可以直接使用exclude函数将其排除，此时AOP模块就不存在于外部库中了。</p><p>我们再来看下面这种情况：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;org.springframework:spring-context:6.1.10&quot;</span>)</span><br><span class="line">implementation(<span class="string">&quot;org.springframework:spring-aop:6.1.1&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时我们的项目中不仅依靠<code>spring-context</code>引入了<code>spring-aop</code>的6.1.10版本，也手动引入了<code>spring-aop</code>的6.1.1版本，此时Gradle会优先使用更新的版本作为依赖，所以这里实际引入使用的也是6.1.10版本。</p><p>如果我们执意要使用旧版本的依赖，可以通过上面的方式进行依赖的排除，或是给版本号添加感叹号表示强制使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;org.springframework:spring-context:6.1.10&quot;</span>) &#123;</span><br><span class="line">    exclude(<span class="string">&quot;org.springframework&quot;</span>, <span class="string">&quot;spring-aop&quot;</span>)  <span class="comment">//直接排除掉新版本的</span></span><br><span class="line">&#125;</span><br><span class="line">implementation(<span class="string">&quot;org.springframework:spring-aop:6.1.1&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;org.springframework:spring-context:6.1.10&quot;</span>) </span><br><span class="line">implementation(<span class="string">&quot;org.springframework:spring-aop:6.1.1!!&quot;</span>)   <span class="comment">//添加双感叹号</span></span><br></pre></td></tr></table></figure><p>最后我们来列举一下DependencyHandlerScope里面包含的方法：</p><ol><li><code>implementation</code>: 用于添加项目的依赖项，这是最常用的方法。</li><li><code>api</code>: 与 <code>implementation</code> 类似，但它会暴露依赖项给项目的所有模块（多项目配置中讲解）</li><li><code>compileOnly</code>: 用于指定编译时依赖，但不会在运行时包含在最终构建结果中。</li><li><code>testImplementation</code>: 用于添加测试时需要的依赖项。</li><li><code>androidTestImplementation</code>: 用于添加Android测试时需要的依赖项。</li><li><code>kapt</code>: 用于添加 Kotlin 注解处理器依赖项。</li><li><code>annotationProcessor</code>: 用于添加 Java 注解处理器依赖项。</li><li><code>runtimeOnly</code>：仅在运行时使用，不用于编译</li></ol><p>相信各位小伙伴对于<code>implementation</code>已经非常熟悉了，它其实是Java插件提供的方法，我们可以使用它来引入依赖，并且在打包之后也会附带我们引入的依赖：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704115554.png" alt="image-20240704115553882" style="zoom:67%;" /><p>我们来看看其他的导入方式，首先是<code>compileOnly</code>，它表示导入的依赖仅在编译时可用，编译完成后不会将依赖一起打包：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compileOnly(<span class="string">&quot;org.springframework:spring-context:6.1.10&quot;</span>)</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704115736.png" alt="image-20240704115735896" style="zoom:67%;" /><p>接着是<code>runtimeOnly</code>，它表示导入的依赖仅在运行时可用，比如MySQL驱动这类我们不需要在项目中直接使用，但是在项目运行时又需要用到的依赖就非常适合：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runtimeOnly(<span class="string">&quot;org.springframework:spring-context:6.1.10&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时，由于此依赖仅存在于运行时，项目中是无法使用的：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704115813.png" alt="image-20240704115813141" style="zoom:50%;" /><p>但是我们去掉这些不可用的代码，在编译之后，这些依赖却会被打包在一起。</p><h3 id="自定义任务"><a class="markdownIt-Anchor" href="#自定义任务"></a> 自定义任务</h3><p>Gradle可以在项目上完成的工作由一个或多个<em>任务</em>定义，任务代表构建执行的某些独立工作单元，比如编译一些类，创建jar包，生成Javadoc文档，或将一些内容发布到代码仓库，这些任务通常由插件提供，我们在项目中引入插件后就可以直接执行对应的任务了，在不引入任何插件的情况下，只会包含一些内置的默认任务：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704120036.png" alt="image-20240704120036344" style="zoom:50%;" /><p>在引入<code>java</code>插件后，就出现了各种Java相关的任务，比如编译、构建、打包jar包等：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704120236.png" alt="image-20240704120235650" style="zoom:50%;" /><p>可以看到，这些任务都是由插件为我们提供的，因此，大部分情况下我们引入插件之后就可以直接执行相关的任务了。我们在执行某一个大任务的时候，就会执行一系列的任务，比如<code>build</code>命令，它不仅完成构建，还将所有的任务依赖关系进行完整的建立，可以看到：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704120342.png" alt="image-20240704120342529" style="zoom:50%;" /><p>在整个build任务执行的过程中，依次按顺序执行了各种各样的任务：</p><ol><li>compileJava：编译所有Java源代码文件。</li><li>processResources：处理所有资源文件，由于这个项目没有资源文件，提示 NO-SOURCE</li><li>…</li></ol><p>通过这一系列小任务，就完成了编译、构建、打包等一系列操作，只需要执行：<code>./gradlew build</code> 即可。</p><p>当然，如果各位小伙伴觉得插件提供的任务不太够，需要自定义添加，我们也可以在<code>build.gradle.kts</code>中编写自定义任务：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704120530.png" alt="image-20240704120530493" /></p><p>注册任务需要使用<code>register</code>或<code>create</code>函数来完成，一个最简单的任务可以像下面这样编写：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tasks.register(<span class="string">&quot;hello&quot;</span>) &#123;   <span class="comment">//第一个参数为任务名称，第二个参数使用Lambda编写任务具体操作</span></span><br><span class="line">  <span class="comment">//任务包含一个完整的操作列表，我们需要传入对应的Action到队列中，这样就可以依次执行了</span></span><br><span class="line">    doFirst &#123;   <span class="comment">//使用doFirst向任务队列首部插入新的Action，也就是要执行的内容</span></span><br><span class="line">        println(<span class="string">&quot;我是自定义的任务开始&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    doLast &#123;   <span class="comment">//向队列尾部插入Action</span></span><br><span class="line">        println(<span class="string">&quot;我是自定义的任务结束&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，刷新之后任务列表就出现了我们自定义的任务，执行之后也是我们自定义的内容：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704120630.png" alt="image-20240704120630559" style="zoom: 67%;" /><p>我们也可以通过指令的形式直接运行：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704120735.png" alt="image-20240704120734984" style="zoom:50%;" /><p>在执行命令时，我们还可以添加额外的项目参数，在脚本中可以直接获取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tasks.register(&quot;hello&quot;) &#123;</span><br><span class="line">    println(&quot;获取到自定义参数: $&#123;project.properties[&quot;test&quot;]&#125;&quot;)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704121006.png" alt="image-20240704121005792" style="zoom:50%;" /><p>我们还可以配置此任务所属的组别，以及其它描述信息：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704121409.png" alt="image-20240704121409536" style="zoom: 50%;" /><p>我们还可以将一个任务作为<code>gradle</code>执行的默认任务，也就是说直接执行gradle命令就可以运行我们的任务了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaultTasks(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704121509.png" alt="image-20240704121508716" style="zoom:67%;" /><p>一个任务还可以依赖于其他任务，比如我们的自定义任务在执行之前需要先完成源代码的编译操作：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tasks.register(<span class="string">&quot;hello&quot;</span>) &#123;</span><br><span class="line">    dependsOn(tasks.compileJava)   <span class="comment">//使用dependsOn函数来指定前置任务，可以是其他插件提供的，也可以是我们自己定义的，这个参数也可以传字符串</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行时，会先完成前置任务之后再执行当前任务：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704121731.png" alt="image-20240704121731452" style="zoom:50%;" /><p>我们也可以让已经存在的任务来依赖我们的任务或是直接为其添加额外的操作：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tasks.named(<span class="string">&quot;build&quot;</span>) &#123;   <span class="comment">//根据名称进行查找</span></span><br><span class="line">    dependsOn(<span class="string">&quot;hello&quot;</span>)   <span class="comment">//直接配置依赖</span></span><br><span class="line">  doLast &#123; ... &#125;   <span class="comment">//添加新的Action到列表中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.build &#123;   <span class="comment">//直接从tasks中获取，这仅限于插件提供的任务</span></span><br><span class="line">    dependsOn(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就为任务<code>build</code>添加了前置任务到前置任务列表中：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704121943.png" alt="image-20240704121943386" style="zoom:50%;" /><p>在Gradle中，实际上所有的任务都是Task的子类，除了向上面这样直接编写Task类型，包括我们在前面使用的<code>register</code>方法，默认也是在Lambda中为我们提供一个Task类型的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">TaskProvider&lt;Task&gt; <span class="title function_">register</span><span class="params">(String name, Action&lt;? <span class="built_in">super</span> Task&gt; configurationAction)</span> <span class="keyword">throws</span> InvalidUserDataException;</span><br><span class="line"><span class="comment">//这里Action的默认提供类型就是Task</span></span><br></pre></td></tr></table></figure><p>我们也可以自行创建Task的子类，来编写自定义的任务类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承 DefaultTask 类来创建一个自定义的 HelloTask 类，注意这个类必须要可继承，要么open要么直接抽象类</span></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">HelloTask</span> : <span class="type">DefaultTask</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> name: String = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TaskAction</span>   <span class="comment">//添加@TaskAction注解来声明此函数为任务的Action</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;<span class="subst">$&#123;name&#125;</span>: hello,gradle Kotlin DSL&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">user</span><span class="params">(name: <span class="type">String</span>)</span></span> &#123;   <span class="comment">//类中也可以具有其他的函数</span></span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.register&lt;HelloTask&gt;(<span class="string">&quot;hello&quot;</span>) &#123;   <span class="comment">//使用register时指明我们自定义的任务类</span></span><br><span class="line">    user(<span class="string">&quot;yuanyuan&quot;</span>)   <span class="comment">//此时this就是HelloTask类型了，我们可以直接使用自定义的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式也可以实现任务的自定义：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704122301.png" alt="image-20240704122301269" style="zoom:50%;" /><p>除了通过插件或是我们自定义的形式编写任务之外，Gradle也为我们提供了一些内置的任务类型，这些任务通常是一些经常会用到的操作，我们可以来使用一下，比如复制任务：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tasks.register&lt;Copy&gt;(<span class="string">&quot;hello&quot;</span>) &#123;   <span class="comment">//这里使用Copy类型</span></span><br><span class="line">    from(<span class="string">&quot;build/classes&quot;</span>)   <span class="comment">//使用from和into设置复制的目录和目标位置</span></span><br><span class="line">    into(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">  dependsOn(tasks.build)   <span class="comment">//依赖一下build</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行我们自定义的hello任务，就可以完成构建 + 拷贝了。</p><p>除了这里演示才Copy操作，开发人员还可以利用许多任务类型，包括<code>GroovyDoc</code>、<code>Zip</code>、<code>Jar</code>、<code>JacocoReport</code>、<code>Sign</code>或<code>Delete</code>等。</p><h3 id="生命周期钩子"><a class="markdownIt-Anchor" href="#生命周期钩子"></a> 生命周期钩子</h3><p>有些时候我们希望在Gradle的整个生命周期中的不同时段执行一些操作，我们可以使用官方提供的生命周期钩子函数。</p><div class="tip warning"><p>大多已经弃用，官方推荐使用配置缓存API。</p></div><p>详情请参阅<a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:requirements:build_listeners">配置缓存</a></p><ol><li>构建初始阶段<ul><li><code>gradle.settingsEvaluated()</code> 完成项目的配置阶段之后调用（只能定义在 setting.gradle 或 init.gradle 脚本中）</li><li><code>gradle.projectsLoaded()</code> 所有项目加载之后调用（只能定义在 setting.gradle 或 init.gradle 脚本中）</li></ul></li><li>配置阶段<ul><li><code>gradle.beforeProject()</code> 每个项目完成配置之前调用（只能定义在 setting.gradle 或 init.gradle 脚本中）</li><li><code>gradle.afterProject()</code> 每个项目完成配置之后调用</li><li><code>gradle.projectEvaluated()</code> 所有项目全部完成配置之后调用</li><li><code>gradle.afterEvaluate()</code>  整个配置阶段完成后调用</li><li><code>gradle.taskGraph.whenReady</code> 全部任务图已经构建完成可以就绪后调用</li></ul></li><li>执行阶段<ul><li><code>gradle.taskGraph.beforeTask</code> 执行每一个任务之前调用</li><li><code>gradle.taskGraph.afterTask</code> 每一个任务执行完成之后调用</li><li><code>gradle.buildFinished</code> 整个构建全部结束后调用</li></ul></li></ol><p>这里我们可以尝试编写一个钩子函数试试看：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gradle.settingsEvaluated &#123;</span><br><span class="line">    println(<span class="string">&quot;开始构建&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gradle.buildFinished &#123;</span><br><span class="line">    println(<span class="string">&quot;构建结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就可以在不同的阶段执行自定义的内容了。比如，我们可以利用这种特性来统计某一个阶段或是任务耗费的时间：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time: <span class="built_in">Long</span> = <span class="number">0</span></span><br><span class="line">gradle.taskGraph.beforeTask &#123;</span><br><span class="line">    time = System.currentTimeMillis()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gradle.taskGraph.afterTask &#123;</span><br><span class="line">    <span class="keyword">val</span> takeTime = System.currentTimeMillis() - time</span><br><span class="line">    println(<span class="string">&quot;任务: <span class="variable">$name</span> 执行耗时: <span class="subst">$&#123;takeTime&#125;</span>ms&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果就会自动计算每个任务的执行时间了：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704123937.png" alt="image-20240704123937427" style="zoom:50%;" /><h3 id="项目发布"><a class="markdownIt-Anchor" href="#项目发布"></a> 项目发布</h3><p>我们也可以将自己的的Gradle项目发布到的Maven仓库中，这里我们以发布到本地仓库为例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">&quot;java&quot;</span>)</span><br><span class="line">    id(<span class="string">&quot;maven-publish&quot;</span>)   <span class="comment">//首先引入maven-publish插件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们来配置发布相关的内容：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        create&lt;MavenPublication&gt;(<span class="string">&quot;library&quot;</span>) &#123;   <span class="comment">//发布的相关信息Maven坐标信息</span></span><br><span class="line">            groupId = <span class="string">&quot;blog.yuanyuan&quot;</span></span><br><span class="line">            artifactId = <span class="string">&quot;hello&quot;</span></span><br><span class="line">            version = <span class="string">&quot;0.0.1&quot;</span></span><br><span class="line">            from(components[<span class="string">&quot;java&quot;</span>])   <span class="comment">//发布为jar包形式</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()    <span class="comment">//指定为本地Maven仓库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们执行<code>publish</code>任务即可发布项目到本地仓库了，此时在<code>.m2</code>目录中已经存在我们发布的项目了。</p><h3 id="创建springboot项目"><a class="markdownIt-Anchor" href="#创建springboot项目"></a> 创建SpringBoot项目</h3><p>通过IDEA或是前往SpringBoot官网就可以自动为我们创建一个基于Gradle的SpringBoot项目：<a href="https://start.spring.io/">https://start.spring.io/</a></p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704124259.png" alt="image-20240704124259516" style="zoom:50%;" /><p>这里使用IDEA创建，项目配置如下：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704124542.png" alt="image-20240704124541724" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704124650.png" alt="image-20240704124650510" style="zoom:50%;" /><p>这里自动生成了项目的<code>build.gradle.kts</code>文件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;   <span class="comment">//首先是插件配置</span></span><br><span class="line">    java  <span class="comment">//最基础的Java插件</span></span><br><span class="line">    id(<span class="string">&quot;org.springframework.boot&quot;</span>) version <span class="string">&quot;3.2.7&quot;</span>   <span class="comment">//SpringBoot插件</span></span><br><span class="line">    id(<span class="string">&quot;io.spring.dependency-management&quot;</span>) version <span class="string">&quot;1.1.5&quot;</span>   <span class="comment">//Spring依赖管理插件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">&quot;blog.yuanyuan&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.0.1-SNAPSHOT&quot;</span></span><br><span class="line"></span><br><span class="line">java &#123;</span><br><span class="line">    toolchain &#123;</span><br><span class="line">        languageVersion = JavaLanguageVersion.of(<span class="number">17</span>) <span class="comment">//配置Java源代码编译版本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//configurations &#123;</span></span><br><span class="line"><span class="comment">//    compileOnly &#123;   //注解处理相关配置，用于Lombok</span></span><br><span class="line"><span class="comment">//        extendsFrom(configurations.annotationProcessor.get())</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(<span class="string">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>)</span><br><span class="line">    <span class="comment">// compileOnly(&quot;org.projectlombok:lombok&quot;)</span></span><br><span class="line">    testImplementation(<span class="string">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span>)</span><br><span class="line">    testRuntimeOnly(<span class="string">&quot;org.junit.platform:junit-platform-launcher&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType&lt;Test&gt; &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jvm语言混合编程"><a class="markdownIt-Anchor" href="#jvm语言混合编程"></a> JVM语言混合编程</h3><p>打开之前学习gradle的项目，对于某些需要使用多种JVM语言进行编程的项目，我们可以同时配置多种插件，这里我们以Java与Kotlin混合编程为例进行讲解：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;   <span class="comment">//同时配置Java和Kotlin/JVM插件</span></span><br><span class="line">    id(<span class="string">&quot;java&quot;</span>)</span><br><span class="line">    kotlin(<span class="string">&quot;jvm&quot;</span>) version <span class="string">&quot;1.9.21&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写好插件后，我们直接刷新项目，接着就可以在src下的main和test目录中同时创建两个源代码目录：</p><ul><li>java：存放Java源代码文件</li><li>kotlin：存放Kotlin源代码文件</li></ul><p>在main文件夹右键新增文件夹：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704151217.png" alt="image-20240704151216814" /></p><p>此时就可以在kotlin目录下编写Kotlin相关的源代码了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//位置：src/main/kotlin/blog/yuanyuan/Person.kt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> blog.yuanyuan</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">var</span> name:String,<span class="keyword">var</span> age:<span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//位置：src/main/java/blog/yuanyuan/App.java</span></span><br><span class="line"><span class="keyword">package</span> blog.yuanyuan;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;元渊&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写好之后，点击main方法旁边的运行按钮，可以看到一起编译了Java和Kotlin源代码，并成功运行：</p><p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704152148.png" alt="image-20240704152147971" /></p><p>如果要打包为可执行的应用，也可以直接使用<code>application</code>插件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">&quot;application&quot;</span>)</span><br><span class="line">    kotlin(<span class="string">&quot;jvm&quot;</span>) version <span class="string">&quot;1.9.21&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">application &#123;</span><br><span class="line">    mainClass=<span class="string">&quot;blog.yuanyuan.App&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build打包之后，已经自动将Kotlin标准库依赖集成了，也可以直接使用：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704152722.png" alt="image-20240704152722374" style="zoom:67%;" /><p>这样，我们就可以愉快地进行混合编程了。</p><h2 id="多项目配置"><a class="markdownIt-Anchor" href="#多项目配置"></a> 多项目配置</h2><p>前面我们介绍的是单个项目的布局，现在我们接着来看多个项目的布局。</p><p>通常对于一些大型的分布式项目来说，我们会在一个项目中包含多个模块，不同的模块负责不同的功能，并且不同模块的代码独立进行编写，这时整个Gradle项目就会存在多个子项目：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gradle-kotlin</span><br><span class="line">|</span><br><span class="line">├── auth-service</span><br><span class="line">│   ...</span><br><span class="line">│   └── build.gradle.kts</span><br><span class="line">├── chat-service</span><br><span class="line">│   ...</span><br><span class="line">│   └── build.gradle.kts</span><br><span class="line">└── settings.gradle.kts</span><br></pre></td></tr></table></figure><p>可以看到，在根项目下，只存在<code>settings.gradle.kts</code>用于全局配置，而具体的<code>build.gradle.kts</code>构建文件存在于各个子项目中分别进行编写。</p><p>我们也可以按照这样的结构去搭建我们的多模块项目。</p><h3 id="项目创建"><a class="markdownIt-Anchor" href="#项目创建"></a> 项目创建</h3><p>要创建一个多模块项目，我们可以先使用IDEA创建一个简单的Gradle项目出来，我们还是使用之前学习的那个gradle项目。</p><p>接着我们删除不需要的内容，比如：<code>src</code>目录、<code>build.gradle.kts</code>文件等，接着右键最外层项目，创建一个新的子项目，此时我们需要选择最外层项目为我们的父项目：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704153652.png" alt="image-20240704153652200" style="zoom:50%;" /><p>创建完成后，我们可以打开最外层的<code>settings.gradle.kts</code>文件，IDEA已经自动为我们添加了模块引入：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rootProject.name = <span class="string">&quot;gradle-kotlin&quot;</span></span><br><span class="line">include(<span class="string">&quot;auth-service&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时，父子项目的层级已经明确划分出来了：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704154022.png" alt="image-20240704154022073" style="zoom:80%;" /><p>可以看到，<code>build.gradle.kts</code>现在由子模块进行配置，每个子模块都可以单独处理。同理，新建<strong>chat-service</strong>模块</p><p>在存在多个子项目的时候，我们可以直接在根项目中执行指令，会生效于全部的子项目：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704154325.png" alt="image-20240704154324741" style="zoom:67%;" /><p>可以看到，这里的项目名称前面都加了一个<code>:</code>符号。</p><p>新建一个commons模块</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">include(<span class="string">&quot;auth-service&quot;</span>)</span><br><span class="line">include(<span class="string">&quot;chat-service&quot;</span>)</span><br><span class="line">include(<span class="string">&quot;commons&quot;</span>)</span><br><span class="line"><span class="comment">//==========================简写===================</span></span><br><span class="line">include(<span class="string">&quot;auth-service&quot;</span>,<span class="string">&quot;chat-service&quot;</span>,<span class="string">&quot;commons&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们也可以配置项目之间的依赖，我们只需在<code>dependencies</code>中进行配置：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(project(<span class="string">&quot;:commons&quot;</span>))   <span class="comment">//使用project方法来引用其他项目作为依赖，项目名称前需要添加冒号</span></span><br><span class="line">    testImplementation(platform(<span class="string">&quot;org.junit:junit-bom:5.10.0&quot;</span>))</span><br><span class="line">    testImplementation(<span class="string">&quot;org.junit.jupiter:junit-jupiter&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些时候，我们可能需要将一些部分统一进行配置，比如配置代码仓库地址，以及项目用到的插件，我们可以直接在根项目创建一个<code>build.gradle.kts</code>来统一编写内容：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">subprojects &#123;   <span class="comment">//subprojects表示对所有的子项目生效 还有一个allprojects，包含自己</span></span><br><span class="line">    apply(plugin = <span class="string">&quot;java&quot;</span>)   <span class="comment">//定义插件需要使用apply来完成，plugin&#123;&#125;在这里不行</span></span><br><span class="line"></span><br><span class="line">    group = <span class="string">&quot;blog.yuanyuan&quot;</span>   <span class="comment">//定义组</span></span><br><span class="line">    version = <span class="string">&quot;unspecified&quot;</span>  <span class="comment">//定义版本</span></span><br><span class="line">    </span><br><span class="line">    configure&lt;JavaPluginExtension&gt; &#123; </span><br><span class="line">        sourceCompatibility = JavaVersion.VERSION_17</span><br><span class="line">        targetCompatibility = JavaVersion.VERSION_17</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repositories &#123;   <span class="comment">//定义自定义仓库地址</span></span><br><span class="line">        maven &#123;</span><br><span class="line">            setUrl(<span class="string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们即使不在子项目中编写这些，就可以直接得到根项目的配置：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation(platform(<span class="string">&quot;org.junit:junit-bom:5.10.0&quot;</span>))</span><br><span class="line">    testImplementation(<span class="string">&quot;org.junit.jupiter:junit-jupiter&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖的传递"><a class="markdownIt-Anchor" href="#依赖的传递"></a> 依赖的传递</h3><p>我们在使用多模块时可能会遇到这样的一个问题，现在有三个模块，并且具有以下依赖关联：</p><ul><li>service-a</li><li>service-b implementation(service-a)</li><li>service-c implementation(service-b)</li></ul><p>此时，从链式的依赖关系上来看，它们长这样：<code>service-a -&gt; service-b -&gt; service-c </code></p><p>按照正常的传递关系来说，在B中应该是可以直接使用A中定义的内容的，因为依赖了A模块，同时，由于C依赖了B模块，那么理所应当，C也应该可以直接使用A中定义的内容，我们来看看是否真的如此：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A模块中定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static void test() &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//B模块中定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Test.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C模块中定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Test.test();   <span class="comment">//找不到类Test，编译失败</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就很奇怪了，在Maven中是完全可以实现传递依赖的，为什么到Gradle就不行了呢？这是因为<code>implementation</code>不支持依赖传递，因此，即使我们改变了B模块的依赖，此时C也无法通过传递的形式得到B包含的依赖，由于不需要处理传递依赖，在编译时只需要处理一层，因此速度会非常快，大部分情况下非常推荐使用<code>implementation</code>来进行依赖导入。</p><p>如果各位小伙伴需要实现传递依赖的效果，我们需要使用另一个插件提供的方法来导入依赖：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    `java-library`   <span class="comment">//java-library提供了传递依赖api函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    api(project(<span class="string">&quot;:commons&quot;</span>))   <span class="comment">//与implementation效果一样，但是支持传递依赖</span></span><br><span class="line">    testImplementation(platform(<span class="string">&quot;org.junit:junit-bom:5.10.0&quot;</span>))</span><br><span class="line">    testImplementation(<span class="string">&quot;org.junit.jupiter:junit-jupiter&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，模块B的依赖由于使用了api进行导入，我们在模块C中无论是使用<code>api</code>导入还是<code>implementation</code>导入B，都可以使用B中api函数导入的依赖了。</p><h3 id="使用buildsrc模块"><a class="markdownIt-Anchor" href="#使用buildsrc模块"></a> 使用buildSrc模块</h3><p>在Gradle中有一个特殊机制，我们可以创建一个名为<code>buildSrc</code>的模块，它支持我们自己定义能够在<code>kts</code>脚本中使用的内容。</p><p>但是我们发现报错了，为什么呢？因为这个模块比较特殊，他不能被其他模块包含，他自动就会被加载。</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704161555.png" alt="image-20240704161555048" style="zoom:67%;" /><p>接着我们修改一下buildSrc模块的<code>build.gradle.kts</code>文件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    `kotlin-dsl`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们就可以编写我们需要使用的部分了，比如我们希望吧阿里云Maven仓库封装成一个函数的形式，直接使用，就像<code>mavenCentral()</code>那样，不然每次都要写一个完整地址，很麻烦，这里我们直接开一个新的kt文件编写扩展函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.gradle.api.artifacts.dsl.RepositoryHandler</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于repositories函数中提供的this为RepositoryHandler类型的对象</span></span><br><span class="line"><span class="comment">//这里我们直接为其编写扩展函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> RepositoryHandler.<span class="title">mavenAlibaba</span><span class="params">()</span></span> = maven &#123;</span><br><span class="line">    setUrl(<span class="string">&quot;https://maven.aliyun.com/repository/public/&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，我们就可以在其他的kts脚本中使用我们定义的内容了，比如根项目的配置：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenAlibaba()   <span class="comment">//直接使用自定义的</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是感觉很方便？我们也可以使用这种方式定义所有需要使用的依赖版本，实现统一管理，比如编译版本的管理：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.gradle.api.JavaVersion</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> Version &#123;</span><br><span class="line">    <span class="keyword">val</span> sourceVersion = JavaVersion.VERSION_17</span><br><span class="line">    <span class="keyword">val</span> targetVersion = JavaVersion.VERSION_17</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    configure&lt;JavaPluginExtension&gt; &#123;</span><br><span class="line">        targetCompatibility = Version.targetVersion   <span class="comment">//直接使用Version类获取版本</span></span><br><span class="line">        sourceCompatibility = Version.sourceVersion</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包括如果我们需要使用一些第三方的依赖，也可以统一管理版本：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Version &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">val</span> springVersion = <span class="string">&quot;6.1.3&quot;</span>   <span class="comment">//统一Spring相关依赖的版本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(<span class="string">&quot;org.springframework:spring-beans:<span class="subst">$&#123;Version.springVersion&#125;</span>&quot;</span>)   <span class="comment">//直接从Version中获取版本</span></span><br><span class="line">    implementation(<span class="string">&quot;org.springframework:spring-aop:<span class="subst">$&#123;Version.springVersion&#125;</span>&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;org.springframework:spring-web:<span class="subst">$&#123;Version.springVersion&#125;</span>&quot;</span>)</span><br><span class="line">    testImplementation(platform(<span class="string">&quot;org.junit:junit-bom:5.10.0&quot;</span>))</span><br><span class="line">    testImplementation(<span class="string">&quot;org.junit.jupiter:junit-jupiter&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了以上用法之外，我们也可以在buildSrc模块中编写自定义的插件并使用，这里我们创建一个新的插件类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.gradle.api.Plugin</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Project</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPlugin</span>: <span class="type">Plugin</span>&lt;<span class="type">Project</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">apply</span><span class="params">(target: <span class="type">Project</span>)</span></span> &#123;   <span class="comment">//插件应用时会直接调用apply函数</span></span><br><span class="line">        println(<span class="string">&quot;插件生效了&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们需要在buildSrc的构建脚本中声明此插件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gradlePlugin &#123;</span><br><span class="line">    plugins &#123;</span><br><span class="line">        create(<span class="string">&quot;my-custom-plugin&quot;</span>) &#123;   <span class="comment">//创建一个新的Plugin</span></span><br><span class="line">            id = <span class="string">&quot;my-plugin&quot;</span>  <span class="comment">//插件的ID</span></span><br><span class="line">            implementationClass = <span class="string">&quot;MyPlugin&quot;</span>   <span class="comment">//插件的实现类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明之后，我们就可以在项目中使用了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  ...</span><br><span class="line">    id(<span class="string">&quot;my-plugin&quot;</span>)   <span class="comment">//直接通过id使用插件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用插件，我们可以快速为项目添加各种任务，这里我们魔改一下上面写的插件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPlugin</span>: <span class="type">Plugin</span>&lt;<span class="type">Project</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">apply</span><span class="params">(target: <span class="type">Project</span>)</span></span> &#123;  <span class="comment">//直接在apply中注册新的任务，这样插件加载之后就具有这些任务了</span></span><br><span class="line">        target.tasks.register(<span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">            doLast &#123; println(<span class="string">&quot;你干嘛&quot;</span>) &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        target.tasks.register(<span class="string">&quot;b&quot;</span>) &#123;</span><br><span class="line">            doLast &#123; println(<span class="string">&quot;哎哟&quot;</span>) &#125;</span><br><span class="line">            dependsOn(target.tasks.named(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时项目中已经存在我们自定义的两个任务了：</p><img src="https://cdn.jsdelivr.net/gh/liaojie1314/PicGo@master/images/20240704163354.png" alt="image-20240704163353685" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;gradle依赖管理基于kotlin-dsl&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#gradle依赖管理基于kotlin-dsl&quot;&gt;&lt;/a&gt; Gradle依赖管理（基于Kotlin DSL）&lt;/h1&gt;
&lt;p&gt;Gradle构建工具</summary>
      
    
    
    
    <category term="工具" scheme="https://www.yuanyuan.blog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="gradle" scheme="https://www.yuanyuan.blog/tags/gradle/"/>
    
  </entry>
  
</feed>
